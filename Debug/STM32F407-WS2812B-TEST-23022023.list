
STM32F407-WS2812B-TEST-23022023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079cc  080079cc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079d4  080079d4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080079dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000019c4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001a44  20001a44  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001068b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002493  00000000  00000000  0003073b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00032bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb8  00000000  00000000  00033970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c7f  00000000  00000000  00034628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bf8  00000000  00000000  000562a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc3b9  00000000  00000000  00066e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133258  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003db8  00000000  00000000  001332a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007760 	.word	0x08007760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08007760 	.word	0x08007760

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <irSetup>:

#endif


void irSetup(TIM_HandleTypeDef *htim, UART_HandleTypeDef *huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	irHtim = htim;
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <irSetup+0x28>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6013      	str	r3, [r2, #0]
	irHuart = huart;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <irSetup+0x2c>)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	6013      	str	r3, [r2, #0]
//	HAL_TIM_Base_Start_IT(htim);
	HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f004 f889 	bl	80046b4 <HAL_TIM_IC_Start_IT>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000e4 	.word	0x200000e4
 80005b0:	200000e8 	.word	0x200000e8

080005b4 <irHandle>:
void irHandle(void (*callback)(uint16_t, uint16_t))
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if(irReceived == 1){
 80005bc:	4b62      	ldr	r3, [pc, #392]	; (8000748 <irHandle+0x194>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	f040 80bd 	bne.w	8000740 <irHandle+0x18c>
			  for(int i = 0; i<8; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e049      	b.n	8000660 <irHandle+0xac>
			  {
				  if(irPulses[i]<(1000+irPulseError) && irPulses[i]>(1000-irPulseError))
 80005cc:	4b5f      	ldr	r3, [pc, #380]	; (800074c <irHandle+0x198>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80005d4:	495e      	ldr	r1, [pc, #376]	; (8000750 <irHandle+0x19c>)
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80005dc:	4293      	cmp	r3, r2
 80005de:	db1a      	blt.n	8000616 <irHandle+0x62>
 80005e0:	4a5b      	ldr	r2, [pc, #364]	; (8000750 <irHandle+0x19c>)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b58      	ldr	r3, [pc, #352]	; (800074c <irHandle+0x198>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dd0f      	ble.n	8000616 <irHandle+0x62>
					  irDevice &= ~(1 << (i));
 80005f6:	2201      	movs	r2, #1
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	b25a      	sxtb	r2, r3
 8000604:	4b53      	ldr	r3, [pc, #332]	; (8000754 <irHandle+0x1a0>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	4013      	ands	r3, r2
 800060c:	b25b      	sxtb	r3, r3
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b50      	ldr	r3, [pc, #320]	; (8000754 <irHandle+0x1a0>)
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	e021      	b.n	800065a <irHandle+0xa6>
				  else if(irPulses[i]<(2000+irPulseError) && irPulses[i]>(2000-irPulseError))
 8000616:	4b4d      	ldr	r3, [pc, #308]	; (800074c <irHandle+0x198>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 800061e:	494c      	ldr	r1, [pc, #304]	; (8000750 <irHandle+0x19c>)
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000626:	4293      	cmp	r3, r2
 8000628:	db17      	blt.n	800065a <irHandle+0xa6>
 800062a:	4a49      	ldr	r2, [pc, #292]	; (8000750 <irHandle+0x19c>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000632:	461a      	mov	r2, r3
 8000634:	4b45      	ldr	r3, [pc, #276]	; (800074c <irHandle+0x198>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800063c:	429a      	cmp	r2, r3
 800063e:	dd0c      	ble.n	800065a <irHandle+0xa6>
					  irDevice |= (1 << (i));
 8000640:	2201      	movs	r2, #1
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	b25a      	sxtb	r2, r3
 800064a:	4b42      	ldr	r3, [pc, #264]	; (8000754 <irHandle+0x1a0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	4313      	orrs	r3, r2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b3f      	ldr	r3, [pc, #252]	; (8000754 <irHandle+0x1a0>)
 8000658:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i<8; i++)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b07      	cmp	r3, #7
 8000664:	ddb2      	ble.n	80005cc <irHandle+0x18>
			  }
			  for(int i = 17; i<25; i++)
 8000666:	2311      	movs	r3, #17
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	e04b      	b.n	8000704 <irHandle+0x150>
			  {
				  if(irPulses[i]<(1000+irPulseError) && irPulses[i]>(1000-irPulseError))
 800066c:	4b37      	ldr	r3, [pc, #220]	; (800074c <irHandle+0x198>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8000674:	4936      	ldr	r1, [pc, #216]	; (8000750 <irHandle+0x19c>)
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800067c:	4293      	cmp	r3, r2
 800067e:	db1b      	blt.n	80006b8 <irHandle+0x104>
 8000680:	4a33      	ldr	r2, [pc, #204]	; (8000750 <irHandle+0x19c>)
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000688:	461a      	mov	r2, r3
 800068a:	4b30      	ldr	r3, [pc, #192]	; (800074c <irHandle+0x198>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000692:	429a      	cmp	r2, r3
 8000694:	dd10      	ble.n	80006b8 <irHandle+0x104>
					  irCommand &= ~(1 << (i-17));
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	3b11      	subs	r3, #17
 800069a:	2201      	movs	r2, #1
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	b25a      	sxtb	r2, r3
 80006a6:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <irHandle+0x1a4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	4013      	ands	r3, r2
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <irHandle+0x1a4>)
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e022      	b.n	80006fe <irHandle+0x14a>
				  else if(irPulses[i]<(2000+irPulseError) && irPulses[i]>(2000-irPulseError))
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <irHandle+0x198>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 80006c0:	4923      	ldr	r1, [pc, #140]	; (8000750 <irHandle+0x19c>)
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	db18      	blt.n	80006fe <irHandle+0x14a>
 80006cc:	4a20      	ldr	r2, [pc, #128]	; (8000750 <irHandle+0x19c>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <irHandle+0x198>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 80006de:	429a      	cmp	r2, r3
 80006e0:	dd0d      	ble.n	80006fe <irHandle+0x14a>
					  irCommand |= (1 << (i-17));
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3b11      	subs	r3, #17
 80006e6:	2201      	movs	r2, #1
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <irHandle+0x1a4>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <irHandle+0x1a4>)
 80006fc:	701a      	strb	r2, [r3, #0]
			  for(int i = 17; i<25; i++)
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3301      	adds	r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2b18      	cmp	r3, #24
 8000708:	ddb0      	ble.n	800066c <irHandle+0xb8>
			  }
#ifdef DEBUG
			  sprintf(ascii, "%d, c: %d\r\n", irDevice, irCommand);
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <irHandle+0x1a0>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <irHandle+0x1a4>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4911      	ldr	r1, [pc, #68]	; (800075c <irHandle+0x1a8>)
 8000716:	4812      	ldr	r0, [pc, #72]	; (8000760 <irHandle+0x1ac>)
 8000718:	f006 fbb4 	bl	8006e84 <siprintf>
			  HAL_UART_Transmit(&irHuart, ascii, sizeof(ascii), 100);
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	2214      	movs	r2, #20
 8000720:	490f      	ldr	r1, [pc, #60]	; (8000760 <irHandle+0x1ac>)
 8000722:	4810      	ldr	r0, [pc, #64]	; (8000764 <irHandle+0x1b0>)
 8000724:	f005 f995 	bl	8005a52 <HAL_UART_Transmit>
#endif
			  callback(irDevice, irCommand);
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <irHandle+0x1a0>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <irHandle+0x1a4>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b299      	uxth	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4610      	mov	r0, r2
 8000738:	4798      	blx	r3
			  irReceived = 0;
 800073a:	4b03      	ldr	r3, [pc, #12]	; (8000748 <irHandle+0x194>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]

	}
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000009c 	.word	0x2000009c
 800074c:	20000000 	.word	0x20000000
 8000750:	200000a0 	.word	0x200000a0
 8000754:	200000e0 	.word	0x200000e0
 8000758:	200000e1 	.word	0x200000e1
 800075c:	08007778 	.word	0x08007778
 8000760:	200000ec 	.word	0x200000ec
 8000764:	200000e8 	.word	0x200000e8

08000768 <irIRQ>:


void irIRQ()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	uint16_t pulse_duration = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	80fb      	strh	r3, [r7, #6]

	  if (irHtim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <irIRQ+0x9c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7f1b      	ldrb	r3, [r3, #28]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d13e      	bne.n	80007fa <irIRQ+0x92>
	    {

	      pulse_duration = (uint16_t)HAL_TIM_ReadCapturedValue(irHtim, TIM_CHANNEL_1);
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <irIRQ+0x9c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fbec 	bl	8004f60 <HAL_TIM_ReadCapturedValue>
 8000788:	4603      	mov	r3, r0
 800078a:	80fb      	strh	r3, [r7, #6]
	      __HAL_TIM_SET_COUNTER(irHtim, 0);
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <irIRQ+0x9c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
	      if(irPulseNb > 0 && irPulseNb <= 33){
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <irIRQ+0xa0>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d01a      	beq.n	80007d4 <irIRQ+0x6c>
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <irIRQ+0xa0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b21      	cmp	r3, #33	; 0x21
 80007a4:	d816      	bhi.n	80007d4 <irIRQ+0x6c>
	          	irPulses[irPulseNb-1] = pulse_duration;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <irIRQ+0xa0>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	4917      	ldr	r1, [pc, #92]	; (800080c <irIRQ+0xa4>)
 80007ae:	88fa      	ldrh	r2, [r7, #6]
 80007b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	          	irPulseNb++;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <irIRQ+0xa0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <irIRQ+0xa0>)
 80007be:	701a      	strb	r2, [r3, #0]
	          	if(irPulseNb == 33)
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <irIRQ+0xa0>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b21      	cmp	r3, #33	; 0x21
 80007c6:	d105      	bne.n	80007d4 <irIRQ+0x6c>
	          	{
	          		irReceived = 1;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <irIRQ+0xa8>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
	          		irPulseNb = 0;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <irIRQ+0xa0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
	          	}
	          }
	      if(pulse_duration<(8600+irPulseError) && pulse_duration>(8600-irPulseError))
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <irIRQ+0xac>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80007dc:	3317      	adds	r3, #23
 80007de:	88fa      	ldrh	r2, [r7, #6]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	db0a      	blt.n	80007fa <irIRQ+0x92>
 80007e4:	88fa      	ldrh	r2, [r7, #6]
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <irIRQ+0xac>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	f5c3 5306 	rsb	r3, r3, #8576	; 0x2180
 80007ee:	3318      	adds	r3, #24
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dd02      	ble.n	80007fa <irIRQ+0x92>
	          	irPulseNb = 1;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <irIRQ+0xa0>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
	    }
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000e4 	.word	0x200000e4
 8000808:	2000009d 	.word	0x2000009d
 800080c:	200000a0 	.word	0x200000a0
 8000810:	2000009c 	.word	0x2000009c
 8000814:	20000000 	.word	0x20000000

08000818 <effectsLoop>:
uint8_t ACTIVE_EFFECT_TYPE = 0;
uint8_t ACTIVE_EFFECT_NB = 0;


void effectsLoop()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	//CHECK ACTIVE STRIP
	switch(ACTIVE_EFFECT_TYPE)
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <effectsLoop+0x80>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d028      	beq.n	8000878 <effectsLoop+0x60>
 8000826:	2b03      	cmp	r3, #3
 8000828:	dc27      	bgt.n	800087a <effectsLoop+0x62>
 800082a:	2b01      	cmp	r3, #1
 800082c:	d001      	beq.n	8000832 <effectsLoop+0x1a>
 800082e:	2b02      	cmp	r3, #2
			handleEffects(strips, &ELE_INPUT_MACROS[0][0], ACTIVE_EFFECT_NB, BYTES_PER_EFFECT);
		break;
		//HANDLE IR
		case 2:

		break;
 8000830:	e023      	b.n	800087a <effectsLoop+0x62>
			strips = (ELE_INPUT_MACROS[ACTIVE_EFFECT_NB][1]<<8) | ELE_INPUT_MACROS[ACTIVE_EFFECT_NB][0];
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <effectsLoop+0x84>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <effectsLoop+0x88>)
 800083a:	460b      	mov	r3, r1
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	440b      	add	r3, r1
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	3301      	adds	r3, #1
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <effectsLoop+0x84>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	4913      	ldr	r1, [pc, #76]	; (80008a0 <effectsLoop+0x88>)
 8000854:	4603      	mov	r3, r0
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4403      	add	r3, r0
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	440b      	add	r3, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21b      	sxth	r3, r3
 8000866:	80fb      	strh	r3, [r7, #6]
			handleEffects(strips, &ELE_INPUT_MACROS[0][0], ACTIVE_EFFECT_NB, BYTES_PER_EFFECT);
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <effectsLoop+0x84>)
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	88f8      	ldrh	r0, [r7, #6]
 800086e:	2306      	movs	r3, #6
 8000870:	490b      	ldr	r1, [pc, #44]	; (80008a0 <effectsLoop+0x88>)
 8000872:	f000 f819 	bl	80008a8 <handleEffects>
		break;
 8000876:	e000      	b.n	800087a <effectsLoop+0x62>
		//HANDLE TIME
		case 3:

		break;
 8000878:	bf00      	nop
	}
	if(ws2812b.transferComplete)
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <effectsLoop+0x8c>)
 800087c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8000880:	2b00      	cmp	r3, #0
 8000882:	d005      	beq.n	8000890 <effectsLoop+0x78>
	{
		ws2812b.startTransfer = 1;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <effectsLoop+0x8c>)
 8000886:	2201      	movs	r2, #1
 8000888:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		ws2812b_handle();
 800088c:	f002 f88e 	bl	80029ac <ws2812b_handle>
	}
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200013c0 	.word	0x200013c0
 800089c:	200013c1 	.word	0x200013c1
 80008a0:	20001614 	.word	0x20001614
 80008a4:	2000171c 	.word	0x2000171c

080008a8 <handleEffects>:
void handleEffects(uint16_t strips, uint8_t *arr, uint8_t start, uint8_t size)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6039      	str	r1, [r7, #0]
 80008b0:	4611      	mov	r1, r2
 80008b2:	461a      	mov	r2, r3
 80008b4:	4603      	mov	r3, r0
 80008b6:	80fb      	strh	r3, [r7, #6]
 80008b8:	460b      	mov	r3, r1
 80008ba:	717b      	strb	r3, [r7, #5]
 80008bc:	4613      	mov	r3, r2
 80008be:	713b      	strb	r3, [r7, #4]
	switch(*(arr+start*size+2))
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	793a      	ldrb	r2, [r7, #4]
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	3302      	adds	r3, #2
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <handleEffects+0x32>
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d003      	beq.n	80008e0 <handleEffects+0x38>
					setBlack(i);
				}
			}
			break;
	}
}
 80008d8:	e026      	b.n	8000928 <handleEffects+0x80>
			setAllBlack();
 80008da:	f000 f829 	bl	8000930 <setAllBlack>
			break;
 80008de:	e023      	b.n	8000928 <handleEffects+0x80>
			for(uint8_t i = 0; i < WS2812_BUFFER_COUNT; i++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	e01c      	b.n	8000920 <handleEffects+0x78>
				if(strips & (1<<i)) // Effect on strip
 80008e6:	88fa      	ldrh	r2, [r7, #6]
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	fa42 f303 	asr.w	r3, r2, r3
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00d      	beq.n	8000912 <handleEffects+0x6a>
					calcRainbow(i, *(arr+start*size+3));
 80008f6:	797b      	ldrb	r3, [r7, #5]
 80008f8:	793a      	ldrb	r2, [r7, #4]
 80008fa:	fb02 f303 	mul.w	r3, r2, r3
 80008fe:	3303      	adds	r3, #3
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	4413      	add	r3, r2
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f85e 	bl	80009cc <calcRainbow>
 8000910:	e003      	b.n	800091a <handleEffects+0x72>
					setBlack(i);
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f835 	bl	8000984 <setBlack>
			for(uint8_t i = 0; i < WS2812_BUFFER_COUNT; i++)
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	3301      	adds	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d9df      	bls.n	80008e6 <handleEffects+0x3e>
			break;
 8000926:	bf00      	nop
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <setAllBlack>:

void setAllBlack()
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
	for(uint8_t j = 0; j < WS2812_BUFFER_COUNT; j++)
 8000936:	2300      	movs	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	e017      	b.n	800096c <setAllBlack+0x3c>
		for(uint16_t i = 0; i < (WS2812B_NUMBER_OF_LEDS*3); i++)
 800093c:	2300      	movs	r3, #0
 800093e:	80bb      	strh	r3, [r7, #4]
 8000940:	e00d      	b.n	800095e <setAllBlack+0x2e>
			frameBufferArray[j][i] = 0;
 8000942:	79fa      	ldrb	r2, [r7, #7]
 8000944:	88bb      	ldrh	r3, [r7, #4]
 8000946:	490e      	ldr	r1, [pc, #56]	; (8000980 <setAllBlack+0x50>)
 8000948:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800094c:	fb00 f202 	mul.w	r2, r0, r2
 8000950:	440a      	add	r2, r1
 8000952:	4413      	add	r3, r2
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
		for(uint16_t i = 0; i < (WS2812B_NUMBER_OF_LEDS*3); i++)
 8000958:	88bb      	ldrh	r3, [r7, #4]
 800095a:	3301      	adds	r3, #1
 800095c:	80bb      	strh	r3, [r7, #4]
 800095e:	88bb      	ldrh	r3, [r7, #4]
 8000960:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000964:	d3ed      	bcc.n	8000942 <setAllBlack+0x12>
	for(uint8_t j = 0; j < WS2812_BUFFER_COUNT; j++)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	3301      	adds	r3, #1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d9e4      	bls.n	800093c <setAllBlack+0xc>
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	20000100 	.word	0x20000100

08000984 <setBlack>:
void setBlack(uint8_t id)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i<(WS2812B_NUMBER_OF_LEDS*3); i++)
 800098e:	2300      	movs	r3, #0
 8000990:	81fb      	strh	r3, [r7, #14]
 8000992:	e00d      	b.n	80009b0 <setBlack+0x2c>
		frameBufferArray[id][i] = 0;
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	490b      	ldr	r1, [pc, #44]	; (80009c8 <setBlack+0x44>)
 800099a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800099e:	fb00 f202 	mul.w	r2, r0, r2
 80009a2:	440a      	add	r2, r1
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i<(WS2812B_NUMBER_OF_LEDS*3); i++)
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	3301      	adds	r3, #1
 80009ae:	81fb      	strh	r3, [r7, #14]
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009b6:	d3ed      	bcc.n	8000994 <setBlack+0x10>
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000100 	.word	0x20000100

080009cc <calcRainbow>:
void calcRainbow(uint8_t id, uint8_t effectLength)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
		uint32_t i;
		static uint8_t x[WS2812_BUFFER_COUNT] = {0};

		x[id] += 1;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <calcRainbow+0xc4>)
 80009e0:	5cd2      	ldrb	r2, [r2, r3]
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	3201      	adds	r2, #1
 80009e6:	b2d1      	uxtb	r1, r2
 80009e8:	4a29      	ldr	r2, [pc, #164]	; (8000a90 <calcRainbow+0xc4>)
 80009ea:	54d1      	strb	r1, [r2, r3]

		if(x[id] == 256*5)
			x[id] = 0;


		for( i = 0; i < WS2812B_NUMBER_OF_LEDS; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e045      	b.n	8000a7e <calcRainbow+0xb2>
		{
			uint32_t color = Wheel(((i * 256) / effectLength + x[id]) & 0xFF);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	021a      	lsls	r2, r3, #8
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4923      	ldr	r1, [pc, #140]	; (8000a90 <calcRainbow+0xc4>)
 8000a02:	5ccb      	ldrb	r3, [r1, r3]
 8000a04:	4413      	add	r3, r2
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f845 	bl	8000a98 <Wheel>
 8000a0e:	60b8      	str	r0, [r7, #8]

			frameBufferArray[id][i*3 + 0] = (color & 0xFF);
 8000a10:	79f9      	ldrb	r1, [r7, #7]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	b2d4      	uxtb	r4, r2
 8000a1e:	481d      	ldr	r0, [pc, #116]	; (8000a94 <calcRainbow+0xc8>)
 8000a20:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a24:	fb01 f202 	mul.w	r2, r1, r2
 8000a28:	4402      	add	r2, r0
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4622      	mov	r2, r4
 8000a2e:	701a      	strb	r2, [r3, #0]
			frameBufferArray[id][i*3 + 1] = (color >> 8 & 0xFF);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	0a18      	lsrs	r0, r3, #8
 8000a34:	79f9      	ldrb	r1, [r7, #7]
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b2c4      	uxtb	r4, r0
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <calcRainbow+0xc8>)
 8000a44:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a48:	fb01 f202 	mul.w	r2, r1, r2
 8000a4c:	4402      	add	r2, r0
 8000a4e:	4413      	add	r3, r2
 8000a50:	4622      	mov	r2, r4
 8000a52:	701a      	strb	r2, [r3, #0]
			frameBufferArray[id][i*3 + 2] = (color >> 16 & 0xFF);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	0c18      	lsrs	r0, r3, #16
 8000a58:	79f9      	ldrb	r1, [r7, #7]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	3302      	adds	r3, #2
 8000a64:	b2c4      	uxtb	r4, r0
 8000a66:	480b      	ldr	r0, [pc, #44]	; (8000a94 <calcRainbow+0xc8>)
 8000a68:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a6c:	fb01 f202 	mul.w	r2, r1, r2
 8000a70:	4402      	add	r2, r0
 8000a72:	4413      	add	r3, r2
 8000a74:	4622      	mov	r2, r4
 8000a76:	701a      	strb	r2, [r3, #0]
		for( i = 0; i < WS2812B_NUMBER_OF_LEDS; i++)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2b63      	cmp	r3, #99	; 0x63
 8000a82:	d9b6      	bls.n	80009f2 <calcRainbow+0x26>
		}

}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200013c4 	.word	0x200013c4
 8000a94:	20000100 	.word	0x20000100

08000a98 <Wheel>:

uint32_t Wheel(uint8_t WheelPos) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b54      	cmp	r3, #84	; 0x54
 8000aac:	d80b      	bhi.n	8000ac6 <Wheel+0x2e>
    return newColor(255 - WheelPos * 3, 0, WheelPos * 3);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	33ff      	adds	r3, #255	; 0xff
 8000ab8:	0419      	lsls	r1, r3, #16
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	e020      	b.n	8000b08 <Wheel+0x70>
  }
  if(WheelPos < 170) {
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2ba9      	cmp	r3, #169	; 0xa9
 8000aca:	d80e      	bhi.n	8000aea <Wheel+0x52>
    WheelPos -= 85;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	3b55      	subs	r3, #85	; 0x55
 8000ad0:	71fb      	strb	r3, [r7, #7]
    return newColor(0, WheelPos * 3, 255 - WheelPos * 3);
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	021a      	lsls	r2, r3, #8
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	1acb      	subs	r3, r1, r3
 8000ae4:	33ff      	adds	r3, #255	; 0xff
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	e00e      	b.n	8000b08 <Wheel+0x70>
  }
  WheelPos -= 170;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	3356      	adds	r3, #86	; 0x56
 8000aee:	71fb      	strb	r3, [r7, #7]
  return newColor(WheelPos * 3, 255 - WheelPos * 3, 0);
 8000af0:	79fa      	ldrb	r2, [r7, #7]
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	041a      	lsls	r2, r3, #16
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4619      	mov	r1, r3
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	1acb      	subs	r3, r1, r3
 8000b02:	33ff      	adds	r3, #255	; 0xff
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	4313      	orrs	r3, r2
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	irIRQ();
 8000b1c:	f7ff fe24 	bl	8000768 <irIRQ>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]

		if(huart->Instance == USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <HAL_UARTEx_RxEventCallback+0x58>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d11b      	bne.n	8000b76 <HAL_UARTEx_RxEventCallback+0x4e>
		{
		//		HAL_UART_Transmit(&huart1, UART1_CpltBuffer, sizeof(UART1_CpltBuffer), 100);
			UART_BytesReceived = size;
 8000b3e:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000b40:	887b      	ldrh	r3, [r7, #2]
 8000b42:	8013      	strh	r3, [r2, #0]
			memcpy(UART_CpltBuffer, UART_DmaBuffer, UART_BUFF_SIZE);
 8000b44:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_UARTEx_RxEventCallback+0x60>)
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UARTEx_RxEventCallback+0x64>)
 8000b48:	4614      	mov	r4, r2
 8000b4a:	461d      	mov	r5, r3
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	8023      	strh	r3, [r4, #0]
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) UART_DmaBuffer, UART_BUFF_SIZE);
 8000b5c:	2232      	movs	r2, #50	; 0x32
 8000b5e:	490b      	ldr	r1, [pc, #44]	; (8000b8c <HAL_UARTEx_RxEventCallback+0x64>)
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b62:	f005 f808 	bl	8005b76 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 0208 	bic.w	r2, r2, #8
 8000b74:	601a      	str	r2, [r3, #0]
		}

}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40004400 	.word	0x40004400
 8000b84:	2000156e 	.word	0x2000156e
 8000b88:	2000153c 	.word	0x2000153c
 8000b8c:	20001508 	.word	0x20001508
 8000b90:	20001464 	.word	0x20001464
 8000b94:	200014a8 	.word	0x200014a8

08000b98 <SendRoutinesOverUart>:
void SendRoutinesOverUart()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t *)"\nIR:\n", 5, 100);
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	4963      	ldr	r1, [pc, #396]	; (8000d30 <SendRoutinesOverUart+0x198>)
 8000ba4:	4863      	ldr	r0, [pc, #396]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000ba6:	f004 ff54 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0; i < MAX_IR_CODES; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	e039      	b.n	8000c24 <SendRoutinesOverUart+0x8c>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"n:", 2, 100);
 8000bb0:	2364      	movs	r3, #100	; 0x64
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	4960      	ldr	r1, [pc, #384]	; (8000d38 <SendRoutinesOverUart+0x1a0>)
 8000bb6:	485f      	ldr	r0, [pc, #380]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000bb8:	f004 ff4b 	bl	8005a52 <HAL_UART_Transmit>

		for(int j = 0; j<BYTES_PER_IR_CODE; j++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	e00d      	b.n	8000bde <SendRoutinesOverUart+0x46>
			HAL_UART_Transmit(&huart2, &IR_CODES_FLAGS[i][j], 1, 100);
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	005a      	lsls	r2, r3, #1
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a5c      	ldr	r2, [pc, #368]	; (8000d3c <SendRoutinesOverUart+0x1a4>)
 8000bcc:	1899      	adds	r1, r3, r2
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4858      	ldr	r0, [pc, #352]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000bd4:	f004 ff3d 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0; j<BYTES_PER_IR_CODE; j++)
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	ddee      	ble.n	8000bc2 <SendRoutinesOverUart+0x2a>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e010      	b.n	8000c0c <SendRoutinesOverUart+0x74>
			HAL_UART_Transmit(&huart2, &IR_CODES_MACROS[i][k], 1, 100);
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	4613      	mov	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a51      	ldr	r2, [pc, #324]	; (8000d40 <SendRoutinesOverUart+0x1a8>)
 8000bfa:	1899      	adds	r1, r3, r2
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	2201      	movs	r2, #1
 8000c00:	484c      	ldr	r0, [pc, #304]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000c02:	f004 ff26 	bl	8005a52 <HAL_UART_Transmit>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	2b05      	cmp	r3, #5
 8000c10:	ddeb      	ble.n	8000bea <SendRoutinesOverUart+0x52>

		HAL_UART_Transmit(&huart2, (uint8_t *)'\n', 1, 100);
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	2201      	movs	r2, #1
 8000c16:	210a      	movs	r1, #10
 8000c18:	4846      	ldr	r0, [pc, #280]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000c1a:	f004 ff1a 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0; i < MAX_IR_CODES; i++)
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3301      	adds	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	2b13      	cmp	r3, #19
 8000c28:	ddc2      	ble.n	8000bb0 <SendRoutinesOverUart+0x18>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)"\nEL:\n", 5, 100);
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2205      	movs	r2, #5
 8000c2e:	4945      	ldr	r1, [pc, #276]	; (8000d44 <SendRoutinesOverUart+0x1ac>)
 8000c30:	4840      	ldr	r0, [pc, #256]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000c32:	f004 ff0e 	bl	8005a52 <HAL_UART_Transmit>

	for(int i = 0; i < MAX_ELE_INPUTS; i++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	e02b      	b.n	8000c94 <SendRoutinesOverUart+0xfc>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"n:", 2, 100);
 8000c3c:	2364      	movs	r3, #100	; 0x64
 8000c3e:	2202      	movs	r2, #2
 8000c40:	493d      	ldr	r1, [pc, #244]	; (8000d38 <SendRoutinesOverUart+0x1a0>)
 8000c42:	483c      	ldr	r0, [pc, #240]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000c44:	f004 ff05 	bl	8005a52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)i, 1, 100);
 8000c48:	6939      	ldr	r1, [r7, #16]
 8000c4a:	2364      	movs	r3, #100	; 0x64
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4839      	ldr	r0, [pc, #228]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000c50:	f004 feff 	bl	8005a52 <HAL_UART_Transmit>

		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e010      	b.n	8000c7c <SendRoutinesOverUart+0xe4>
			HAL_UART_Transmit(&huart2, &ELE_INPUT_MACROS[i][k], 1, 100);
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a37      	ldr	r2, [pc, #220]	; (8000d48 <SendRoutinesOverUart+0x1b0>)
 8000c6a:	1899      	adds	r1, r3, r2
 8000c6c:	2364      	movs	r3, #100	; 0x64
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4830      	ldr	r0, [pc, #192]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000c72:	f004 feee 	bl	8005a52 <HAL_UART_Transmit>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b05      	cmp	r3, #5
 8000c80:	ddeb      	ble.n	8000c5a <SendRoutinesOverUart+0xc2>

		HAL_UART_Transmit(&huart2,(uint8_t *) '\n', 1, 100);
 8000c82:	2364      	movs	r3, #100	; 0x64
 8000c84:	2201      	movs	r2, #1
 8000c86:	210a      	movs	r1, #10
 8000c88:	482a      	ldr	r0, [pc, #168]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000c8a:	f004 fee2 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0; i < MAX_ELE_INPUTS; i++)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	3301      	adds	r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	2b09      	cmp	r3, #9
 8000c98:	ddd0      	ble.n	8000c3c <SendRoutinesOverUart+0xa4>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)"\nTM:\n", 5, 100);
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	492b      	ldr	r1, [pc, #172]	; (8000d4c <SendRoutinesOverUart+0x1b4>)
 8000ca0:	4824      	ldr	r0, [pc, #144]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000ca2:	f004 fed6 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0; i < MAX_TIME_MACROS; i++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	e039      	b.n	8000d20 <SendRoutinesOverUart+0x188>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"n:", 2, 100);
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4921      	ldr	r1, [pc, #132]	; (8000d38 <SendRoutinesOverUart+0x1a0>)
 8000cb2:	4820      	ldr	r0, [pc, #128]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000cb4:	f004 fecd 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0; j<BYTES_PER_TIME_FLAG; j++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	e00d      	b.n	8000cda <SendRoutinesOverUart+0x142>
			HAL_UART_Transmit(&huart2, &TIME_FLAGS[i][j], 1, 100);
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	009a      	lsls	r2, r3, #2
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a22      	ldr	r2, [pc, #136]	; (8000d50 <SendRoutinesOverUart+0x1b8>)
 8000cc8:	1899      	adds	r1, r3, r2
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4819      	ldr	r0, [pc, #100]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000cd0:	f004 febf 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0; j<BYTES_PER_TIME_FLAG; j++)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	ddee      	ble.n	8000cbe <SendRoutinesOverUart+0x126>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	e010      	b.n	8000d08 <SendRoutinesOverUart+0x170>
			HAL_UART_Transmit(&huart2, &TIME_MACROS[i][k], 1, 100);
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <SendRoutinesOverUart+0x1bc>)
 8000cf6:	1899      	adds	r1, r3, r2
 8000cf8:	2364      	movs	r3, #100	; 0x64
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000cfe:	f004 fea8 	bl	8005a52 <HAL_UART_Transmit>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	ddeb      	ble.n	8000ce6 <SendRoutinesOverUart+0x14e>
		HAL_UART_Transmit(&huart2,(uint8_t *) '\n', 1, 100);
 8000d0e:	2364      	movs	r3, #100	; 0x64
 8000d10:	2201      	movs	r2, #1
 8000d12:	210a      	movs	r1, #10
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <SendRoutinesOverUart+0x19c>)
 8000d16:	f004 fe9c 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0; i < MAX_TIME_MACROS; i++)
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	2b13      	cmp	r3, #19
 8000d24:	ddc2      	ble.n	8000cac <SendRoutinesOverUart+0x114>
	}

}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	08007784 	.word	0x08007784
 8000d34:	20001464 	.word	0x20001464
 8000d38:	0800778c 	.word	0x0800778c
 8000d3c:	20001574 	.word	0x20001574
 8000d40:	2000159c 	.word	0x2000159c
 8000d44:	08007790 	.word	0x08007790
 8000d48:	20001614 	.word	0x20001614
 8000d4c:	08007798 	.word	0x08007798
 8000d50:	20001650 	.word	0x20001650
 8000d54:	200016a0 	.word	0x200016a0

08000d58 <UartCheckReceived>:
void UartCheckReceived()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
	if(UART_BytesReceived > 0)
 8000d5e:	4b96      	ldr	r3, [pc, #600]	; (8000fb8 <UartCheckReceived+0x260>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 8310 	beq.w	800138a <UartCheckReceived+0x632>
	{
		if(ROUTINES_WRITE_FLAG == 1)
 8000d6a:	4b94      	ldr	r3, [pc, #592]	; (8000fbc <UartCheckReceived+0x264>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	f040 81d2 	bne.w	8001118 <UartCheckReceived+0x3c0>
		{
			if(UART_BytesReceived >= 3 && UART_CpltBuffer[0] == 'E' && UART_CpltBuffer[1] == 'N' && UART_CpltBuffer[2] == 'D' )
 8000d74:	4b90      	ldr	r3, [pc, #576]	; (8000fb8 <UartCheckReceived+0x260>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d91b      	bls.n	8000db6 <UartCheckReceived+0x5e>
 8000d7e:	4b90      	ldr	r3, [pc, #576]	; (8000fc0 <UartCheckReceived+0x268>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b45      	cmp	r3, #69	; 0x45
 8000d84:	d117      	bne.n	8000db6 <UartCheckReceived+0x5e>
 8000d86:	4b8e      	ldr	r3, [pc, #568]	; (8000fc0 <UartCheckReceived+0x268>)
 8000d88:	785b      	ldrb	r3, [r3, #1]
 8000d8a:	2b4e      	cmp	r3, #78	; 0x4e
 8000d8c:	d113      	bne.n	8000db6 <UartCheckReceived+0x5e>
 8000d8e:	4b8c      	ldr	r3, [pc, #560]	; (8000fc0 <UartCheckReceived+0x268>)
 8000d90:	789b      	ldrb	r3, [r3, #2]
 8000d92:	2b44      	cmp	r3, #68	; 0x44
 8000d94:	d10f      	bne.n	8000db6 <UartCheckReceived+0x5e>
			{
				HAL_UART_Transmit(&huart2, UART_RESPONSE_END, sizeof(UART_RESPONSE_END), 100);
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	2207      	movs	r2, #7
 8000d9a:	498a      	ldr	r1, [pc, #552]	; (8000fc4 <UartCheckReceived+0x26c>)
 8000d9c:	488a      	ldr	r0, [pc, #552]	; (8000fc8 <UartCheckReceived+0x270>)
 8000d9e:	f004 fe58 	bl	8005a52 <HAL_UART_Transmit>
				ROUTINES_WRITE_FLAG = 0;
 8000da2:	4b86      	ldr	r3, [pc, #536]	; (8000fbc <UartCheckReceived+0x264>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
				SAVING_IR_POS = 0;
 8000da8:	4b88      	ldr	r3, [pc, #544]	; (8000fcc <UartCheckReceived+0x274>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
				SAVING_TIME_POS = 0;
 8000dae:	4b88      	ldr	r3, [pc, #544]	; (8000fd0 <UartCheckReceived+0x278>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e2e6      	b.n	8001384 <UartCheckReceived+0x62c>

			}else if(UART_BytesReceived >= 14 && UART_CpltBuffer[0] == 'S' && UART_CpltBuffer[1] == 'V' && UART_CpltBuffer[2] == '+'){
 8000db6:	4b80      	ldr	r3, [pc, #512]	; (8000fb8 <UartCheckReceived+0x260>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	2b0d      	cmp	r3, #13
 8000dbe:	f240 82e1 	bls.w	8001384 <UartCheckReceived+0x62c>
 8000dc2:	4b7f      	ldr	r3, [pc, #508]	; (8000fc0 <UartCheckReceived+0x268>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b53      	cmp	r3, #83	; 0x53
 8000dc8:	f040 82dc 	bne.w	8001384 <UartCheckReceived+0x62c>
 8000dcc:	4b7c      	ldr	r3, [pc, #496]	; (8000fc0 <UartCheckReceived+0x268>)
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	2b56      	cmp	r3, #86	; 0x56
 8000dd2:	f040 82d7 	bne.w	8001384 <UartCheckReceived+0x62c>
 8000dd6:	4b7a      	ldr	r3, [pc, #488]	; (8000fc0 <UartCheckReceived+0x268>)
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	2b2b      	cmp	r3, #43	; 0x2b
 8000ddc:	f040 82d2 	bne.w	8001384 <UartCheckReceived+0x62c>

				if(UART_BytesReceived >= 15 && UART_CpltBuffer[3] == 'I' && UART_CpltBuffer[4] == 'R')
 8000de0:	4b75      	ldr	r3, [pc, #468]	; (8000fb8 <UartCheckReceived+0x260>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	2b0e      	cmp	r3, #14
 8000de8:	d97e      	bls.n	8000ee8 <UartCheckReceived+0x190>
 8000dea:	4b75      	ldr	r3, [pc, #468]	; (8000fc0 <UartCheckReceived+0x268>)
 8000dec:	78db      	ldrb	r3, [r3, #3]
 8000dee:	2b49      	cmp	r3, #73	; 0x49
 8000df0:	d17a      	bne.n	8000ee8 <UartCheckReceived+0x190>
 8000df2:	4b73      	ldr	r3, [pc, #460]	; (8000fc0 <UartCheckReceived+0x268>)
 8000df4:	791b      	ldrb	r3, [r3, #4]
 8000df6:	2b52      	cmp	r3, #82	; 0x52
 8000df8:	d176      	bne.n	8000ee8 <UartCheckReceived+0x190>
				{
					if(SAVING_IR_POS < MAX_IR_CODES)
 8000dfa:	4b74      	ldr	r3, [pc, #464]	; (8000fcc <UartCheckReceived+0x274>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b13      	cmp	r3, #19
 8000e00:	f200 82c0 	bhi.w	8001384 <UartCheckReceived+0x62c>
					{
						//IR ADDR
						IR_CODES_FLAGS[SAVING_IR_POS][0] = UART_CpltBuffer[5];
 8000e04:	4b71      	ldr	r3, [pc, #452]	; (8000fcc <UartCheckReceived+0x274>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	; (8000fc0 <UartCheckReceived+0x268>)
 8000e0c:	7959      	ldrb	r1, [r3, #5]
 8000e0e:	4b71      	ldr	r3, [pc, #452]	; (8000fd4 <UartCheckReceived+0x27c>)
 8000e10:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
						//IR COMMAND
						IR_CODES_FLAGS[SAVING_IR_POS][1] = UART_CpltBuffer[6];
 8000e14:	4b6d      	ldr	r3, [pc, #436]	; (8000fcc <UartCheckReceived+0x274>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	4b69      	ldr	r3, [pc, #420]	; (8000fc0 <UartCheckReceived+0x268>)
 8000e1c:	7999      	ldrb	r1, [r3, #6]
 8000e1e:	4a6d      	ldr	r2, [pc, #436]	; (8000fd4 <UartCheckReceived+0x27c>)
 8000e20:	0043      	lsls	r3, r0, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	460a      	mov	r2, r1
 8000e26:	705a      	strb	r2, [r3, #1]
						//ACTIVE STRIPS
						IR_CODES_MACROS[SAVING_IR_POS][0] = UART_CpltBuffer[8];
 8000e28:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <UartCheckReceived+0x274>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4b64      	ldr	r3, [pc, #400]	; (8000fc0 <UartCheckReceived+0x268>)
 8000e30:	7a18      	ldrb	r0, [r3, #8]
 8000e32:	4a69      	ldr	r2, [pc, #420]	; (8000fd8 <UartCheckReceived+0x280>)
 8000e34:	460b      	mov	r3, r1
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	440b      	add	r3, r1
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4602      	mov	r2, r0
 8000e40:	701a      	strb	r2, [r3, #0]
						IR_CODES_MACROS[SAVING_IR_POS][1] = UART_CpltBuffer[9];
 8000e42:	4b62      	ldr	r3, [pc, #392]	; (8000fcc <UartCheckReceived+0x274>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4619      	mov	r1, r3
 8000e48:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <UartCheckReceived+0x268>)
 8000e4a:	7a58      	ldrb	r0, [r3, #9]
 8000e4c:	4a62      	ldr	r2, [pc, #392]	; (8000fd8 <UartCheckReceived+0x280>)
 8000e4e:	460b      	mov	r3, r1
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	440b      	add	r3, r1
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	701a      	strb	r2, [r3, #0]
						//EFFECT
						IR_CODES_MACROS[SAVING_IR_POS][2] = UART_CpltBuffer[11];
 8000e5e:	4b5b      	ldr	r3, [pc, #364]	; (8000fcc <UartCheckReceived+0x274>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <UartCheckReceived+0x268>)
 8000e66:	7ad8      	ldrb	r0, [r3, #11]
 8000e68:	4a5b      	ldr	r2, [pc, #364]	; (8000fd8 <UartCheckReceived+0x280>)
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	440b      	add	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	3302      	adds	r3, #2
 8000e76:	4602      	mov	r2, r0
 8000e78:	701a      	strb	r2, [r3, #0]
						IR_CODES_MACROS[SAVING_IR_POS][3] = UART_CpltBuffer[12];
 8000e7a:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <UartCheckReceived+0x274>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <UartCheckReceived+0x268>)
 8000e82:	7b18      	ldrb	r0, [r3, #12]
 8000e84:	4a54      	ldr	r2, [pc, #336]	; (8000fd8 <UartCheckReceived+0x280>)
 8000e86:	460b      	mov	r3, r1
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	440b      	add	r3, r1
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4413      	add	r3, r2
 8000e90:	3303      	adds	r3, #3
 8000e92:	4602      	mov	r2, r0
 8000e94:	701a      	strb	r2, [r3, #0]
						IR_CODES_MACROS[SAVING_IR_POS][4] = UART_CpltBuffer[13];
 8000e96:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <UartCheckReceived+0x274>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <UartCheckReceived+0x268>)
 8000e9e:	7b58      	ldrb	r0, [r3, #13]
 8000ea0:	4a4d      	ldr	r2, [pc, #308]	; (8000fd8 <UartCheckReceived+0x280>)
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	440b      	add	r3, r1
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	3304      	adds	r3, #4
 8000eae:	4602      	mov	r2, r0
 8000eb0:	701a      	strb	r2, [r3, #0]
						IR_CODES_MACROS[SAVING_IR_POS][5] = UART_CpltBuffer[14];
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <UartCheckReceived+0x274>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <UartCheckReceived+0x268>)
 8000eba:	7b98      	ldrb	r0, [r3, #14]
 8000ebc:	4a46      	ldr	r2, [pc, #280]	; (8000fd8 <UartCheckReceived+0x280>)
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	440b      	add	r3, r1
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3305      	adds	r3, #5
 8000eca:	4602      	mov	r2, r0
 8000ecc:	701a      	strb	r2, [r3, #0]

						SAVING_IR_POS++;
 8000ece:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <UartCheckReceived+0x274>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <UartCheckReceived+0x274>)
 8000ed8:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK), 100);
 8000eda:	2364      	movs	r3, #100	; 0x64
 8000edc:	2203      	movs	r2, #3
 8000ede:	493f      	ldr	r1, [pc, #252]	; (8000fdc <UartCheckReceived+0x284>)
 8000ee0:	4839      	ldr	r0, [pc, #228]	; (8000fc8 <UartCheckReceived+0x270>)
 8000ee2:	f004 fdb6 	bl	8005a52 <HAL_UART_Transmit>
					if(SAVING_IR_POS < MAX_IR_CODES)
 8000ee6:	e24d      	b.n	8001384 <UartCheckReceived+0x62c>
					}
				} else if(UART_CpltBuffer[3] == 'E' && UART_CpltBuffer[4] == 'L')
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <UartCheckReceived+0x268>)
 8000eea:	78db      	ldrb	r3, [r3, #3]
 8000eec:	2b45      	cmp	r3, #69	; 0x45
 8000eee:	d179      	bne.n	8000fe4 <UartCheckReceived+0x28c>
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <UartCheckReceived+0x268>)
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	2b4c      	cmp	r3, #76	; 0x4c
 8000ef6:	d175      	bne.n	8000fe4 <UartCheckReceived+0x28c>
				{
					if(UART_CpltBuffer[5] < MAX_ELE_INPUTS)
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <UartCheckReceived+0x268>)
 8000efa:	795b      	ldrb	r3, [r3, #5]
 8000efc:	2b09      	cmp	r3, #9
 8000efe:	f200 8241 	bhi.w	8001384 <UartCheckReceived+0x62c>
					{
						//ACTIVE STRIPS
						ELE_INPUT_MACROS[UART_CpltBuffer[5]][0] = UART_CpltBuffer[7];
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f04:	795b      	ldrb	r3, [r3, #5]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f0a:	79d8      	ldrb	r0, [r3, #7]
 8000f0c:	4a34      	ldr	r2, [pc, #208]	; (8000fe0 <UartCheckReceived+0x288>)
 8000f0e:	460b      	mov	r3, r1
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	440b      	add	r3, r1
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	4602      	mov	r2, r0
 8000f1a:	701a      	strb	r2, [r3, #0]
						ELE_INPUT_MACROS[UART_CpltBuffer[5]][1] = UART_CpltBuffer[8];
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f1e:	795b      	ldrb	r3, [r3, #5]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f24:	7a18      	ldrb	r0, [r3, #8]
 8000f26:	4a2e      	ldr	r2, [pc, #184]	; (8000fe0 <UartCheckReceived+0x288>)
 8000f28:	460b      	mov	r3, r1
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	440b      	add	r3, r1
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	3301      	adds	r3, #1
 8000f34:	4602      	mov	r2, r0
 8000f36:	701a      	strb	r2, [r3, #0]
						//EFFECT
						ELE_INPUT_MACROS[UART_CpltBuffer[5]][2] = UART_CpltBuffer[10];
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f3a:	795b      	ldrb	r3, [r3, #5]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f40:	7a98      	ldrb	r0, [r3, #10]
 8000f42:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <UartCheckReceived+0x288>)
 8000f44:	460b      	mov	r3, r1
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	440b      	add	r3, r1
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	4602      	mov	r2, r0
 8000f52:	701a      	strb	r2, [r3, #0]
						ELE_INPUT_MACROS[UART_CpltBuffer[5]][3] = UART_CpltBuffer[11];
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f56:	795b      	ldrb	r3, [r3, #5]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f5c:	7ad8      	ldrb	r0, [r3, #11]
 8000f5e:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <UartCheckReceived+0x288>)
 8000f60:	460b      	mov	r3, r1
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	440b      	add	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	3303      	adds	r3, #3
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	701a      	strb	r2, [r3, #0]
						ELE_INPUT_MACROS[UART_CpltBuffer[5]][4] = UART_CpltBuffer[12];
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f72:	795b      	ldrb	r3, [r3, #5]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f78:	7b18      	ldrb	r0, [r3, #12]
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <UartCheckReceived+0x288>)
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	440b      	add	r3, r1
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	3304      	adds	r3, #4
 8000f88:	4602      	mov	r2, r0
 8000f8a:	701a      	strb	r2, [r3, #0]
						ELE_INPUT_MACROS[UART_CpltBuffer[5]][5] = UART_CpltBuffer[13];
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f8e:	795b      	ldrb	r3, [r3, #5]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <UartCheckReceived+0x268>)
 8000f94:	7b58      	ldrb	r0, [r3, #13]
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <UartCheckReceived+0x288>)
 8000f98:	460b      	mov	r3, r1
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	440b      	add	r3, r1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3305      	adds	r3, #5
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK), 100);
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	2203      	movs	r2, #3
 8000fac:	490b      	ldr	r1, [pc, #44]	; (8000fdc <UartCheckReceived+0x284>)
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <UartCheckReceived+0x270>)
 8000fb0:	f004 fd4f 	bl	8005a52 <HAL_UART_Transmit>
					if(UART_CpltBuffer[5] < MAX_ELE_INPUTS)
 8000fb4:	e1e6      	b.n	8001384 <UartCheckReceived+0x62c>
 8000fb6:	bf00      	nop
 8000fb8:	2000156e 	.word	0x2000156e
 8000fbc:	20001571 	.word	0x20001571
 8000fc0:	2000153c 	.word	0x2000153c
 8000fc4:	08007810 	.word	0x08007810
 8000fc8:	20001464 	.word	0x20001464
 8000fcc:	20001572 	.word	0x20001572
 8000fd0:	20001573 	.word	0x20001573
 8000fd4:	20001574 	.word	0x20001574
 8000fd8:	2000159c 	.word	0x2000159c
 8000fdc:	0800780c 	.word	0x0800780c
 8000fe0:	20001614 	.word	0x20001614
					}
				} else if(UART_BytesReceived >= 17 && UART_CpltBuffer[3] == 'T' && UART_CpltBuffer[4] == 'M')
 8000fe4:	4b9b      	ldr	r3, [pc, #620]	; (8001254 <UartCheckReceived+0x4fc>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	2b10      	cmp	r3, #16
 8000fec:	f240 81ca 	bls.w	8001384 <UartCheckReceived+0x62c>
 8000ff0:	4b99      	ldr	r3, [pc, #612]	; (8001258 <UartCheckReceived+0x500>)
 8000ff2:	78db      	ldrb	r3, [r3, #3]
 8000ff4:	2b54      	cmp	r3, #84	; 0x54
 8000ff6:	f040 81c5 	bne.w	8001384 <UartCheckReceived+0x62c>
 8000ffa:	4b97      	ldr	r3, [pc, #604]	; (8001258 <UartCheckReceived+0x500>)
 8000ffc:	791b      	ldrb	r3, [r3, #4]
 8000ffe:	2b4d      	cmp	r3, #77	; 0x4d
 8001000:	f040 81c0 	bne.w	8001384 <UartCheckReceived+0x62c>
				{
					if(SAVING_TIME_POS < MAX_TIME_MACROS)
 8001004:	4b95      	ldr	r3, [pc, #596]	; (800125c <UartCheckReceived+0x504>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b13      	cmp	r3, #19
 800100a:	f200 81bb 	bhi.w	8001384 <UartCheckReceived+0x62c>
					{
						//START TIME
						TIME_FLAGS[SAVING_TIME_POS][0] = UART_CpltBuffer[5];
 800100e:	4b93      	ldr	r3, [pc, #588]	; (800125c <UartCheckReceived+0x504>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b90      	ldr	r3, [pc, #576]	; (8001258 <UartCheckReceived+0x500>)
 8001016:	7959      	ldrb	r1, [r3, #5]
 8001018:	4b91      	ldr	r3, [pc, #580]	; (8001260 <UartCheckReceived+0x508>)
 800101a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
						TIME_FLAGS[SAVING_TIME_POS][1] = UART_CpltBuffer[6];
 800101e:	4b8f      	ldr	r3, [pc, #572]	; (800125c <UartCheckReceived+0x504>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	4b8c      	ldr	r3, [pc, #560]	; (8001258 <UartCheckReceived+0x500>)
 8001026:	7999      	ldrb	r1, [r3, #6]
 8001028:	4a8d      	ldr	r2, [pc, #564]	; (8001260 <UartCheckReceived+0x508>)
 800102a:	0083      	lsls	r3, r0, #2
 800102c:	4413      	add	r3, r2
 800102e:	460a      	mov	r2, r1
 8001030:	705a      	strb	r2, [r3, #1]
						//FOR TIME (TWO 8BITS = 1 16BIT)
						TIME_FLAGS[SAVING_TIME_POS][2] = UART_CpltBuffer[7];
 8001032:	4b8a      	ldr	r3, [pc, #552]	; (800125c <UartCheckReceived+0x504>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	4b87      	ldr	r3, [pc, #540]	; (8001258 <UartCheckReceived+0x500>)
 800103a:	79d9      	ldrb	r1, [r3, #7]
 800103c:	4a88      	ldr	r2, [pc, #544]	; (8001260 <UartCheckReceived+0x508>)
 800103e:	0083      	lsls	r3, r0, #2
 8001040:	4413      	add	r3, r2
 8001042:	460a      	mov	r2, r1
 8001044:	709a      	strb	r2, [r3, #2]
						TIME_FLAGS[SAVING_TIME_POS][3] = UART_CpltBuffer[8];
 8001046:	4b85      	ldr	r3, [pc, #532]	; (800125c <UartCheckReceived+0x504>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	4b82      	ldr	r3, [pc, #520]	; (8001258 <UartCheckReceived+0x500>)
 800104e:	7a19      	ldrb	r1, [r3, #8]
 8001050:	4a83      	ldr	r2, [pc, #524]	; (8001260 <UartCheckReceived+0x508>)
 8001052:	0083      	lsls	r3, r0, #2
 8001054:	4413      	add	r3, r2
 8001056:	460a      	mov	r2, r1
 8001058:	70da      	strb	r2, [r3, #3]
						//ACTIVE STRIPS
						TIME_MACROS[SAVING_TIME_POS][0] = UART_CpltBuffer[10];
 800105a:	4b80      	ldr	r3, [pc, #512]	; (800125c <UartCheckReceived+0x504>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	4b7d      	ldr	r3, [pc, #500]	; (8001258 <UartCheckReceived+0x500>)
 8001062:	7a98      	ldrb	r0, [r3, #10]
 8001064:	4a7f      	ldr	r2, [pc, #508]	; (8001264 <UartCheckReceived+0x50c>)
 8001066:	460b      	mov	r3, r1
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	440b      	add	r3, r1
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	4602      	mov	r2, r0
 8001072:	701a      	strb	r2, [r3, #0]
						TIME_MACROS[SAVING_TIME_POS][1] = UART_CpltBuffer[11];
 8001074:	4b79      	ldr	r3, [pc, #484]	; (800125c <UartCheckReceived+0x504>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	4b77      	ldr	r3, [pc, #476]	; (8001258 <UartCheckReceived+0x500>)
 800107c:	7ad8      	ldrb	r0, [r3, #11]
 800107e:	4a79      	ldr	r2, [pc, #484]	; (8001264 <UartCheckReceived+0x50c>)
 8001080:	460b      	mov	r3, r1
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	440b      	add	r3, r1
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	3301      	adds	r3, #1
 800108c:	4602      	mov	r2, r0
 800108e:	701a      	strb	r2, [r3, #0]
						//EFFECT
						TIME_MACROS[SAVING_TIME_POS][0] = UART_CpltBuffer[13];
 8001090:	4b72      	ldr	r3, [pc, #456]	; (800125c <UartCheckReceived+0x504>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4b70      	ldr	r3, [pc, #448]	; (8001258 <UartCheckReceived+0x500>)
 8001098:	7b58      	ldrb	r0, [r3, #13]
 800109a:	4a72      	ldr	r2, [pc, #456]	; (8001264 <UartCheckReceived+0x50c>)
 800109c:	460b      	mov	r3, r1
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	440b      	add	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	4602      	mov	r2, r0
 80010a8:	701a      	strb	r2, [r3, #0]
						TIME_MACROS[SAVING_TIME_POS][1] = UART_CpltBuffer[13];
 80010aa:	4b6c      	ldr	r3, [pc, #432]	; (800125c <UartCheckReceived+0x504>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4b69      	ldr	r3, [pc, #420]	; (8001258 <UartCheckReceived+0x500>)
 80010b2:	7b58      	ldrb	r0, [r3, #13]
 80010b4:	4a6b      	ldr	r2, [pc, #428]	; (8001264 <UartCheckReceived+0x50c>)
 80010b6:	460b      	mov	r3, r1
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	440b      	add	r3, r1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	3301      	adds	r3, #1
 80010c2:	4602      	mov	r2, r0
 80010c4:	701a      	strb	r2, [r3, #0]
						TIME_MACROS[SAVING_TIME_POS][2] = UART_CpltBuffer[13];
 80010c6:	4b65      	ldr	r3, [pc, #404]	; (800125c <UartCheckReceived+0x504>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4b62      	ldr	r3, [pc, #392]	; (8001258 <UartCheckReceived+0x500>)
 80010ce:	7b58      	ldrb	r0, [r3, #13]
 80010d0:	4a64      	ldr	r2, [pc, #400]	; (8001264 <UartCheckReceived+0x50c>)
 80010d2:	460b      	mov	r3, r1
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	440b      	add	r3, r1
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	3302      	adds	r3, #2
 80010de:	4602      	mov	r2, r0
 80010e0:	701a      	strb	r2, [r3, #0]
						TIME_MACROS[SAVING_TIME_POS][3] = UART_CpltBuffer[13];
 80010e2:	4b5e      	ldr	r3, [pc, #376]	; (800125c <UartCheckReceived+0x504>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <UartCheckReceived+0x500>)
 80010ea:	7b58      	ldrb	r0, [r3, #13]
 80010ec:	4a5d      	ldr	r2, [pc, #372]	; (8001264 <UartCheckReceived+0x50c>)
 80010ee:	460b      	mov	r3, r1
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	440b      	add	r3, r1
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	3303      	adds	r3, #3
 80010fa:	4602      	mov	r2, r0
 80010fc:	701a      	strb	r2, [r3, #0]

						SAVING_TIME_POS++;
 80010fe:	4b57      	ldr	r3, [pc, #348]	; (800125c <UartCheckReceived+0x504>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b55      	ldr	r3, [pc, #340]	; (800125c <UartCheckReceived+0x504>)
 8001108:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK), 100);
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	2203      	movs	r2, #3
 800110e:	4956      	ldr	r1, [pc, #344]	; (8001268 <UartCheckReceived+0x510>)
 8001110:	4856      	ldr	r0, [pc, #344]	; (800126c <UartCheckReceived+0x514>)
 8001112:	f004 fc9e 	bl	8005a52 <HAL_UART_Transmit>
 8001116:	e135      	b.n	8001384 <UartCheckReceived+0x62c>
					}
				}

			}

		}else if(UART_BytesReceived == 4)
 8001118:	4b4e      	ldr	r3, [pc, #312]	; (8001254 <UartCheckReceived+0x4fc>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	2b04      	cmp	r3, #4
 8001120:	d11a      	bne.n	8001158 <UartCheckReceived+0x400>
		{
			  if(UART_CpltBuffer[0] == 'A' && UART_CpltBuffer[1] == 'T' && UART_CpltBuffer[2] == '\r' && UART_CpltBuffer[3] == '\n')
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <UartCheckReceived+0x500>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b41      	cmp	r3, #65	; 0x41
 8001128:	f040 812c 	bne.w	8001384 <UartCheckReceived+0x62c>
 800112c:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <UartCheckReceived+0x500>)
 800112e:	785b      	ldrb	r3, [r3, #1]
 8001130:	2b54      	cmp	r3, #84	; 0x54
 8001132:	f040 8127 	bne.w	8001384 <UartCheckReceived+0x62c>
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <UartCheckReceived+0x500>)
 8001138:	789b      	ldrb	r3, [r3, #2]
 800113a:	2b0d      	cmp	r3, #13
 800113c:	f040 8122 	bne.w	8001384 <UartCheckReceived+0x62c>
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <UartCheckReceived+0x500>)
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	2b0a      	cmp	r3, #10
 8001146:	f040 811d 	bne.w	8001384 <UartCheckReceived+0x62c>
			  {
				HAL_UART_Transmit(&huart2, UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK), 100);
 800114a:	2364      	movs	r3, #100	; 0x64
 800114c:	2203      	movs	r2, #3
 800114e:	4946      	ldr	r1, [pc, #280]	; (8001268 <UartCheckReceived+0x510>)
 8001150:	4846      	ldr	r0, [pc, #280]	; (800126c <UartCheckReceived+0x514>)
 8001152:	f004 fc7e 	bl	8005a52 <HAL_UART_Transmit>
 8001156:	e115      	b.n	8001384 <UartCheckReceived+0x62c>
			  }
		}else if(UART_BytesReceived > 4 && UART_CpltBuffer[0] == 'A' && UART_CpltBuffer[1] == 'T' && UART_CpltBuffer[2] == '+')
 8001158:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <UartCheckReceived+0x4fc>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b29b      	uxth	r3, r3
 800115e:	2b04      	cmp	r3, #4
 8001160:	f240 8110 	bls.w	8001384 <UartCheckReceived+0x62c>
 8001164:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <UartCheckReceived+0x500>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b41      	cmp	r3, #65	; 0x41
 800116a:	f040 810b 	bne.w	8001384 <UartCheckReceived+0x62c>
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <UartCheckReceived+0x500>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	2b54      	cmp	r3, #84	; 0x54
 8001174:	f040 8106 	bne.w	8001384 <UartCheckReceived+0x62c>
 8001178:	4b37      	ldr	r3, [pc, #220]	; (8001258 <UartCheckReceived+0x500>)
 800117a:	789b      	ldrb	r3, [r3, #2]
 800117c:	2b2b      	cmp	r3, #43	; 0x2b
 800117e:	f040 8101 	bne.w	8001384 <UartCheckReceived+0x62c>
		  	  {
			  	  if(UART_BytesReceived == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_GET_IR_SENTENCE))
 8001182:	4b34      	ldr	r3, [pc, #208]	; (8001254 <UartCheckReceived+0x4fc>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	2303      	movs	r3, #3
 800118c:	4619      	mov	r1, r3
 800118e:	2302      	movs	r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	3306      	adds	r3, #6
 8001194:	429a      	cmp	r2, r3
 8001196:	d124      	bne.n	80011e2 <UartCheckReceived+0x48a>
			  	  {
					  uint8_t UART_GET_IR_FLAG = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					  for(int i = 0; i<sizeof(UART_GET_IR_SENTENCE); i++)
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
 80011a2:	e011      	b.n	80011c8 <UartCheckReceived+0x470>
						  if(UART_CpltBuffer[i+UART_SENTENCE_HEAD_BYTES] !=  UART_GET_IR_SENTENCE[i])
 80011a4:	2303      	movs	r3, #3
 80011a6:	461a      	mov	r2, r3
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a2a      	ldr	r2, [pc, #168]	; (8001258 <UartCheckReceived+0x500>)
 80011ae:	5cd2      	ldrb	r2, [r2, r3]
 80011b0:	492f      	ldr	r1, [pc, #188]	; (8001270 <UartCheckReceived+0x518>)
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	440b      	add	r3, r1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d002      	beq.n	80011c2 <UartCheckReceived+0x46a>
							  UART_GET_IR_FLAG = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					  for(int i = 0; i<sizeof(UART_GET_IR_SENTENCE); i++)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	3301      	adds	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d9ea      	bls.n	80011a4 <UartCheckReceived+0x44c>
					  GET_IR_FLAG = UART_GET_IR_FLAG;
 80011ce:	4a29      	ldr	r2, [pc, #164]	; (8001274 <UartCheckReceived+0x51c>)
 80011d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d4:	7013      	strb	r3, [r2, #0]

					  HAL_UART_Transmit(&huart2, UART_GET_IR_RESPONSE, sizeof(UART_GET_IR_RESPONSE), 100);
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	2210      	movs	r2, #16
 80011da:	4927      	ldr	r1, [pc, #156]	; (8001278 <UartCheckReceived+0x520>)
 80011dc:	4823      	ldr	r0, [pc, #140]	; (800126c <UartCheckReceived+0x514>)
 80011de:	f004 fc38 	bl	8005a52 <HAL_UART_Transmit>
			  	  }
			  	  if(UART_BytesReceived == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_ROUTINES_READ_SENTENCE))
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <UartCheckReceived+0x4fc>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	2303      	movs	r3, #3
 80011ec:	4619      	mov	r1, r3
 80011ee:	2302      	movs	r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	330d      	adds	r3, #13
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d11d      	bne.n	8001234 <UartCheckReceived+0x4dc>
			  	  {
					  uint8_t UART_ROUTINES_READ_FLAG = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	77fb      	strb	r3, [r7, #31]
					  for(int i = 0; i<sizeof(UART_ROUTINES_READ_SENTENCE); i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	e010      	b.n	8001224 <UartCheckReceived+0x4cc>
						  if(UART_CpltBuffer[i+UART_SENTENCE_HEAD_BYTES] !=  UART_ROUTINES_READ_SENTENCE[i])
 8001202:	2303      	movs	r3, #3
 8001204:	461a      	mov	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4413      	add	r3, r2
 800120a:	4a13      	ldr	r2, [pc, #76]	; (8001258 <UartCheckReceived+0x500>)
 800120c:	5cd2      	ldrb	r2, [r2, r3]
 800120e:	491b      	ldr	r1, [pc, #108]	; (800127c <UartCheckReceived+0x524>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	440b      	add	r3, r1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d001      	beq.n	800121e <UartCheckReceived+0x4c6>
							  UART_ROUTINES_READ_FLAG = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	77fb      	strb	r3, [r7, #31]
					  for(int i = 0; i<sizeof(UART_ROUTINES_READ_SENTENCE); i++)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	3301      	adds	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b0c      	cmp	r3, #12
 8001228:	d9eb      	bls.n	8001202 <UartCheckReceived+0x4aa>
					  if(UART_ROUTINES_READ_FLAG == 1)
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <UartCheckReceived+0x4dc>
						  SendRoutinesOverUart();
 8001230:	f7ff fcb2 	bl	8000b98 <SendRoutinesOverUart>
			  	  }
			  	  if(UART_BytesReceived == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_ROUTINES_WRITE_SENTENCE))
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <UartCheckReceived+0x4fc>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	b29b      	uxth	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	2303      	movs	r3, #3
 800123e:	4619      	mov	r1, r3
 8001240:	2302      	movs	r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	330e      	adds	r3, #14
 8001246:	429a      	cmp	r2, r3
 8001248:	d13a      	bne.n	80012c0 <UartCheckReceived+0x568>
			  	  {
					  uint8_t UART_ROUTINES_WRITE_FLAG = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
					  for(int i = 0; i<sizeof(UART_ROUTINES_WRITE_SENTENCE); i++)
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	e026      	b.n	80012a2 <UartCheckReceived+0x54a>
 8001254:	2000156e 	.word	0x2000156e
 8001258:	2000153c 	.word	0x2000153c
 800125c:	20001573 	.word	0x20001573
 8001260:	20001650 	.word	0x20001650
 8001264:	200016a0 	.word	0x200016a0
 8001268:	0800780c 	.word	0x0800780c
 800126c:	20001464 	.word	0x20001464
 8001270:	080077b4 	.word	0x080077b4
 8001274:	20001570 	.word	0x20001570
 8001278:	080077bc 	.word	0x080077bc
 800127c:	080077cc 	.word	0x080077cc
						  if(UART_CpltBuffer[i+UART_SENTENCE_HEAD_BYTES] !=  UART_ROUTINES_WRITE_SENTENCE[i])
 8001280:	2303      	movs	r3, #3
 8001282:	461a      	mov	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4413      	add	r3, r2
 8001288:	4a42      	ldr	r2, [pc, #264]	; (8001394 <UartCheckReceived+0x63c>)
 800128a:	5cd2      	ldrb	r2, [r2, r3]
 800128c:	4942      	ldr	r1, [pc, #264]	; (8001398 <UartCheckReceived+0x640>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	440b      	add	r3, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <UartCheckReceived+0x544>
							  UART_ROUTINES_WRITE_FLAG = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	75fb      	strb	r3, [r7, #23]
					  for(int i = 0; i<sizeof(UART_ROUTINES_WRITE_SENTENCE); i++)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	3301      	adds	r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	2b0d      	cmp	r3, #13
 80012a6:	d9eb      	bls.n	8001280 <UartCheckReceived+0x528>
					  ROUTINES_WRITE_FLAG = UART_ROUTINES_WRITE_FLAG;
 80012a8:	4a3c      	ldr	r2, [pc, #240]	; (800139c <UartCheckReceived+0x644>)
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	7013      	strb	r3, [r2, #0]
					  if(UART_ROUTINES_WRITE_FLAG == 1)
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d105      	bne.n	80012c0 <UartCheckReceived+0x568>
						  HAL_UART_Transmit(&huart2, UART_ROUTINES_WRITE_RESPONSE, sizeof(UART_ROUTINES_WRITE_RESPONSE), 100);
 80012b4:	2364      	movs	r3, #100	; 0x64
 80012b6:	2208      	movs	r2, #8
 80012b8:	4939      	ldr	r1, [pc, #228]	; (80013a0 <UartCheckReceived+0x648>)
 80012ba:	483a      	ldr	r0, [pc, #232]	; (80013a4 <UartCheckReceived+0x64c>)
 80012bc:	f004 fbc9 	bl	8005a52 <HAL_UART_Transmit>
			  	  }
			  	  if(UART_BytesReceived == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_ROUTINES_SAVE_SENTENCE))
 80012c0:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <UartCheckReceived+0x650>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	2303      	movs	r3, #3
 80012ca:	4619      	mov	r1, r3
 80012cc:	2302      	movs	r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	330b      	adds	r3, #11
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d123      	bne.n	800131e <UartCheckReceived+0x5c6>
			  	  {
			  		uint8_t UART_ROUTINES_SAVE_FLAG = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
			  		for(int i = 0; i<sizeof(UART_ROUTINES_SAVE_SENTENCE); i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	e010      	b.n	8001302 <UartCheckReceived+0x5aa>
			  			if(UART_CpltBuffer[i+UART_SENTENCE_HEAD_BYTES] !=  UART_ROUTINES_SAVE_SENTENCE[i])
 80012e0:	2303      	movs	r3, #3
 80012e2:	461a      	mov	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <UartCheckReceived+0x63c>)
 80012ea:	5cd2      	ldrb	r2, [r2, r3]
 80012ec:	492f      	ldr	r1, [pc, #188]	; (80013ac <UartCheckReceived+0x654>)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	440b      	add	r3, r1
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <UartCheckReceived+0x5a4>
			  				UART_ROUTINES_SAVE_FLAG = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
			  		for(int i = 0; i<sizeof(UART_ROUTINES_SAVE_SENTENCE); i++)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3301      	adds	r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b0a      	cmp	r3, #10
 8001306:	d9eb      	bls.n	80012e0 <UartCheckReceived+0x588>
			  		if(UART_ROUTINES_SAVE_FLAG == 1)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <UartCheckReceived+0x5c6>
			  			{
			  				saveMem();
 800130e:	f000 fb57 	bl	80019c0 <saveMem>
			  				HAL_UART_Transmit(&huart2, UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK), 100);
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	2203      	movs	r2, #3
 8001316:	4926      	ldr	r1, [pc, #152]	; (80013b0 <UartCheckReceived+0x658>)
 8001318:	4822      	ldr	r0, [pc, #136]	; (80013a4 <UartCheckReceived+0x64c>)
 800131a:	f004 fb9a 	bl	8005a52 <HAL_UART_Transmit>
			  			}


			  	  }
			  	  if(UART_BytesReceived == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_ROUTINES_PURGE_SAVED_SENTENCE))
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <UartCheckReceived+0x650>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	2303      	movs	r3, #3
 8001328:	4619      	mov	r1, r3
 800132a:	2302      	movs	r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3309      	adds	r3, #9
 8001330:	429a      	cmp	r2, r3
 8001332:	d127      	bne.n	8001384 <UartCheckReceived+0x62c>
			  	  {
			  		uint8_t UART_ROUTINES_PURGE_SAVED_FLAG = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
					for(int i = 0; i<sizeof(UART_ROUTINES_PURGE_SAVED_SENTENCE); i++)
 8001338:	2300      	movs	r3, #0
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	e010      	b.n	8001360 <UartCheckReceived+0x608>
						if(UART_CpltBuffer[i+UART_SENTENCE_HEAD_BYTES] !=  UART_ROUTINES_PURGE_SAVED_SENTENCE[i])
 800133e:	2303      	movs	r3, #3
 8001340:	461a      	mov	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4413      	add	r3, r2
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <UartCheckReceived+0x63c>)
 8001348:	5cd2      	ldrb	r2, [r2, r3]
 800134a:	491a      	ldr	r1, [pc, #104]	; (80013b4 <UartCheckReceived+0x65c>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	440b      	add	r3, r1
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <UartCheckReceived+0x602>
							UART_ROUTINES_PURGE_SAVED_FLAG = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	71fb      	strb	r3, [r7, #7]
					for(int i = 0; i<sizeof(UART_ROUTINES_PURGE_SAVED_SENTENCE); i++)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2b08      	cmp	r3, #8
 8001364:	d9eb      	bls.n	800133e <UartCheckReceived+0x5e6>
					if(UART_ROUTINES_PURGE_SAVED_FLAG == 1)
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d10b      	bne.n	8001384 <UartCheckReceived+0x62c>
					{
						purgeSaved(2000);
 800136c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001370:	f000 fa97 	bl	80018a2 <purgeSaved>
						readMem();
 8001374:	f000 fba8 	bl	8001ac8 <readMem>
						HAL_UART_Transmit(&huart2, UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK), 100);
 8001378:	2364      	movs	r3, #100	; 0x64
 800137a:	2203      	movs	r2, #3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <UartCheckReceived+0x658>)
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <UartCheckReceived+0x64c>)
 8001380:	f004 fb67 	bl	8005a52 <HAL_UART_Transmit>
					}
			  	  }
		  	  }
		  UART_BytesReceived = 0;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <UartCheckReceived+0x650>)
 8001386:	2200      	movs	r2, #0
 8001388:	801a      	strh	r2, [r3, #0]
	}
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000153c 	.word	0x2000153c
 8001398:	080077dc 	.word	0x080077dc
 800139c:	20001571 	.word	0x20001571
 80013a0:	080077ec 	.word	0x080077ec
 80013a4:	20001464 	.word	0x20001464
 80013a8:	2000156e 	.word	0x2000156e
 80013ac:	080077f4 	.word	0x080077f4
 80013b0:	0800780c 	.word	0x0800780c
 80013b4:	08007800 	.word	0x08007800

080013b8 <irCallback>:
void irCallback(uint16_t addr, uint16_t comm)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	80fb      	strh	r3, [r7, #6]
 80013c4:	4613      	mov	r3, r2
 80013c6:	80bb      	strh	r3, [r7, #4]
	if(GET_IR_FLAG)
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <irCallback+0x68>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d022      	beq.n	8001416 <irCallback+0x5e>
	{
		char irAsci[30] = {' '};
 80013d0:	2320      	movs	r3, #32
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	831a      	strh	r2, [r3, #24]
		sprintf(irAsci, "ADR: %d, COM: %d", (int)addr, (int)comm);
 80013e8:	88fa      	ldrh	r2, [r7, #6]
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	f107 0008 	add.w	r0, r7, #8
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <irCallback+0x6c>)
 80013f2:	f005 fd47 	bl	8006e84 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)irAsci, strlen(irAsci), 100);
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe fee8 	bl	80001d0 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	f107 0108 	add.w	r1, r7, #8
 8001408:	2364      	movs	r3, #100	; 0x64
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <irCallback+0x70>)
 800140c:	f004 fb21 	bl	8005a52 <HAL_UART_Transmit>
		GET_IR_FLAG = 0;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <irCallback+0x68>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
	}
}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20001570 	.word	0x20001570
 8001424:	080077a0 	.word	0x080077a0
 8001428:	20001464 	.word	0x20001464

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001432:	f001 faf7 	bl	8002a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001436:	f000 f893 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143a:	f000 fa05 	bl	8001848 <MX_GPIO_Init>
  MX_DMA_Init();
 800143e:	f000 f9e3 	bl	8001808 <MX_DMA_Init>
  MX_TIM1_Init();
 8001442:	f000 f8f7 	bl	8001634 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001446:	f000 f945 	bl	80016d4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800144a:	f000 f9b3 	bl	80017b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  irSetup(&htim3, &huart1);

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) UART_CpltBuffer, UART_BUFF_SIZE);
 800144e:	2232      	movs	r2, #50	; 0x32
 8001450:	4939      	ldr	r1, [pc, #228]	; (8001538 <main+0x10c>)
 8001452:	483a      	ldr	r0, [pc, #232]	; (800153c <main+0x110>)
 8001454:	f004 fb8f 	bl	8005b76 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001458:	4b39      	ldr	r3, [pc, #228]	; (8001540 <main+0x114>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <main+0x114>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0208 	bic.w	r2, r2, #8
 8001466:	601a      	str	r2, [r3, #0]
  irSetup(&htim3, &huart2);
 8001468:	4934      	ldr	r1, [pc, #208]	; (800153c <main+0x110>)
 800146a:	4836      	ldr	r0, [pc, #216]	; (8001544 <main+0x118>)
 800146c:	f7ff f88a 	bl	8000584 <irSetup>
  //readMem();
//  HAL_UART_Transmit(&huart1, &IR_CODES_FLAGS[0][0], sizeof(IR_CODES_FLAGS[0][0]), 100);
//  HAL_UART_Transmit(&huart1, &IR_CODES_FLAGS[0][1], sizeof(IR_CODES_FLAGS[0][1]), 100);
  //HAL_TIM_Base_Start_IT(&htim3);
//  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
  for(uint8_t i = 0; i < WS2812_BUFFER_COUNT; i++)
 8001470:	2300      	movs	r3, #0
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	e01d      	b.n	80014b2 <main+0x86>
	{
	  ws2812b.item[i].channel = i;
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4a33      	ldr	r2, [pc, #204]	; (8001548 <main+0x11c>)
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	330c      	adds	r3, #12
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	701a      	strb	r2, [r3, #0]
	  ws2812b.item[i].frameBufferPointer = &frameBufferArray[i][0];
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800148c:	fb01 f202 	mul.w	r2, r1, r2
 8001490:	492e      	ldr	r1, [pc, #184]	; (800154c <main+0x120>)
 8001492:	440a      	add	r2, r1
 8001494:	492c      	ldr	r1, [pc, #176]	; (8001548 <main+0x11c>)
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	440b      	add	r3, r1
 800149a:	601a      	str	r2, [r3, #0]
	  ws2812b.item[i].frameBufferSize = WS2812B_NUMBER_OF_LEDS*3;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <main+0x11c>)
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	3304      	adds	r3, #4
 80014a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014aa:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < WS2812_BUFFER_COUNT; i++)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	3301      	adds	r3, #1
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d9de      	bls.n	8001476 <main+0x4a>
	}
  ws2812b_init();
 80014b8:	f001 fa68 	bl	800298c <ws2812b_init>

  ACTIVE_EFFECT_TYPE = 1;
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <main+0x124>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
  ACTIVE_EFFECT_NB = 1;
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <main+0x128>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
  ELE_INPUT_MACROS[ACTIVE_EFFECT_NB][0] = 0xFF;
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <main+0x128>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4a22      	ldr	r2, [pc, #136]	; (8001558 <main+0x12c>)
 80014d0:	460b      	mov	r3, r1
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	440b      	add	r3, r1
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	22ff      	movs	r2, #255	; 0xff
 80014dc:	701a      	strb	r2, [r3, #0]
  ELE_INPUT_MACROS[ACTIVE_EFFECT_NB][1] = 0xFF;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <main+0x128>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <main+0x12c>)
 80014e6:	460b      	mov	r3, r1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	440b      	add	r3, r1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	3301      	adds	r3, #1
 80014f2:	22ff      	movs	r2, #255	; 0xff
 80014f4:	701a      	strb	r2, [r3, #0]
  ELE_INPUT_MACROS[ACTIVE_EFFECT_NB][2] = 1;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <main+0x128>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4a16      	ldr	r2, [pc, #88]	; (8001558 <main+0x12c>)
 80014fe:	460b      	mov	r3, r1
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	440b      	add	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	3302      	adds	r3, #2
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
  ELE_INPUT_MACROS[ACTIVE_EFFECT_NB][3] = 40;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <main+0x128>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	4a10      	ldr	r2, [pc, #64]	; (8001558 <main+0x12c>)
 8001516:	460b      	mov	r3, r1
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	440b      	add	r3, r1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	3303      	adds	r3, #3
 8001522:	2228      	movs	r2, #40	; 0x28
 8001524:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //irHandle(irCallback);
	  UartCheckReceived();
 8001526:	f7ff fc17 	bl	8000d58 <UartCheckReceived>
	  irHandle(irCallback);
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <main+0x130>)
 800152c:	f7ff f842 	bl	80005b4 <irHandle>
	  effectsLoop();
 8001530:	f7ff f972 	bl	8000818 <effectsLoop>
	  UartCheckReceived();
 8001534:	e7f7      	b.n	8001526 <main+0xfa>
 8001536:	bf00      	nop
 8001538:	2000153c 	.word	0x2000153c
 800153c:	20001464 	.word	0x20001464
 8001540:	200014a8 	.word	0x200014a8
 8001544:	2000141c 	.word	0x2000141c
 8001548:	2000171c 	.word	0x2000171c
 800154c:	20000100 	.word	0x20000100
 8001550:	200013c0 	.word	0x200013c0
 8001554:	200013c1 	.word	0x200013c1
 8001558:	20001614 	.word	0x20001614
 800155c:	080013b9 	.word	0x080013b9

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b094      	sub	sp, #80	; 0x50
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	2230      	movs	r2, #48	; 0x30
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f005 fc80 	bl	8006e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <SystemClock_Config+0xcc>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a27      	ldr	r2, [pc, #156]	; (800162c <SystemClock_Config+0xcc>)
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <SystemClock_Config+0xcc>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <SystemClock_Config+0xd0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <SystemClock_Config+0xd0>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <SystemClock_Config+0xd0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015bc:	2302      	movs	r3, #2
 80015be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c4:	2310      	movs	r3, #16
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c8:	2302      	movs	r3, #2
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015d0:	2308      	movs	r3, #8
 80015d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015d4:	23a8      	movs	r3, #168	; 0xa8
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d8:	2302      	movs	r3, #2
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015dc:	2307      	movs	r3, #7
 80015de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e0:	f107 0320 	add.w	r3, r7, #32
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 f9d9 	bl	800399c <HAL_RCC_OscConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015f0:	f000 f952 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f4:	230f      	movs	r3, #15
 80015f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f8:	2302      	movs	r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2105      	movs	r1, #5
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fc3a 	bl	8003e8c <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800161e:	f000 f93b 	bl	8001898 <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3750      	adds	r7, #80	; 0x50
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40007000 	.word	0x40007000

08001634 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	463b      	mov	r3, r7
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MX_TIM1_Init+0x98>)
 8001652:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <MX_TIM1_Init+0x9c>)
 8001654:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_TIM1_Init+0x98>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_TIM1_Init+0x98>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_TIM1_Init+0x98>)
 8001664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001668:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_TIM1_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_TIM1_Init+0x98>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_TIM1_Init+0x98>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <MX_TIM1_Init+0x98>)
 800167e:	f002 fde5 	bl	800424c <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001688:	f000 f906 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	4619      	mov	r1, r3
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <MX_TIM1_Init+0x98>)
 800169a:	f003 fb99 	bl	8004dd0 <HAL_TIM_ConfigClockSource>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016a4:	f000 f8f8 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_TIM1_Init+0x98>)
 80016b6:	f004 f8ef 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016c0:	f000 f8ea 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200013d4 	.word	0x200013d4
 80016d0:	40010000 	.word	0x40010000

080016d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <MX_TIM3_Init+0xd8>)
 8001700:	4a2b      	ldr	r2, [pc, #172]	; (80017b0 <MX_TIM3_Init+0xdc>)
 8001702:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <MX_TIM3_Init+0xd8>)
 8001706:	2254      	movs	r2, #84	; 0x54
 8001708:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <MX_TIM3_Init+0xd8>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001710:	4b26      	ldr	r3, [pc, #152]	; (80017ac <MX_TIM3_Init+0xd8>)
 8001712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001716:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <MX_TIM3_Init+0xd8>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <MX_TIM3_Init+0xd8>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001724:	4821      	ldr	r0, [pc, #132]	; (80017ac <MX_TIM3_Init+0xd8>)
 8001726:	f002 fd91 	bl	800424c <HAL_TIM_Base_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001730:	f000 f8b2 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001738:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800173a:	f107 0318 	add.w	r3, r7, #24
 800173e:	4619      	mov	r1, r3
 8001740:	481a      	ldr	r0, [pc, #104]	; (80017ac <MX_TIM3_Init+0xd8>)
 8001742:	f003 fb45 	bl	8004dd0 <HAL_TIM_ConfigClockSource>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800174c:	f000 f8a4 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001750:	4816      	ldr	r0, [pc, #88]	; (80017ac <MX_TIM3_Init+0xd8>)
 8001752:	f002 ff55 	bl	8004600 <HAL_TIM_IC_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800175c:	f000 f89c 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	480f      	ldr	r0, [pc, #60]	; (80017ac <MX_TIM3_Init+0xd8>)
 8001770:	f004 f892 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800177a:	f000 f88d 	bl	8001898 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800177e:	2302      	movs	r3, #2
 8001780:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800178a:	230f      	movs	r3, #15
 800178c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_TIM3_Init+0xd8>)
 8001796:	f003 f9bd 	bl	8004b14 <HAL_TIM_IC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80017a0:	f000 f87a 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2000141c 	.word	0x2000141c
 80017b0:	40000400 	.word	0x40000400

080017b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART2_UART_Init+0x4c>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_USART2_UART_Init+0x50>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_USART2_UART_Init+0x4c>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_USART2_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_USART2_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USART2_UART_Init+0x4c>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USART2_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_USART2_UART_Init+0x4c>)
 80017ec:	f004 f8e4 	bl	80059b8 <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017f6:	f000 f84f 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20001464 	.word	0x20001464
 8001804:	40004400 	.word	0x40004400

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_DMA_Init+0x3c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <MX_DMA_Init+0x3c>)
 8001818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_DMA_Init+0x3c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2010      	movs	r0, #16
 8001830:	f001 fa45 	bl	8002cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001834:	2010      	movs	r0, #16
 8001836:	f001 fa5e 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <MX_GPIO_Init+0x4c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <MX_GPIO_Init+0x4c>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <MX_GPIO_Init+0x4c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_GPIO_Init+0x4c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <MX_GPIO_Init+0x4c>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_GPIO_Init+0x4c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <Error_Handler+0x8>

080018a2 <purgeSaved>:
uint8_t IR_CODES_MACROS[MAX_IR_CODES][BYTES_PER_EFFECT]  	= {0};
uint8_t ELE_INPUT_MACROS[MAX_ELE_INPUTS][BYTES_PER_EFFECT] 	= {0};
uint8_t TIME_FLAGS[MAX_TIME_MACROS][BYTES_PER_TIME_FLAG]	= {0};
uint8_t TIME_MACROS[MAX_TIME_MACROS][BYTES_PER_EFFECT] 		= {0};

void purgeSaved(int range){
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < range; i++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e009      	b.n	80018c4 <purgeSaved+0x22>
	{
		*(__IO uint8_t *) (BKPSRAM_BASE +i) = 0;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 80018b6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < range; i++)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3301      	adds	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbf1      	blt.n	80018b0 <purgeSaved+0xe>
	}
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <save2DArr>:

void save2DArr(uint8_t* array, int rows, int cols, int* startId){
 80018da:	b480      	push	{r7}
 80018dc:	b087      	sub	sp, #28
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]

	for(int i = 0; i<rows; i++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e022      	b.n	8001934 <save2DArr+0x5a>
		{
			for(int j = 0; j<cols; j++){
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	e018      	b.n	8001926 <save2DArr+0x4c>
				*(__IO uint8_t *) (BKPSRAM_BASE+*startId) = *(array + i * cols + j);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4413      	add	r3, r2
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	441a      	add	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 800190e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001912:	7812      	ldrb	r2, [r2, #0]
 8001914:	701a      	strb	r2, [r3, #0]
				*startId+=1;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	601a      	str	r2, [r3, #0]
			for(int j = 0; j<cols; j++){
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	3301      	adds	r3, #1
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	dbe2      	blt.n	80018f4 <save2DArr+0x1a>
	for(int i = 0; i<rows; i++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbd8      	blt.n	80018ee <save2DArr+0x14>
			}
		}
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <read2DArr>:

void read2DArr(uint8_t* array, int rows, int cols, int* startId){
 800194a:	b480      	push	{r7}
 800194c:	b087      	sub	sp, #28
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	603b      	str	r3, [r7, #0]

	for(int i = 0; i<rows; i++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e024      	b.n	80019a8 <read2DArr+0x5e>
		{
			for(int j = 0; j<cols; j++){
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e01a      	b.n	800199a <read2DArr+0x50>
				*(array + i * cols + j) = (*(__IO uint8_t *) (BKPSRAM_BASE + *startId));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 800196c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001970:	4619      	mov	r1, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	461a      	mov	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4413      	add	r3, r2
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	780a      	ldrb	r2, [r1, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
				*startId+=1;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	601a      	str	r2, [r3, #0]
			for(int j = 0; j<cols; j++){
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	3301      	adds	r3, #1
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbe0      	blt.n	8001964 <read2DArr+0x1a>
	for(int i = 0; i<rows; i++)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbd6      	blt.n	800195e <read2DArr+0x14>
			}
		}
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <saveMem>:

void saveMem(){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
	//SET 6 FIRTS BYTES TO STARTING ADDRESSES OF INDIVIDUAL DATA
	uint8_t hbyte = 0,lbyte = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	2300      	movs	r3, #0
 80019cc:	71bb      	strb	r3, [r7, #6]

	hbyte = (IR_ADDR>>8) & 0xFF;
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <saveMem+0xd0>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	71fb      	strb	r3, [r7, #7]
	lbyte = IR_ADDR & 0xFF;
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <saveMem+0xd0>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	71bb      	strb	r3, [r7, #6]
	*(__IO uint8_t *) (BKPSRAM_BASE) = hbyte;
 80019de:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <saveMem+0xd4>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	7013      	strb	r3, [r2, #0]
	*(__IO uint8_t *) (BKPSRAM_BASE+1) = lbyte;
 80019e4:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <saveMem+0xd8>)
 80019e6:	79bb      	ldrb	r3, [r7, #6]
 80019e8:	7013      	strb	r3, [r2, #0]
	hbyte = 0,lbyte = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71fb      	strb	r3, [r7, #7]
 80019ee:	2300      	movs	r3, #0
 80019f0:	71bb      	strb	r3, [r7, #6]

	hbyte = (ELE_INPUT_ADDR>>8) & 0xFF;
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <saveMem+0xdc>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	71fb      	strb	r3, [r7, #7]
	lbyte = ELE_INPUT_ADDR & 0xFF;
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <saveMem+0xdc>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	71bb      	strb	r3, [r7, #6]
	*(__IO uint8_t *) (BKPSRAM_BASE+2) = hbyte;
 8001a02:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <saveMem+0xe0>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	7013      	strb	r3, [r2, #0]
	*(__IO uint8_t *) (BKPSRAM_BASE+3) = lbyte;
 8001a08:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <saveMem+0xe4>)
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	7013      	strb	r3, [r2, #0]
	hbyte = 0,lbyte = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	2300      	movs	r3, #0
 8001a14:	71bb      	strb	r3, [r7, #6]

	hbyte = (TIME_ADDR>>8) & 0xFF;
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <saveMem+0xe8>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	71fb      	strb	r3, [r7, #7]
	lbyte = TIME_ADDR & 0xFF;
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <saveMem+0xe8>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	71bb      	strb	r3, [r7, #6]
	*(__IO uint8_t *) (BKPSRAM_BASE+4) = hbyte;
 8001a26:	4a21      	ldr	r2, [pc, #132]	; (8001aac <saveMem+0xec>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	7013      	strb	r3, [r2, #0]
	*(__IO uint8_t *) (BKPSRAM_BASE+5) = lbyte;
 8001a2c:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <saveMem+0xf0>)
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	7013      	strb	r3, [r2, #0]
	hbyte = 0,lbyte = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	2300      	movs	r3, #0
 8001a38:	71bb      	strb	r3, [r7, #6]

	//SAVE IR ARRAYs
	int currAddr = IR_ADDR;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <saveMem+0xd0>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	603b      	str	r3, [r7, #0]
	save2DArr(&IR_CODES_FLAGS[0][0], MAX_IR_CODES, BYTES_PER_IR_CODE, &currAddr);
 8001a40:	463b      	mov	r3, r7
 8001a42:	2202      	movs	r2, #2
 8001a44:	2114      	movs	r1, #20
 8001a46:	481b      	ldr	r0, [pc, #108]	; (8001ab4 <saveMem+0xf4>)
 8001a48:	f7ff ff47 	bl	80018da <save2DArr>
	save2DArr(&IR_CODES_MACROS[0][0], MAX_IR_CODES, BYTES_PER_EFFECT, &currAddr);
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2206      	movs	r2, #6
 8001a50:	2114      	movs	r1, #20
 8001a52:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <saveMem+0xf8>)
 8001a54:	f7ff ff41 	bl	80018da <save2DArr>

	currAddr = ELE_INPUT_ADDR;
 8001a58:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <saveMem+0xdc>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	603b      	str	r3, [r7, #0]
	save2DArr(&ELE_INPUT_MACROS[0][0], MAX_ELE_INPUTS, BYTES_PER_EFFECT, &currAddr);
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2206      	movs	r2, #6
 8001a62:	210a      	movs	r1, #10
 8001a64:	4815      	ldr	r0, [pc, #84]	; (8001abc <saveMem+0xfc>)
 8001a66:	f7ff ff38 	bl	80018da <save2DArr>

	currAddr = TIME_ADDR;
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <saveMem+0xe8>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	603b      	str	r3, [r7, #0]
	save2DArr(&TIME_FLAGS[0][0], MAX_IR_CODES, BYTES_PER_TIME_FLAG, &currAddr);
 8001a70:	463b      	mov	r3, r7
 8001a72:	2204      	movs	r2, #4
 8001a74:	2114      	movs	r1, #20
 8001a76:	4812      	ldr	r0, [pc, #72]	; (8001ac0 <saveMem+0x100>)
 8001a78:	f7ff ff2f 	bl	80018da <save2DArr>
	save2DArr(&TIME_MACROS[0][0], MAX_IR_CODES, BYTES_PER_EFFECT, &currAddr);
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2206      	movs	r2, #6
 8001a80:	2114      	movs	r1, #20
 8001a82:	4810      	ldr	r0, [pc, #64]	; (8001ac4 <saveMem+0x104>)
 8001a84:	f7ff ff29 	bl	80018da <save2DArr>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000002 	.word	0x20000002
 8001a94:	40024000 	.word	0x40024000
 8001a98:	40024001 	.word	0x40024001
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	40024002 	.word	0x40024002
 8001aa4:	40024003 	.word	0x40024003
 8001aa8:	20000006 	.word	0x20000006
 8001aac:	40024004 	.word	0x40024004
 8001ab0:	40024005 	.word	0x40024005
 8001ab4:	20001574 	.word	0x20001574
 8001ab8:	2000159c 	.word	0x2000159c
 8001abc:	20001614 	.word	0x20001614
 8001ac0:	20001650 	.word	0x20001650
 8001ac4:	200016a0 	.word	0x200016a0

08001ac8 <readMem>:


void readMem(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	//READ ADDRESES
	uint8_t hbyte = 0,lbyte = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	71fb      	strb	r3, [r7, #7]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71bb      	strb	r3, [r7, #6]

	hbyte = (*(__IO uint8_t *) (BKPSRAM_BASE));
 8001ad6:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <readMem+0xdc>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
	lbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+1));
 8001adc:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <readMem+0xe0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	71bb      	strb	r3, [r7, #6]
	IR_ADDR = ((uint16_t) hbyte << 8) | lbyte;
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <readMem+0xe4>)
 8001af4:	801a      	strh	r2, [r3, #0]
	hbyte = 0,lbyte = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	71fb      	strb	r3, [r7, #7]
 8001afa:	2300      	movs	r3, #0
 8001afc:	71bb      	strb	r3, [r7, #6]

	hbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+2));
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <readMem+0xe8>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
	lbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+3));
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <readMem+0xec>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	71bb      	strb	r3, [r7, #6]
	ELE_INPUT_ADDR = ((uint16_t) hbyte << 8) | lbyte;
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	79bb      	ldrb	r3, [r7, #6]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <readMem+0xf0>)
 8001b1c:	801a      	strh	r2, [r3, #0]
	hbyte = 0,lbyte = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	2300      	movs	r3, #0
 8001b24:	71bb      	strb	r3, [r7, #6]

	hbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+4));
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <readMem+0xf4>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
	lbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+5));
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <readMem+0xf8>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	71bb      	strb	r3, [r7, #6]
	TIME_ADDR = ((uint16_t) hbyte << 8) | lbyte;
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <readMem+0xfc>)
 8001b44:	801a      	strh	r2, [r3, #0]
	hbyte = 0,lbyte = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	71fb      	strb	r3, [r7, #7]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	71bb      	strb	r3, [r7, #6]
	//READ ARRAYS
	int currAddr = IR_ADDR;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <readMem+0xe4>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	603b      	str	r3, [r7, #0]
	read2DArr(&IR_CODES_FLAGS[0][0], MAX_IR_CODES, BYTES_PER_IR_CODE, &currAddr);
 8001b54:	463b      	mov	r3, r7
 8001b56:	2202      	movs	r2, #2
 8001b58:	2114      	movs	r1, #20
 8001b5a:	481b      	ldr	r0, [pc, #108]	; (8001bc8 <readMem+0x100>)
 8001b5c:	f7ff fef5 	bl	800194a <read2DArr>
	read2DArr(&IR_CODES_MACROS[0][0], MAX_IR_CODES, BYTES_PER_EFFECT, &currAddr);
 8001b60:	463b      	mov	r3, r7
 8001b62:	2206      	movs	r2, #6
 8001b64:	2114      	movs	r1, #20
 8001b66:	4819      	ldr	r0, [pc, #100]	; (8001bcc <readMem+0x104>)
 8001b68:	f7ff feef 	bl	800194a <read2DArr>

	currAddr = ELE_INPUT_ADDR;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <readMem+0xf0>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	603b      	str	r3, [r7, #0]
	read2DArr(&ELE_INPUT_MACROS[0][0], MAX_ELE_INPUTS, BYTES_PER_EFFECT, &currAddr);
 8001b72:	463b      	mov	r3, r7
 8001b74:	2206      	movs	r2, #6
 8001b76:	210a      	movs	r1, #10
 8001b78:	4815      	ldr	r0, [pc, #84]	; (8001bd0 <readMem+0x108>)
 8001b7a:	f7ff fee6 	bl	800194a <read2DArr>

	currAddr = TIME_ADDR;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <readMem+0xfc>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	603b      	str	r3, [r7, #0]
	read2DArr(&TIME_FLAGS[0][0], MAX_IR_CODES, BYTES_PER_TIME_FLAG, &currAddr);
 8001b84:	463b      	mov	r3, r7
 8001b86:	2204      	movs	r2, #4
 8001b88:	2114      	movs	r1, #20
 8001b8a:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <readMem+0x10c>)
 8001b8c:	f7ff fedd 	bl	800194a <read2DArr>
	read2DArr(&TIME_MACROS[0][0], MAX_IR_CODES, BYTES_PER_EFFECT, &currAddr);
 8001b90:	463b      	mov	r3, r7
 8001b92:	2206      	movs	r2, #6
 8001b94:	2114      	movs	r1, #20
 8001b96:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <readMem+0x110>)
 8001b98:	f7ff fed7 	bl	800194a <read2DArr>

}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40024000 	.word	0x40024000
 8001ba8:	40024001 	.word	0x40024001
 8001bac:	20000002 	.word	0x20000002
 8001bb0:	40024002 	.word	0x40024002
 8001bb4:	40024003 	.word	0x40024003
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	40024004 	.word	0x40024004
 8001bc0:	40024005 	.word	0x40024005
 8001bc4:	20000006 	.word	0x20000006
 8001bc8:	20001574 	.word	0x20001574
 8001bcc:	2000159c 	.word	0x2000159c
 8001bd0:	20001614 	.word	0x20001614
 8001bd4:	20001650 	.word	0x20001650
 8001bd8:	200016a0 	.word	0x200016a0

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10e      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_TIM_Base_MspInit+0xc0>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a25      	ldr	r2, [pc, #148]	; (8001cec <HAL_TIM_Base_MspInit+0xc0>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_TIM_Base_MspInit+0xc0>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c6a:	e038      	b.n	8001cde <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d133      	bne.n	8001cde <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <HAL_TIM_Base_MspInit+0xc0>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <HAL_TIM_Base_MspInit+0xc0>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_TIM_Base_MspInit+0xc0>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_TIM_Base_MspInit+0xc0>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_TIM_Base_MspInit+0xc0>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_TIM_Base_MspInit+0xc0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cae:	2340      	movs	r3, #64	; 0x40
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8001cca:	f001 fccb 	bl	8003664 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	201d      	movs	r0, #29
 8001cd4:	f000 fff3 	bl	8002cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cd8:	201d      	movs	r0, #29
 8001cda:	f001 f80c 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3728      	adds	r7, #40	; 0x28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <HAL_UART_MspInit+0xf0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d161      	bne.n	8001dde <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <HAL_UART_MspInit+0xf4>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a32      	ldr	r2, [pc, #200]	; (8001dec <HAL_UART_MspInit+0xf4>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_UART_MspInit+0xf4>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_UART_MspInit+0xf4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a2b      	ldr	r2, [pc, #172]	; (8001dec <HAL_UART_MspInit+0xf4>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <HAL_UART_MspInit+0xf4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d52:	2360      	movs	r3, #96	; 0x60
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4820      	ldr	r0, [pc, #128]	; (8001df0 <HAL_UART_MspInit+0xf8>)
 8001d6e:	f001 fc79 	bl	8003664 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d74:	4a20      	ldr	r2, [pc, #128]	; (8001df8 <HAL_UART_MspInit+0x100>)
 8001d76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d92:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001db2:	4810      	ldr	r0, [pc, #64]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001db4:	f000 ffba 	bl	8002d2c <HAL_DMA_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001dbe:	f7ff fd6b 	bl	8001898 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_UART_MspInit+0xfc>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2026      	movs	r0, #38	; 0x26
 8001dd4:	f000 ff73 	bl	8002cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dd8:	2026      	movs	r0, #38	; 0x26
 8001dda:	f000 ff8c 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40004400 	.word	0x40004400
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	200014a8 	.word	0x200014a8
 8001df8:	40026088 	.word	0x40026088

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 fe3e 	bl	8002ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <DMA1_Stream5_IRQHandler+0x10>)
 8001e56:	f001 f99b 	bl	8003190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200014a8 	.word	0x200014a8

08001e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <TIM3_IRQHandler+0x10>)
 8001e6a:	f002 fd4b 	bl	8004904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000141c 	.word	0x2000141c

08001e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <USART2_IRQHandler+0x10>)
 8001e7e:	f003 fedf 	bl	8005c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20001464 	.word	0x20001464

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f004 ffb0 	bl	8006e20 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	20001718 	.word	0x20001718
 8001ef4:	20001a48 	.word	0x20001a48

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <ws2812b_gpio_init+0x90>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a20      	ldr	r2, [pc, #128]	; (8001fac <ws2812b_gpio_init+0x90>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <ws2812b_gpio_init+0x90>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 8001f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f42:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	4619      	mov	r1, r3
 8001f56:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <ws2812b_gpio_init+0x94>)
 8001f58:	f001 fb84 	bl	8003664 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <ws2812b_gpio_init+0x90>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a11      	ldr	r2, [pc, #68]	; (8001fac <ws2812b_gpio_init+0x90>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <ws2812b_gpio_init+0x90>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]

		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 8001f84:	2302      	movs	r3, #2
 8001f86:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <ws2812b_gpio_init+0x98>)
 8001f90:	f001 fb68 	bl	8003664 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 8001f94:	2301      	movs	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <ws2812b_gpio_init+0x98>)
 8001fa0:	f001 fb60 	bl	8003664 <HAL_GPIO_Init>
	#endif
}
 8001fa4:	bf00      	nop
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b52      	ldr	r3, [pc, #328]	; (800210c <TIM1_init+0x154>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a51      	ldr	r2, [pc, #324]	; (800210c <TIM1_init+0x154>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b4f      	ldr	r3, [pc, #316]	; (800210c <TIM1_init+0x154>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 8001fda:	4b4d      	ldr	r3, [pc, #308]	; (8002110 <TIM1_init+0x158>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <TIM1_init+0x15c>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <TIM1_init+0x160>)
 8001fea:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 8001fec:	4b48      	ldr	r3, [pc, #288]	; (8002110 <TIM1_init+0x158>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a4a      	ldr	r2, [pc, #296]	; (800211c <TIM1_init+0x164>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0adb      	lsrs	r3, r3, #11
 8001ff8:	4a49      	ldr	r2, [pc, #292]	; (8002120 <TIM1_init+0x168>)
 8001ffa:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 8001ffc:	4b46      	ldr	r3, [pc, #280]	; (8002118 <TIM1_init+0x160>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	461a      	mov	r2, r3
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <TIM1_init+0x16c>)
 800200c:	fba3 2302 	umull	r2, r3, r3, r2
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 8002014:	4b40      	ldr	r3, [pc, #256]	; (8002118 <TIM1_init+0x160>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	461a      	mov	r2, r3
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <TIM1_init+0x170>)
 8002024:	fba3 2302 	umull	r2, r3, r3, r2
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 800202c:	4b3f      	ldr	r3, [pc, #252]	; (800212c <TIM1_init+0x174>)
 800202e:	4a40      	ldr	r2, [pc, #256]	; (8002130 <TIM1_init+0x178>)
 8002030:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 8002032:	4b39      	ldr	r3, [pc, #228]	; (8002118 <TIM1_init+0x160>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a3d      	ldr	r2, [pc, #244]	; (800212c <TIM1_init+0x174>)
 8002038:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 800203a:	4b3c      	ldr	r3, [pc, #240]	; (800212c <TIM1_init+0x174>)
 800203c:	2200      	movs	r2, #0
 800203e:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 8002040:	4b3a      	ldr	r3, [pc, #232]	; (800212c <TIM1_init+0x174>)
 8002042:	2200      	movs	r2, #0
 8002044:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <TIM1_init+0x174>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800204c:	4b37      	ldr	r3, [pc, #220]	; (800212c <TIM1_init+0x174>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 8002052:	4836      	ldr	r0, [pc, #216]	; (800212c <TIM1_init+0x174>)
 8002054:	f002 f9b2 	bl	80043bc <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	2019      	movs	r0, #25
 800205e:	f000 fe2e 	bl	8002cbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002062:	2019      	movs	r0, #25
 8002064:	f000 fe47 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 8002068:	4b32      	ldr	r3, [pc, #200]	; (8002134 <TIM1_init+0x17c>)
 800206a:	2260      	movs	r2, #96	; 0x60
 800206c:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <TIM1_init+0x17c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 8002074:	4a2f      	ldr	r2, [pc, #188]	; (8002134 <TIM1_init+0x17c>)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800207a:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <TIM1_init+0x17c>)
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <TIM1_init+0x17c>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 8002086:	2200      	movs	r2, #0
 8002088:	492a      	ldr	r1, [pc, #168]	; (8002134 <TIM1_init+0x17c>)
 800208a:	4828      	ldr	r0, [pc, #160]	; (800212c <TIM1_init+0x174>)
 800208c:	f002 fdde 	bl	8004c4c <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <TIM1_init+0x180>)
 8002092:	2260      	movs	r2, #96	; 0x60
 8002094:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <TIM1_init+0x180>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 800209c:	4a26      	ldr	r2, [pc, #152]	; (8002138 <TIM1_init+0x180>)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80020a2:	4b25      	ldr	r3, [pc, #148]	; (8002138 <TIM1_init+0x180>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <TIM1_init+0x180>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80020ae:	4b22      	ldr	r3, [pc, #136]	; (8002138 <TIM1_init+0x180>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <TIM1_init+0x180>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 80020ba:	2204      	movs	r2, #4
 80020bc:	491e      	ldr	r1, [pc, #120]	; (8002138 <TIM1_init+0x180>)
 80020be:	481b      	ldr	r0, [pc, #108]	; (800212c <TIM1_init+0x174>)
 80020c0:	f002 fdc4 	bl	8004c4c <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 80020c4:	4819      	ldr	r0, [pc, #100]	; (800212c <TIM1_init+0x174>)
 80020c6:	f002 f911 	bl	80042ec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 80020ca:	2100      	movs	r1, #0
 80020cc:	4817      	ldr	r0, [pc, #92]	; (800212c <TIM1_init+0x174>)
 80020ce:	f002 f9cf 	bl	8004470 <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <TIM1_init+0x174>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10f      	bne.n	8002102 <TIM1_init+0x14a>
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <TIM1_init+0x174>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	f240 4344 	movw	r3, #1092	; 0x444
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d107      	bne.n	8002102 <TIM1_init+0x14a>
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <TIM1_init+0x174>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <TIM1_init+0x174>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	20000008 	.word	0x20000008
 8002114:	014f8b59 	.word	0x014f8b59
 8002118:	20001908 	.word	0x20001908
 800211c:	1b4e81b5 	.word	0x1b4e81b5
 8002120:	2000190c 	.word	0x2000190c
 8002124:	38e38e39 	.word	0x38e38e39
 8002128:	88888889 	.word	0x88888889
 800212c:	20001888 	.word	0x20001888
 8002130:	40010000 	.word	0x40010000
 8002134:	200018d0 	.word	0x200018d0
 8002138:	200018ec 	.word	0x200018ec

0800213c <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b65      	ldr	r3, [pc, #404]	; (80022dc <DMA2_init+0x1a0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a64      	ldr	r2, [pc, #400]	; (80022dc <DMA2_init+0x1a0>)
 800214c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b62      	ldr	r3, [pc, #392]	; (80022dc <DMA2_init+0x1a0>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800215e:	4b60      	ldr	r3, [pc, #384]	; (80022e0 <DMA2_init+0x1a4>)
 8002160:	2240      	movs	r2, #64	; 0x40
 8002162:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 8002164:	4b5e      	ldr	r3, [pc, #376]	; (80022e0 <DMA2_init+0x1a4>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 800216a:	4b5d      	ldr	r3, [pc, #372]	; (80022e0 <DMA2_init+0x1a4>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002170:	4b5b      	ldr	r3, [pc, #364]	; (80022e0 <DMA2_init+0x1a4>)
 8002172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002176:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002178:	4b59      	ldr	r3, [pc, #356]	; (80022e0 <DMA2_init+0x1a4>)
 800217a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800217e:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 8002180:	4b57      	ldr	r3, [pc, #348]	; (80022e0 <DMA2_init+0x1a4>)
 8002182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002186:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002188:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <DMA2_init+0x1a4>)
 800218a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800218e:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <DMA2_init+0x1a4>)
 8002192:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002196:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002198:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <DMA2_init+0x1a4>)
 800219a:	2200      	movs	r2, #0
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800219e:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <DMA2_init+0x1a4>)
 80021a0:	2203      	movs	r2, #3
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 80021a4:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <DMA2_init+0x1a4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021aa:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <DMA2_init+0x1a4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 80021b0:	4b4b      	ldr	r3, [pc, #300]	; (80022e0 <DMA2_init+0x1a4>)
 80021b2:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <DMA2_init+0x1a8>)
 80021b4:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 80021b6:	484a      	ldr	r0, [pc, #296]	; (80022e0 <DMA2_init+0x1a4>)
 80021b8:	f000 fe66 	bl	8002e88 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 80021bc:	4848      	ldr	r0, [pc, #288]	; (80022e0 <DMA2_init+0x1a4>)
 80021be:	f000 fdb5 	bl	8002d2c <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 80021c2:	4949      	ldr	r1, [pc, #292]	; (80022e8 <DMA2_init+0x1ac>)
 80021c4:	2330      	movs	r3, #48	; 0x30
 80021c6:	4a49      	ldr	r2, [pc, #292]	; (80022ec <DMA2_init+0x1b0>)
 80021c8:	4845      	ldr	r0, [pc, #276]	; (80022e0 <DMA2_init+0x1a4>)
 80021ca:	f000 febb 	bl	8002f44 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ce:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <DMA2_init+0x1b4>)
 80021d0:	2240      	movs	r2, #64	; 0x40
 80021d2:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b46      	ldr	r3, [pc, #280]	; (80022f0 <DMA2_init+0x1b4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <DMA2_init+0x1b4>)
 80021dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e0:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021e2:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <DMA2_init+0x1b4>)
 80021e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e8:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <DMA2_init+0x1b4>)
 80021ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f0:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <DMA2_init+0x1b4>)
 80021f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f8:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <DMA2_init+0x1b4>)
 80021fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002200:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <DMA2_init+0x1b4>)
 8002204:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002208:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <DMA2_init+0x1b4>)
 800220c:	2200      	movs	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002210:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <DMA2_init+0x1b4>)
 8002212:	2203      	movs	r2, #3
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <DMA2_init+0x1b4>)
 8002218:	2200      	movs	r2, #0
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <DMA2_init+0x1b4>)
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC1.Instance = DMA2_Stream1;
 8002222:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <DMA2_init+0x1b4>)
 8002224:	4a33      	ldr	r2, [pc, #204]	; (80022f4 <DMA2_init+0x1b8>)
 8002226:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 8002228:	4831      	ldr	r0, [pc, #196]	; (80022f0 <DMA2_init+0x1b4>)
 800222a:	f000 fe2d 	bl	8002e88 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 800222e:	4830      	ldr	r0, [pc, #192]	; (80022f0 <DMA2_init+0x1b4>)
 8002230:	f000 fd7c 	bl	8002d2c <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 8002234:	4930      	ldr	r1, [pc, #192]	; (80022f8 <DMA2_init+0x1bc>)
 8002236:	2330      	movs	r3, #48	; 0x30
 8002238:	4a30      	ldr	r2, [pc, #192]	; (80022fc <DMA2_init+0x1c0>)
 800223a:	482d      	ldr	r0, [pc, #180]	; (80022f0 <DMA2_init+0x1b4>)
 800223c:	f000 fe82 	bl	8002f44 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <DMA2_init+0x1c4>)
 8002242:	2240      	movs	r2, #64	; 0x40
 8002244:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <DMA2_init+0x1c4>)
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <DMA2_init+0x1c4>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <DMA2_init+0x1c4>)
 8002254:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002258:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <DMA2_init+0x1c4>)
 800225c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002260:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 8002262:	4b27      	ldr	r3, [pc, #156]	; (8002300 <DMA2_init+0x1c4>)
 8002264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002268:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800226a:	4b25      	ldr	r3, [pc, #148]	; (8002300 <DMA2_init+0x1c4>)
 800226c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002270:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <DMA2_init+0x1c4>)
 8002274:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002278:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <DMA2_init+0x1c4>)
 800227c:	2200      	movs	r2, #0
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <DMA2_init+0x1c4>)
 8002282:	2203      	movs	r2, #3
 8002284:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <DMA2_init+0x1c4>)
 8002288:	2200      	movs	r2, #0
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <DMA2_init+0x1c4>)
 800228e:	2200      	movs	r2, #0
 8002290:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC2.Instance = DMA2_Stream2;
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <DMA2_init+0x1c4>)
 8002294:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <DMA2_init+0x1c8>)
 8002296:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 8002298:	4819      	ldr	r0, [pc, #100]	; (8002300 <DMA2_init+0x1c4>)
 800229a:	f000 fdf5 	bl	8002e88 <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <DMA2_init+0x1c4>)
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <DMA2_init+0x1cc>)
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <DMA2_init+0x1c4>)
 80022a6:	4a19      	ldr	r2, [pc, #100]	; (800230c <DMA2_init+0x1d0>)
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <DMA2_init+0x1c4>)
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <DMA2_init+0x1d4>)
 80022ae:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_DMA_Init(&dmaCC2);
 80022b0:	4813      	ldr	r0, [pc, #76]	; (8002300 <DMA2_init+0x1c4>)
 80022b2:	f000 fd3b 	bl	8002d2c <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	203a      	movs	r0, #58	; 0x3a
 80022bc:	f000 fcff 	bl	8002cbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80022c0:	203a      	movs	r0, #58	; 0x3a
 80022c2:	f000 fd18 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 80022c6:	4913      	ldr	r1, [pc, #76]	; (8002314 <DMA2_init+0x1d8>)
 80022c8:	2330      	movs	r3, #48	; 0x30
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <DMA2_init+0x1b0>)
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <DMA2_init+0x1c4>)
 80022ce:	f000 fe74 	bl	8002fba <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	20001910 	.word	0x20001910
 80022e4:	40026488 	.word	0x40026488
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	40020818 	.word	0x40020818
 80022f0:	20001970 	.word	0x20001970
 80022f4:	40026428 	.word	0x40026428
 80022f8:	20001828 	.word	0x20001828
 80022fc:	4002081a 	.word	0x4002081a
 8002300:	200019d0 	.word	0x200019d0
 8002304:	40026440 	.word	0x40026440
 8002308:	08002615 	.word	0x08002615
 800230c:	080025b5 	.word	0x080025b5
 8002310:	08002595 	.word	0x08002595
 8002314:	20000010 	.word	0x20000010

08002318 <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af02      	add	r7, sp, #8
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	1c58      	adds	r0, r3, #1
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	6088      	str	r0, [r1, #8]
 8002330:	4413      	add	r3, r2
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	1c58      	adds	r0, r3, #1
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	6088      	str	r0, [r1, #8]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	1c58      	adds	r0, r3, #1
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	6088      	str	r0, [r1, #8]
 8002358:	4413      	add	r3, r2
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	d102      	bne.n	8002370 <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7b18      	ldrb	r0, [r3, #12]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b299      	uxth	r1, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	b2dc      	uxtb	r4, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4623      	mov	r3, r4
 8002388:	f000 fa36 	bl	80027f8 <ws2812b_set_pixel>
}
 800238c:	bf00      	nop
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
	// transmission complete flag
	ws2812b.transferComplete = 0;
 800239a:	4b72      	ldr	r3, [pc, #456]	; (8002564 <WS2812_sendbuf+0x1d0>)
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

	uint32_t i;

	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	e019      	b.n	80023dc <WS2812_sendbuf+0x48>
	{
		ws2812b.item[i].frameBufferCounter = 0;
 80023a8:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <WS2812_sendbuf+0x1d0>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4413      	add	r3, r2
 80023b0:	3308      	adds	r3, #8
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]

		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4a6a      	ldr	r2, [pc, #424]	; (8002564 <WS2812_sendbuf+0x1d0>)
 80023bc:	4413      	add	r3, r2
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ffa9 	bl	8002318 <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	4a66      	ldr	r2, [pc, #408]	; (8002564 <WS2812_sendbuf+0x1d0>)
 80023cc:	4413      	add	r3, r2
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ffa1 	bl	8002318 <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3301      	adds	r3, #1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	d9e2      	bls.n	80023a8 <WS2812_sendbuf+0x14>
	}

	// clear all DMA flags
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 80023e2:	4b61      	ldr	r3, [pc, #388]	; (8002568 <WS2812_sendbuf+0x1d4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b60      	ldr	r3, [pc, #384]	; (800256c <WS2812_sendbuf+0x1d8>)
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d904      	bls.n	80023f8 <WS2812_sendbuf+0x64>
 80023ee:	4b60      	ldr	r3, [pc, #384]	; (8002570 <WS2812_sendbuf+0x1dc>)
 80023f0:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	e019      	b.n	800242c <WS2812_sendbuf+0x98>
 80023f8:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <WS2812_sendbuf+0x1d4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <WS2812_sendbuf+0x1e0>)
 8002400:	429a      	cmp	r2, r3
 8002402:	d904      	bls.n	800240e <WS2812_sendbuf+0x7a>
 8002404:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <WS2812_sendbuf+0x1dc>)
 8002406:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800240a:	6093      	str	r3, [r2, #8]
 800240c:	e00e      	b.n	800242c <WS2812_sendbuf+0x98>
 800240e:	4b56      	ldr	r3, [pc, #344]	; (8002568 <WS2812_sendbuf+0x1d4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	4b58      	ldr	r3, [pc, #352]	; (8002578 <WS2812_sendbuf+0x1e4>)
 8002416:	429a      	cmp	r2, r3
 8002418:	d904      	bls.n	8002424 <WS2812_sendbuf+0x90>
 800241a:	4a58      	ldr	r2, [pc, #352]	; (800257c <WS2812_sendbuf+0x1e8>)
 800241c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002420:	60d3      	str	r3, [r2, #12]
 8002422:	e003      	b.n	800242c <WS2812_sendbuf+0x98>
 8002424:	4a55      	ldr	r2, [pc, #340]	; (800257c <WS2812_sendbuf+0x1e8>)
 8002426:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800242a:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 800242c:	4b54      	ldr	r3, [pc, #336]	; (8002580 <WS2812_sendbuf+0x1ec>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b4e      	ldr	r3, [pc, #312]	; (800256c <WS2812_sendbuf+0x1d8>)
 8002434:	429a      	cmp	r2, r3
 8002436:	d904      	bls.n	8002442 <WS2812_sendbuf+0xae>
 8002438:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <WS2812_sendbuf+0x1dc>)
 800243a:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	e019      	b.n	8002476 <WS2812_sendbuf+0xe2>
 8002442:	4b4f      	ldr	r3, [pc, #316]	; (8002580 <WS2812_sendbuf+0x1ec>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <WS2812_sendbuf+0x1e0>)
 800244a:	429a      	cmp	r2, r3
 800244c:	d904      	bls.n	8002458 <WS2812_sendbuf+0xc4>
 800244e:	4a48      	ldr	r2, [pc, #288]	; (8002570 <WS2812_sendbuf+0x1dc>)
 8002450:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002454:	6093      	str	r3, [r2, #8]
 8002456:	e00e      	b.n	8002476 <WS2812_sendbuf+0xe2>
 8002458:	4b49      	ldr	r3, [pc, #292]	; (8002580 <WS2812_sendbuf+0x1ec>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b46      	ldr	r3, [pc, #280]	; (8002578 <WS2812_sendbuf+0x1e4>)
 8002460:	429a      	cmp	r2, r3
 8002462:	d904      	bls.n	800246e <WS2812_sendbuf+0xda>
 8002464:	4a45      	ldr	r2, [pc, #276]	; (800257c <WS2812_sendbuf+0x1e8>)
 8002466:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800246a:	60d3      	str	r3, [r2, #12]
 800246c:	e003      	b.n	8002476 <WS2812_sendbuf+0xe2>
 800246e:	4a43      	ldr	r2, [pc, #268]	; (800257c <WS2812_sendbuf+0x1e8>)
 8002470:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002474:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 8002476:	4b43      	ldr	r3, [pc, #268]	; (8002584 <WS2812_sendbuf+0x1f0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <WS2812_sendbuf+0x1d8>)
 800247e:	429a      	cmp	r2, r3
 8002480:	d904      	bls.n	800248c <WS2812_sendbuf+0xf8>
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <WS2812_sendbuf+0x1dc>)
 8002484:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	e019      	b.n	80024c0 <WS2812_sendbuf+0x12c>
 800248c:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <WS2812_sendbuf+0x1f0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <WS2812_sendbuf+0x1e0>)
 8002494:	429a      	cmp	r2, r3
 8002496:	d904      	bls.n	80024a2 <WS2812_sendbuf+0x10e>
 8002498:	4a35      	ldr	r2, [pc, #212]	; (8002570 <WS2812_sendbuf+0x1dc>)
 800249a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800249e:	6093      	str	r3, [r2, #8]
 80024a0:	e00e      	b.n	80024c0 <WS2812_sendbuf+0x12c>
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <WS2812_sendbuf+0x1f0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <WS2812_sendbuf+0x1e4>)
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d904      	bls.n	80024b8 <WS2812_sendbuf+0x124>
 80024ae:	4a33      	ldr	r2, [pc, #204]	; (800257c <WS2812_sendbuf+0x1e8>)
 80024b0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80024b4:	60d3      	str	r3, [r2, #12]
 80024b6:	e003      	b.n	80024c0 <WS2812_sendbuf+0x12c>
 80024b8:	4a30      	ldr	r2, [pc, #192]	; (800257c <WS2812_sendbuf+0x1e8>)
 80024ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80024be:	6093      	str	r3, [r2, #8]



	// configure the number of bytes to be transferred by the DMA controller
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <WS2812_sendbuf+0x1d4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2230      	movs	r2, #48	; 0x30
 80024c6:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <WS2812_sendbuf+0x1ec>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2230      	movs	r2, #48	; 0x30
 80024ce:	605a      	str	r2, [r3, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 80024d0:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <WS2812_sendbuf+0x1f0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2230      	movs	r2, #48	; 0x30
 80024d6:	605a      	str	r2, [r3, #4]

	// clear all TIM2 flags
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <WS2812_sendbuf+0x1f4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 021f 	mvn.w	r2, #31
 80024e0:	611a      	str	r2, [r3, #16]

	// enable DMA channels
	__HAL_DMA_ENABLE(&dmaUpdate);
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <WS2812_sendbuf+0x1d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <WS2812_sendbuf+0x1d4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <WS2812_sendbuf+0x1ec>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <WS2812_sendbuf+0x1ec>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <WS2812_sendbuf+0x1f0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <WS2812_sendbuf+0x1f0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]

	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <WS2812_sendbuf+0x1f4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <WS2812_sendbuf+0x1f4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002520:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <WS2812_sendbuf+0x1f4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <WS2812_sendbuf+0x1f4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <WS2812_sendbuf+0x1f4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <WS2812_sendbuf+0x1f4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002540:	60da      	str	r2, [r3, #12]

	TIM1->CNT = tim_period-1;
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <WS2812_sendbuf+0x1f8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <WS2812_sendbuf+0x1fc>)
 8002548:	3b01      	subs	r3, #1
 800254a:	6253      	str	r3, [r2, #36]	; 0x24

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <WS2812_sendbuf+0x1f4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <WS2812_sendbuf+0x1f4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	2000171c 	.word	0x2000171c
 8002568:	20001910 	.word	0x20001910
 800256c:	40026458 	.word	0x40026458
 8002570:	40026400 	.word	0x40026400
 8002574:	400260b8 	.word	0x400260b8
 8002578:	40026058 	.word	0x40026058
 800257c:	40026000 	.word	0x40026000
 8002580:	20001970 	.word	0x20001970
 8002584:	200019d0 	.word	0x200019d0
 8002588:	20001888 	.word	0x20001888
 800258c:	20001908 	.word	0x20001908
 8002590:	40010000 	.word	0x40010000

08002594 <DMA_TransferError>:


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
	i++;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <DMA_TransferHalfHandler+0x5c>)
 80025be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d108      	bne.n	80025d8 <DMA_TransferHalfHandler+0x24>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 80025c6:	2300      	movs	r3, #0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2300      	movs	r3, #0
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2000      	movs	r0, #0
 80025d2:	f000 f911 	bl	80027f8 <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 80025d6:	e017      	b.n	8002608 <DMA_TransferHalfHandler+0x54>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e00a      	b.n	80025f4 <DMA_TransferHalfHandler+0x40>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <DMA_TransferHalfHandler+0x5c>)
 80025e4:	4413      	add	r3, r2
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fe95 	bl	8002318 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3301      	adds	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	d9f1      	bls.n	80025de <DMA_TransferHalfHandler+0x2a>
		ws2812b.repeatCounter++;
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <DMA_TransferHalfHandler+0x5c>)
 80025fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002600:	3301      	adds	r3, #1
 8002602:	4a03      	ldr	r2, [pc, #12]	; (8002610 <DMA_TransferHalfHandler+0x5c>)
 8002604:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	2000171c 	.word	0x2000171c

08002614 <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 800261c:	4b41      	ldr	r3, [pc, #260]	; (8002724 <DMA_TransferCompleteHandler+0x110>)
 800261e:	2201      	movs	r2, #1
 8002620:	619a      	str	r2, [r3, #24]
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <DMA_TransferCompleteHandler+0x114>)
 8002624:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d15b      	bne.n	80026e4 <DMA_TransferCompleteHandler+0xd0>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 800262c:	4b3e      	ldr	r3, [pc, #248]	; (8002728 <DMA_TransferCompleteHandler+0x114>)
 800262e:	2200      	movs	r2, #0
 8002630:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 8002634:	4b3d      	ldr	r3, [pc, #244]	; (800272c <DMA_TransferCompleteHandler+0x118>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3c      	ldr	r2, [pc, #240]	; (800272c <DMA_TransferCompleteHandler+0x118>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 8002640:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <DMA_TransferCompleteHandler+0x11c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <DMA_TransferCompleteHandler+0x11c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 8002650:	4b38      	ldr	r3, [pc, #224]	; (8002734 <DMA_TransferCompleteHandler+0x120>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <DMA_TransferCompleteHandler+0x120>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8002660:	4b35      	ldr	r3, [pc, #212]	; (8002738 <DMA_TransferCompleteHandler+0x124>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <DMA_TransferCompleteHandler+0x124>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <DMA_TransferCompleteHandler+0x128>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <DMA_TransferCompleteHandler+0x128>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800267e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <DMA_TransferCompleteHandler+0x128>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <DMA_TransferCompleteHandler+0x128>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800268e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <DMA_TransferCompleteHandler+0x128>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <DMA_TransferCompleteHandler+0x128>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269e:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <DMA_TransferCompleteHandler+0x118>)
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <DMA_TransferCompleteHandler+0x12c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <DMA_TransferCompleteHandler+0x118>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <DMA_TransferCompleteHandler+0x118>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <DMA_TransferCompleteHandler+0x128>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0201 	mvn.w	r2, #1
 80026bc:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <DMA_TransferCompleteHandler+0x128>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <DMA_TransferCompleteHandler+0x128>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <DMA_TransferCompleteHandler+0x118>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a16      	ldr	r2, [pc, #88]	; (800272c <DMA_TransferCompleteHandler+0x118>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 80026da:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <DMA_TransferCompleteHandler+0x130>)
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <DMA_TransferCompleteHandler+0x134>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6193      	str	r3, [r2, #24]
 80026e2:	e017      	b.n	8002714 <DMA_TransferCompleteHandler+0x100>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e00a      	b.n	8002700 <DMA_TransferCompleteHandler+0xec>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <DMA_TransferCompleteHandler+0x114>)
 80026f0:	4413      	add	r3, r2
 80026f2:	2101      	movs	r1, #1
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fe0f 	bl	8002318 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3301      	adds	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b0f      	cmp	r3, #15
 8002704:	d9f1      	bls.n	80026ea <DMA_TransferCompleteHandler+0xd6>
		}

		ws2812b.repeatCounter++;
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <DMA_TransferCompleteHandler+0x114>)
 8002708:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800270c:	3301      	adds	r3, #1
 800270e:	4a06      	ldr	r2, [pc, #24]	; (8002728 <DMA_TransferCompleteHandler+0x114>)
 8002710:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	}



	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <DMA_TransferCompleteHandler+0x110>)
 8002716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800271a:	619a      	str	r2, [r3, #24]
	#endif

}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40020400 	.word	0x40020400
 8002728:	2000171c 	.word	0x2000171c
 800272c:	40010000 	.word	0x40010000
 8002730:	20001910 	.word	0x20001910
 8002734:	20001970 	.word	0x20001970
 8002738:	200019d0 	.word	0x200019d0
 800273c:	20001888 	.word	0x20001888
 8002740:	2000190c 	.word	0x2000190c
 8002744:	40020800 	.word	0x40020800
 8002748:	20000010 	.word	0x20000010

0800274c <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <DMA2_Stream2_IRQHandler+0x1c>)
 8002752:	2202      	movs	r2, #2
 8002754:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <DMA2_Stream2_IRQHandler+0x20>)
 8002758:	f000 fd1a 	bl	8003190 <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 800275c:	4b02      	ldr	r3, [pc, #8]	; (8002768 <DMA2_Stream2_IRQHandler+0x1c>)
 800275e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002762:	619a      	str	r2, [r3, #24]
	#endif
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40020400 	.word	0x40020400
 800276c:	200019d0 	.word	0x200019d0

08002770 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8002776:	2201      	movs	r2, #1
 8002778:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 800277a:	4805      	ldr	r0, [pc, #20]	; (8002790 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800277c:	f002 f8c2 	bl	8004904 <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8002782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002786:	619a      	str	r2, [r3, #24]
	#endif
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40020400 	.word	0x40020400
 8002790:	20001888 	.word	0x20001888

08002794 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    TIM1->CR1 = 0; // disable timer
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80027bc:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0201 	mvn.w	r2, #1
 80027d0:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	2000171c 	.word	0x2000171c
 80027ec:	40010000 	.word	0x40010000
 80027f0:	20001888 	.word	0x20001888
 80027f4:	20001908 	.word	0x20001908

080027f8 <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 80027f8:	b490      	push	{r4, r7}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4604      	mov	r4, r0
 8002800:	4608      	mov	r0, r1
 8002802:	4611      	mov	r1, r2
 8002804:	461a      	mov	r2, r3
 8002806:	4623      	mov	r3, r4
 8002808:	71fb      	strb	r3, [r7, #7]
 800280a:	4603      	mov	r3, r0
 800280c:	80bb      	strh	r3, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	71bb      	strb	r3, [r7, #6]
 8002812:	4613      	mov	r3, r2
 8002814:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	4a5a      	ldr	r2, [pc, #360]	; (8002984 <ws2812b_set_pixel+0x18c>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <ws2812b_set_pixel+0x18c>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 8002826:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800282a:	4a56      	ldr	r2, [pc, #344]	; (8002984 <ws2812b_set_pixel+0x18c>)
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint32_t calcCol = (column*24);
 8002832:	88ba      	ldrh	r2, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	61bb      	str	r3, [r7, #24]
	uint32_t invRed = ~red;
 800283e:	79bb      	ldrb	r3, [r7, #6]
 8002840:	43db      	mvns	r3, r3
 8002842:	617b      	str	r3, [r7, #20]
	uint32_t invGreen = ~green;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	43db      	mvns	r3, r3
 8002848:	613b      	str	r3, [r7, #16]
	uint32_t invBlue = ~blue;
 800284a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800284e:	43db      	mvns	r3, r3
 8002850:	60fb      	str	r3, [r7, #12]


#if defined(SETPIX_1)
	uint8_t i;
	uint32_t calcClearRow = ~((0x01<<row) << 0);
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	2201      	movs	r2, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e085      	b.n	8002970 <ws2812b_set_pixel+0x178>
	{
		// clear the data for pixel

		ws2812bDmaBitBuffer[(calcCol+i)] &= calcClearRow;
 8002864:	7ffa      	ldrb	r2, [r7, #31]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4413      	add	r3, r2
 800286a:	4a47      	ldr	r2, [pc, #284]	; (8002988 <ws2812b_set_pixel+0x190>)
 800286c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	b29a      	uxth	r2, r3
 8002874:	7ff8      	ldrb	r0, [r7, #31]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4403      	add	r3, r0
 800287a:	400a      	ands	r2, r1
 800287c:	b291      	uxth	r1, r2
 800287e:	4a42      	ldr	r2, [pc, #264]	; (8002988 <ws2812b_set_pixel+0x190>)
 8002880:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+8+i)] &= calcClearRow;
 8002884:	7ffa      	ldrb	r2, [r7, #31]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4413      	add	r3, r2
 800288a:	3308      	adds	r3, #8
 800288c:	4a3e      	ldr	r2, [pc, #248]	; (8002988 <ws2812b_set_pixel+0x190>)
 800288e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	b29a      	uxth	r2, r3
 8002896:	7ff8      	ldrb	r0, [r7, #31]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	4403      	add	r3, r0
 800289c:	3308      	adds	r3, #8
 800289e:	400a      	ands	r2, r1
 80028a0:	b291      	uxth	r1, r2
 80028a2:	4a39      	ldr	r2, [pc, #228]	; (8002988 <ws2812b_set_pixel+0x190>)
 80028a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+16+i)] &= calcClearRow;
 80028a8:	7ffa      	ldrb	r2, [r7, #31]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4413      	add	r3, r2
 80028ae:	3310      	adds	r3, #16
 80028b0:	4a35      	ldr	r2, [pc, #212]	; (8002988 <ws2812b_set_pixel+0x190>)
 80028b2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	7ff8      	ldrb	r0, [r7, #31]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	4403      	add	r3, r0
 80028c0:	3310      	adds	r3, #16
 80028c2:	400a      	ands	r2, r1
 80028c4:	b291      	uxth	r1, r2
 80028c6:	4a30      	ldr	r2, [pc, #192]	; (8002988 <ws2812b_set_pixel+0x190>)
 80028c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// write new data for pixel
		ws2812bDmaBitBuffer[(calcCol+i)] |= (((((invGreen)<<i) & 0x80)>>7)<<(row+0));
 80028cc:	7ffa      	ldrb	r2, [r7, #31]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <ws2812b_set_pixel+0x190>)
 80028d4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	09db      	lsrs	r3, r3, #7
 80028e2:	f003 0201 	and.w	r2, r3, #1
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	7ff8      	ldrb	r0, [r7, #31]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	4403      	add	r3, r0
 80028f4:	430a      	orrs	r2, r1
 80028f6:	b291      	uxth	r1, r2
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <ws2812b_set_pixel+0x190>)
 80028fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+8+i)] |= (((((invRed)<<i) & 0x80)>>7)<<(row+0));
 80028fe:	7ffa      	ldrb	r2, [r7, #31]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	3308      	adds	r3, #8
 8002906:	4a20      	ldr	r2, [pc, #128]	; (8002988 <ws2812b_set_pixel+0x190>)
 8002908:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800290c:	7ffb      	ldrb	r3, [r7, #31]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	09db      	lsrs	r3, r3, #7
 8002916:	f003 0201 	and.w	r2, r3, #1
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	b29a      	uxth	r2, r3
 8002922:	7ff8      	ldrb	r0, [r7, #31]
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4403      	add	r3, r0
 8002928:	3308      	adds	r3, #8
 800292a:	430a      	orrs	r2, r1
 800292c:	b291      	uxth	r1, r2
 800292e:	4a16      	ldr	r2, [pc, #88]	; (8002988 <ws2812b_set_pixel+0x190>)
 8002930:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+16+i)] |= (((((invBlue)<<i) & 0x80)>>7)<<(row+0));
 8002934:	7ffa      	ldrb	r2, [r7, #31]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4413      	add	r3, r2
 800293a:	3310      	adds	r3, #16
 800293c:	4a12      	ldr	r2, [pc, #72]	; (8002988 <ws2812b_set_pixel+0x190>)
 800293e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002942:	7ffb      	ldrb	r3, [r7, #31]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	09db      	lsrs	r3, r3, #7
 800294c:	f003 0201 	and.w	r2, r3, #1
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	b29a      	uxth	r2, r3
 8002958:	7ff8      	ldrb	r0, [r7, #31]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4403      	add	r3, r0
 800295e:	3310      	adds	r3, #16
 8002960:	430a      	orrs	r2, r1
 8002962:	b291      	uxth	r1, r2
 8002964:	4a08      	ldr	r2, [pc, #32]	; (8002988 <ws2812b_set_pixel+0x190>)
 8002966:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 8; i++)
 800296a:	7ffb      	ldrb	r3, [r7, #31]
 800296c:	3301      	adds	r3, #1
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	7ffb      	ldrb	r3, [r7, #31]
 8002972:	2b07      	cmp	r3, #7
 8002974:	f67f af76 	bls.w	8002864 <ws2812b_set_pixel+0x6c>

	*bitBand = (invBlue >> 0);
	bitBand+=16;

#endif
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bc90      	pop	{r4, r7}
 8002982:	4770      	bx	lr
 8002984:	08007830 	.word	0x08007830
 8002988:	20001828 	.word	0x20001828

0800298c <ws2812b_init>:


void ws2812b_init()
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 8002990:	f7ff fac4 	bl	8001f1c <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 8002994:	f7ff fbd2 	bl	800213c <DMA2_init>
	TIM1_init();
 8002998:	f7ff fb0e 	bl	8001fb8 <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 800299c:	4b02      	ldr	r3, [pc, #8]	; (80029a8 <ws2812b_init+0x1c>)
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	2000171c 	.word	0x2000171c

080029ac <ws2812b_handle>:


void ws2812b_handle()
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <ws2812b_handle+0x20>)
 80029b2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <ws2812b_handle+0x1a>
		ws2812b.startTransfer = 0;
 80029ba:	4b04      	ldr	r3, [pc, #16]	; (80029cc <ws2812b_handle+0x20>)
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		WS2812_sendbuf();
 80029c2:	f7ff fce7 	bl	8002394 <WS2812_sendbuf>
	}

}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	2000171c 	.word	0x2000171c

080029d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029d6:	490e      	ldr	r1, [pc, #56]	; (8002a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029d8:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029dc:	e002      	b.n	80029e4 <LoopCopyDataInit>

080029de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029e2:	3304      	adds	r3, #4

080029e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e8:	d3f9      	bcc.n	80029de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ea:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029ec:	4c0b      	ldr	r4, [pc, #44]	; (8002a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f0:	e001      	b.n	80029f6 <LoopFillZerobss>

080029f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f4:	3204      	adds	r2, #4

080029f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f8:	d3fb      	bcc.n	80029f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029fa:	f7ff fa7d 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029fe:	f004 fa15 	bl	8006e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a02:	f7fe fd13 	bl	800142c <main>
  bx  lr    
 8002a06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a10:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002a14:	080079dc 	.word	0x080079dc
  ldr r2, =_sbss
 8002a18:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002a1c:	20001a44 	.word	0x20001a44

08002a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a20:	e7fe      	b.n	8002a20 <ADC_IRQHandler>
	...

08002a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <HAL_Init+0x40>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <HAL_Init+0x40>)
 8002a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_Init+0x40>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_Init+0x40>)
 8002a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_Init+0x40>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <HAL_Init+0x40>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a4c:	2003      	movs	r0, #3
 8002a4e:	f000 f92b 	bl	8002ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a52:	200f      	movs	r0, #15
 8002a54:	f000 f808 	bl	8002a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a58:	f7ff f8c0 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023c00 	.word	0x40023c00

08002a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_InitTick+0x54>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_InitTick+0x58>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f943 	bl	8002d12 <HAL_SYSTICK_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00e      	b.n	8002ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b0f      	cmp	r3, #15
 8002a9a:	d80a      	bhi.n	8002ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa4:	f000 f90b 	bl	8002cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa8:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <HAL_InitTick+0x5c>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e000      	b.n	8002ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000008 	.word	0x20000008
 8002ac0:	20000018 	.word	0x20000018
 8002ac4:	20000014 	.word	0x20000014

08002ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_IncTick+0x20>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_IncTick+0x24>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_IncTick+0x24>)
 8002ada:	6013      	str	r3, [r2, #0]
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000018 	.word	0x20000018
 8002aec:	20001a30 	.word	0x20001a30

08002af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return uwTick;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_GetTick+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20001a30 	.word	0x20001a30

08002b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b24:	4013      	ands	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <__NVIC_GetPriorityGrouping+0x18>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0307 	and.w	r3, r3, #7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	db0b      	blt.n	8002b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <__NVIC_EnableIRQ+0x38>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100

08002ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	6039      	str	r1, [r7, #0]
 8002bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	db0a      	blt.n	8002bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	490c      	ldr	r1, [pc, #48]	; (8002bf4 <__NVIC_SetPriority+0x4c>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd0:	e00a      	b.n	8002be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <__NVIC_SetPriority+0x50>)
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	3b04      	subs	r3, #4
 8002be0:	0112      	lsls	r2, r2, #4
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	440b      	add	r3, r1
 8002be6:	761a      	strb	r2, [r3, #24]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000e100 	.word	0xe000e100
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f1c3 0307 	rsb	r3, r3, #7
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	bf28      	it	cs
 8002c1a:	2304      	movcs	r3, #4
 8002c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d902      	bls.n	8002c2c <NVIC_EncodePriority+0x30>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3b03      	subs	r3, #3
 8002c2a:	e000      	b.n	8002c2e <NVIC_EncodePriority+0x32>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	f04f 32ff 	mov.w	r2, #4294967295
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	401a      	ands	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c44:	f04f 31ff 	mov.w	r1, #4294967295
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43d9      	mvns	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	4313      	orrs	r3, r2
         );
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c74:	d301      	bcc.n	8002c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00f      	b.n	8002c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <SysTick_Config+0x40>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c82:	210f      	movs	r1, #15
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	f7ff ff8e 	bl	8002ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <SysTick_Config+0x40>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <SysTick_Config+0x40>)
 8002c94:	2207      	movs	r2, #7
 8002c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	e000e010 	.word	0xe000e010

08002ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff29 	bl	8002b08 <__NVIC_SetPriorityGrouping>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd0:	f7ff ff3e 	bl	8002b50 <__NVIC_GetPriorityGrouping>
 8002cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	6978      	ldr	r0, [r7, #20]
 8002cdc:	f7ff ff8e 	bl	8002bfc <NVIC_EncodePriority>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff5d 	bl	8002ba8 <__NVIC_SetPriority>
}
 8002cee:	bf00      	nop
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff31 	bl	8002b6c <__NVIC_EnableIRQ>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ffa2 	bl	8002c64 <SysTick_Config>
 8002d20:	4603      	mov	r3, r0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff feda 	bl	8002af0 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e099      	b.n	8002e7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d68:	e00f      	b.n	8002d8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d6a:	f7ff fec1 	bl	8002af0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d908      	bls.n	8002d8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2203      	movs	r2, #3
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e078      	b.n	8002e7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e8      	bne.n	8002d6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_DMA_Init+0x158>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d107      	bne.n	8002df4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4313      	orrs	r3, r2
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f023 0307 	bic.w	r3, r3, #7
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d117      	bne.n	8002e4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00e      	beq.n	8002e4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fb9b 	bl	800356c <DMA_CheckFifoParam>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2240      	movs	r2, #64	; 0x40
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e016      	b.n	8002e7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fb52 	bl	8003500 <DMA_CalcBaseAndBitshift>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	223f      	movs	r2, #63	; 0x3f
 8002e66:	409a      	lsls	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	f010803f 	.word	0xf010803f

08002e88 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e050      	b.n	8002f3c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d101      	bne.n	8002eaa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e048      	b.n	8002f3c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2221      	movs	r2, #33	; 0x21
 8002ee8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fb08 	bl	8003500 <DMA_CalcBaseAndBitshift>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	223f      	movs	r2, #63	; 0x3f
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_DMA_Start+0x20>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e026      	b.n	8002fb2 <HAL_DMA_Start+0x6e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d115      	bne.n	8002fa4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fa89 	bl	80034a4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e005      	b.n	8002fb0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
 8002fae:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_DMA_Start_IT+0x26>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e040      	b.n	8003062 <HAL_DMA_Start_IT+0xa8>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d12f      	bne.n	8003054 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fa4b 	bl	80034a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	223f      	movs	r2, #63	; 0x3f
 8003014:	409a      	lsls	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0216 	orr.w	r2, r2, #22
 8003028:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e005      	b.n	8003060 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7ff fd3a 	bl	8002af0 <HAL_GetTick>
 800307c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d008      	beq.n	800309c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e052      	b.n	8003142 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0216 	bic.w	r2, r2, #22
 80030aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d103      	bne.n	80030cc <HAL_DMA_Abort+0x62>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0208 	bic.w	r2, r2, #8
 80030da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ec:	e013      	b.n	8003116 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ee:	f7ff fcff 	bl	8002af0 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d90c      	bls.n	8003116 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2203      	movs	r2, #3
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e015      	b.n	8003142 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e4      	bne.n	80030ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	223f      	movs	r2, #63	; 0x3f
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d004      	beq.n	8003168 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2280      	movs	r2, #128	; 0x80
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e00c      	b.n	8003182 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2205      	movs	r2, #5
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800319c:	4b8e      	ldr	r3, [pc, #568]	; (80033d8 <HAL_DMA_IRQHandler+0x248>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a8e      	ldr	r2, [pc, #568]	; (80033dc <HAL_DMA_IRQHandler+0x24c>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	2208      	movs	r2, #8
 80031bc:	409a      	lsls	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01a      	beq.n	80031fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0204 	bic.w	r2, r2, #4
 80031e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	2208      	movs	r2, #8
 80031ea:	409a      	lsls	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	2201      	movs	r2, #1
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	2201      	movs	r2, #1
 8003220:	409a      	lsls	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2204      	movs	r2, #4
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d012      	beq.n	8003268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2204      	movs	r2, #4
 8003256:	409a      	lsls	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0204 	orr.w	r2, r3, #4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	2210      	movs	r2, #16
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d043      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d03c      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2210      	movs	r2, #16
 800328c:	409a      	lsls	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d018      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d108      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d024      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4798      	blx	r3
 80032be:	e01f      	b.n	8003300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
 80032d0:	e016      	b.n	8003300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d107      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0208 	bic.w	r2, r2, #8
 80032ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2220      	movs	r2, #32
 8003306:	409a      	lsls	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 808f 	beq.w	8003430 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8087 	beq.w	8003430 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	2220      	movs	r2, #32
 8003328:	409a      	lsls	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b05      	cmp	r3, #5
 8003338:	d136      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0216 	bic.w	r2, r2, #22
 8003348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <HAL_DMA_IRQHandler+0x1da>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0208 	bic.w	r2, r2, #8
 8003378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	223f      	movs	r2, #63	; 0x3f
 8003380:	409a      	lsls	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339a:	2b00      	cmp	r3, #0
 800339c:	d07e      	beq.n	800349c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
        }
        return;
 80033a6:	e079      	b.n	800349c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01d      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10d      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d031      	beq.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
 80033d4:	e02c      	b.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
 80033d6:	bf00      	nop
 80033d8:	20000008 	.word	0x20000008
 80033dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
 80033f0:	e01e      	b.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10f      	bne.n	8003420 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0210 	bic.w	r2, r2, #16
 800340e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	2b00      	cmp	r3, #0
 8003436:	d032      	beq.n	800349e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d022      	beq.n	800348a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2205      	movs	r2, #5
 8003448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	3301      	adds	r3, #1
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	429a      	cmp	r2, r3
 8003466:	d307      	bcc.n	8003478 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f2      	bne.n	800345c <HAL_DMA_IRQHandler+0x2cc>
 8003476:	e000      	b.n	800347a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003478:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
 800349a:	e000      	b.n	800349e <HAL_DMA_IRQHandler+0x30e>
        return;
 800349c:	bf00      	nop
    }
  }
}
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d108      	bne.n	80034e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034e2:	e007      	b.n	80034f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3b10      	subs	r3, #16
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <DMA_CalcBaseAndBitshift+0x64>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800351a:	4a13      	ldr	r2, [pc, #76]	; (8003568 <DMA_CalcBaseAndBitshift+0x68>)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d909      	bls.n	8003542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003536:	f023 0303 	bic.w	r3, r3, #3
 800353a:	1d1a      	adds	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	659a      	str	r2, [r3, #88]	; 0x58
 8003540:	e007      	b.n	8003552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800354a:	f023 0303 	bic.w	r3, r3, #3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	aaaaaaab 	.word	0xaaaaaaab
 8003568:	08007930 	.word	0x08007930

0800356c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11f      	bne.n	80035c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d856      	bhi.n	800363a <DMA_CheckFifoParam+0xce>
 800358c:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <DMA_CheckFifoParam+0x28>)
 800358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003592:	bf00      	nop
 8003594:	080035a5 	.word	0x080035a5
 8003598:	080035b7 	.word	0x080035b7
 800359c:	080035a5 	.word	0x080035a5
 80035a0:	0800363b 	.word	0x0800363b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d046      	beq.n	800363e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b4:	e043      	b.n	800363e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035be:	d140      	bne.n	8003642 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c4:	e03d      	b.n	8003642 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ce:	d121      	bne.n	8003614 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d837      	bhi.n	8003646 <DMA_CheckFifoParam+0xda>
 80035d6:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <DMA_CheckFifoParam+0x70>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	080035ed 	.word	0x080035ed
 80035e0:	080035f3 	.word	0x080035f3
 80035e4:	080035ed 	.word	0x080035ed
 80035e8:	08003605 	.word	0x08003605
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      break;
 80035f0:	e030      	b.n	8003654 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d025      	beq.n	800364a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003602:	e022      	b.n	800364a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800360c:	d11f      	bne.n	800364e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003612:	e01c      	b.n	800364e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d903      	bls.n	8003622 <DMA_CheckFifoParam+0xb6>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d003      	beq.n	8003628 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003620:	e018      	b.n	8003654 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      break;
 8003626:	e015      	b.n	8003654 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      break;
 8003638:	e00b      	b.n	8003652 <DMA_CheckFifoParam+0xe6>
      break;
 800363a:	bf00      	nop
 800363c:	e00a      	b.n	8003654 <DMA_CheckFifoParam+0xe8>
      break;
 800363e:	bf00      	nop
 8003640:	e008      	b.n	8003654 <DMA_CheckFifoParam+0xe8>
      break;
 8003642:	bf00      	nop
 8003644:	e006      	b.n	8003654 <DMA_CheckFifoParam+0xe8>
      break;
 8003646:	bf00      	nop
 8003648:	e004      	b.n	8003654 <DMA_CheckFifoParam+0xe8>
      break;
 800364a:	bf00      	nop
 800364c:	e002      	b.n	8003654 <DMA_CheckFifoParam+0xe8>
      break;   
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <DMA_CheckFifoParam+0xe8>
      break;
 8003652:	bf00      	nop
    }
  } 
  
  return status; 
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop

08003664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	e16b      	b.n	8003958 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003680:	2201      	movs	r2, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	f040 815a 	bne.w	8003952 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d005      	beq.n	80036b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d130      	bne.n	8003718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2203      	movs	r2, #3
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ec:	2201      	movs	r2, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 0201 	and.w	r2, r3, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b03      	cmp	r3, #3
 8003722:	d017      	beq.n	8003754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d123      	bne.n	80037a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	08da      	lsrs	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3208      	adds	r2, #8
 8003768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	220f      	movs	r2, #15
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	08da      	lsrs	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3208      	adds	r2, #8
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0203 	and.w	r2, r3, #3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80b4 	beq.w	8003952 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b60      	ldr	r3, [pc, #384]	; (8003970 <HAL_GPIO_Init+0x30c>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a5f      	ldr	r2, [pc, #380]	; (8003970 <HAL_GPIO_Init+0x30c>)
 80037f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b5d      	ldr	r3, [pc, #372]	; (8003970 <HAL_GPIO_Init+0x30c>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003806:	4a5b      	ldr	r2, [pc, #364]	; (8003974 <HAL_GPIO_Init+0x310>)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3302      	adds	r3, #2
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	220f      	movs	r2, #15
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_GPIO_Init+0x314>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d02b      	beq.n	800388a <HAL_GPIO_Init+0x226>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a51      	ldr	r2, [pc, #324]	; (800397c <HAL_GPIO_Init+0x318>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d025      	beq.n	8003886 <HAL_GPIO_Init+0x222>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a50      	ldr	r2, [pc, #320]	; (8003980 <HAL_GPIO_Init+0x31c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01f      	beq.n	8003882 <HAL_GPIO_Init+0x21e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4f      	ldr	r2, [pc, #316]	; (8003984 <HAL_GPIO_Init+0x320>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d019      	beq.n	800387e <HAL_GPIO_Init+0x21a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4e      	ldr	r2, [pc, #312]	; (8003988 <HAL_GPIO_Init+0x324>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_GPIO_Init+0x216>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4d      	ldr	r2, [pc, #308]	; (800398c <HAL_GPIO_Init+0x328>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00d      	beq.n	8003876 <HAL_GPIO_Init+0x212>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4c      	ldr	r2, [pc, #304]	; (8003990 <HAL_GPIO_Init+0x32c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <HAL_GPIO_Init+0x20e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4b      	ldr	r2, [pc, #300]	; (8003994 <HAL_GPIO_Init+0x330>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_GPIO_Init+0x20a>
 800386a:	2307      	movs	r3, #7
 800386c:	e00e      	b.n	800388c <HAL_GPIO_Init+0x228>
 800386e:	2308      	movs	r3, #8
 8003870:	e00c      	b.n	800388c <HAL_GPIO_Init+0x228>
 8003872:	2306      	movs	r3, #6
 8003874:	e00a      	b.n	800388c <HAL_GPIO_Init+0x228>
 8003876:	2305      	movs	r3, #5
 8003878:	e008      	b.n	800388c <HAL_GPIO_Init+0x228>
 800387a:	2304      	movs	r3, #4
 800387c:	e006      	b.n	800388c <HAL_GPIO_Init+0x228>
 800387e:	2303      	movs	r3, #3
 8003880:	e004      	b.n	800388c <HAL_GPIO_Init+0x228>
 8003882:	2302      	movs	r3, #2
 8003884:	e002      	b.n	800388c <HAL_GPIO_Init+0x228>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_GPIO_Init+0x228>
 800388a:	2300      	movs	r3, #0
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	f002 0203 	and.w	r2, r2, #3
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	4093      	lsls	r3, r2
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800389c:	4935      	ldr	r1, [pc, #212]	; (8003974 <HAL_GPIO_Init+0x310>)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	3302      	adds	r3, #2
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038aa:	4b3b      	ldr	r3, [pc, #236]	; (8003998 <HAL_GPIO_Init+0x334>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ce:	4a32      	ldr	r2, [pc, #200]	; (8003998 <HAL_GPIO_Init+0x334>)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038d4:	4b30      	ldr	r3, [pc, #192]	; (8003998 <HAL_GPIO_Init+0x334>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f8:	4a27      	ldr	r2, [pc, #156]	; (8003998 <HAL_GPIO_Init+0x334>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038fe:	4b26      	ldr	r3, [pc, #152]	; (8003998 <HAL_GPIO_Init+0x334>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003922:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <HAL_GPIO_Init+0x334>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003928:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <HAL_GPIO_Init+0x334>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800394c:	4a12      	ldr	r2, [pc, #72]	; (8003998 <HAL_GPIO_Init+0x334>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	f67f ae90 	bls.w	8003680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40013800 	.word	0x40013800
 8003978:	40020000 	.word	0x40020000
 800397c:	40020400 	.word	0x40020400
 8003980:	40020800 	.word	0x40020800
 8003984:	40020c00 	.word	0x40020c00
 8003988:	40021000 	.word	0x40021000
 800398c:	40021400 	.word	0x40021400
 8003990:	40021800 	.word	0x40021800
 8003994:	40021c00 	.word	0x40021c00
 8003998:	40013c00 	.word	0x40013c00

0800399c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e267      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d075      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ba:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d00c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c6:	4b85      	ldr	r3, [pc, #532]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d112      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4b82      	ldr	r3, [pc, #520]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039de:	d10b      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4b7e      	ldr	r3, [pc, #504]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05b      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x108>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d157      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e242      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x74>
 8003a02:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a75      	ldr	r2, [pc, #468]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e01d      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x98>
 8003a1a:	4b70      	ldr	r3, [pc, #448]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6f      	ldr	r2, [pc, #444]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b6d      	ldr	r3, [pc, #436]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6c      	ldr	r2, [pc, #432]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a34:	4b69      	ldr	r3, [pc, #420]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a68      	ldr	r2, [pc, #416]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b66      	ldr	r3, [pc, #408]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a65      	ldr	r2, [pc, #404]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7ff f84c 	bl	8002af0 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7ff f848 	bl	8002af0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e207      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0xc0>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7ff f838 	bl	8002af0 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7ff f834 	bl	8002af0 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e1f3      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0xe8>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d063      	beq.n	8003b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d11c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_RCC_OscConfig+0x152>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1c7      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4937      	ldr	r1, [pc, #220]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	e03a      	b.n	8003b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0c:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <HAL_RCC_OscConfig+0x244>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fe ffed 	bl	8002af0 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fe ffe9 	bl	8002af0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e1a8      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4925      	ldr	r1, [pc, #148]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]
 8003b4c:	e015      	b.n	8003b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <HAL_RCC_OscConfig+0x244>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe ffcc 	bl	8002af0 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fe ffc8 	bl	8002af0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e187      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d036      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_RCC_OscConfig+0x248>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe ffac 	bl	8002af0 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fe ffa8 	bl	8002af0 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e167      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x200>
 8003bba:	e01b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_OscConfig+0x248>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe ff95 	bl	8002af0 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	e00e      	b.n	8003be8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bca:	f7fe ff91 	bl	8002af0 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d907      	bls.n	8003be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e150      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	42470000 	.word	0x42470000
 8003be4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	4b88      	ldr	r3, [pc, #544]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ea      	bne.n	8003bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8097 	beq.w	8003d30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b81      	ldr	r3, [pc, #516]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	4b7d      	ldr	r3, [pc, #500]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a7c      	ldr	r2, [pc, #496]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
 8003c22:	4b7a      	ldr	r3, [pc, #488]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c32:	4b77      	ldr	r3, [pc, #476]	; (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3e:	4b74      	ldr	r3, [pc, #464]	; (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a73      	ldr	r2, [pc, #460]	; (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe ff51 	bl	8002af0 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fe ff4d 	bl	8002af0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e10c      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x2ea>
 8003c78:	4b64      	ldr	r3, [pc, #400]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a63      	ldr	r2, [pc, #396]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
 8003c84:	e01c      	b.n	8003cc0 <HAL_RCC_OscConfig+0x324>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x30c>
 8003c8e:	4b5f      	ldr	r3, [pc, #380]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a5e      	ldr	r2, [pc, #376]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x324>
 8003ca8:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a57      	ldr	r2, [pc, #348]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	4b55      	ldr	r3, [pc, #340]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a54      	ldr	r2, [pc, #336]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 0304 	bic.w	r3, r3, #4
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fe ff12 	bl	8002af0 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd0:	f7fe ff0e 	bl	8002af0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0cb      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0ee      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x334>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fe fefc 	bl	8002af0 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fe fef8 	bl	8002af0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0b5      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	4b3e      	ldr	r3, [pc, #248]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ee      	bne.n	8003cfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	4a38      	ldr	r2, [pc, #224]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80a1 	beq.w	8003e7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3a:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d05c      	beq.n	8003e00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d141      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_RCC_OscConfig+0x478>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fe fecc 	bl	8002af0 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fe fec8 	bl	8002af0 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e087      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	019b      	lsls	r3, r3, #6
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	3b01      	subs	r3, #1
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	061b      	lsls	r3, r3, #24
 8003d9e:	491b      	ldr	r1, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCC_OscConfig+0x478>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fe fea1 	bl	8002af0 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fe fe9d 	bl	8002af0 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e05c      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x416>
 8003dd0:	e054      	b.n	8003e7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_RCC_OscConfig+0x478>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fe8a 	bl	8002af0 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fe fe86 	bl	8002af0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e045      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x444>
 8003dfe:	e03d      	b.n	8003e7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e038      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40007000 	.word	0x40007000
 8003e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x4ec>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d028      	beq.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d121      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d11a      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d111      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800

08003e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0cc      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b68      	ldr	r3, [pc, #416]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d90c      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0b8      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a58      	ldr	r2, [pc, #352]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef8:	4b53      	ldr	r3, [pc, #332]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a52      	ldr	r2, [pc, #328]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f04:	4b50      	ldr	r3, [pc, #320]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	494d      	ldr	r1, [pc, #308]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d044      	beq.n	8003fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d119      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d003      	beq.n	8003f4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	4b3f      	ldr	r3, [pc, #252]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e06f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e067      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6a:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f023 0203 	bic.w	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4934      	ldr	r1, [pc, #208]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f7c:	f7fe fdb8 	bl	8002af0 <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f84:	f7fe fdb4 	bl	8002af0 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e04f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 020c 	and.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d1eb      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d20c      	bcs.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e032      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4916      	ldr	r1, [pc, #88]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	490e      	ldr	r1, [pc, #56]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004012:	f000 f821 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8004016:	4602      	mov	r2, r0
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	490a      	ldr	r1, [pc, #40]	; (800404c <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	5ccb      	ldrb	r3, [r1, r3]
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fd18 	bl	8002a68 <HAL_InitTick>

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40023c00 	.word	0x40023c00
 8004048:	40023800 	.word	0x40023800
 800404c:	08007818 	.word	0x08007818
 8004050:	20000008 	.word	0x20000008
 8004054:	20000014 	.word	0x20000014

08004058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800405c:	b090      	sub	sp, #64	; 0x40
 800405e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
 8004064:	2300      	movs	r3, #0
 8004066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004068:	2300      	movs	r3, #0
 800406a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b08      	cmp	r3, #8
 800407a:	d00d      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x40>
 800407c:	2b08      	cmp	r3, #8
 800407e:	f200 80a1 	bhi.w	80041c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x34>
 8004086:	2b04      	cmp	r3, #4
 8004088:	d003      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0x3a>
 800408a:	e09b      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_RCC_GetSysClockFreq+0x184>)
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004090:	e09b      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004092:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004096:	e098      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004098:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a2:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d028      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	2200      	movs	r2, #0
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	627a      	str	r2, [r7, #36]	; 0x24
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040c0:	2100      	movs	r1, #0
 80040c2:	4b47      	ldr	r3, [pc, #284]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c4:	fb03 f201 	mul.w	r2, r3, r1
 80040c8:	2300      	movs	r3, #0
 80040ca:	fb00 f303 	mul.w	r3, r0, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	4a43      	ldr	r2, [pc, #268]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80040d2:	fba0 1202 	umull	r1, r2, r0, r2
 80040d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d8:	460a      	mov	r2, r1
 80040da:	62ba      	str	r2, [r7, #40]	; 0x28
 80040dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040de:	4413      	add	r3, r2
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e4:	2200      	movs	r2, #0
 80040e6:	61bb      	str	r3, [r7, #24]
 80040e8:	61fa      	str	r2, [r7, #28]
 80040ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040f2:	f7fc f8c5 	bl	8000280 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4613      	mov	r3, r2
 80040fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040fe:	e053      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004100:	4b35      	ldr	r3, [pc, #212]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	099b      	lsrs	r3, r3, #6
 8004106:	2200      	movs	r2, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	617a      	str	r2, [r7, #20]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004112:	f04f 0b00 	mov.w	fp, #0
 8004116:	4652      	mov	r2, sl
 8004118:	465b      	mov	r3, fp
 800411a:	f04f 0000 	mov.w	r0, #0
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	0159      	lsls	r1, r3, #5
 8004124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004128:	0150      	lsls	r0, r2, #5
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	ebb2 080a 	subs.w	r8, r2, sl
 8004132:	eb63 090b 	sbc.w	r9, r3, fp
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004142:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004146:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800414a:	ebb2 0408 	subs.w	r4, r2, r8
 800414e:	eb63 0509 	sbc.w	r5, r3, r9
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	00eb      	lsls	r3, r5, #3
 800415c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004160:	00e2      	lsls	r2, r4, #3
 8004162:	4614      	mov	r4, r2
 8004164:	461d      	mov	r5, r3
 8004166:	eb14 030a 	adds.w	r3, r4, sl
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	eb45 030b 	adc.w	r3, r5, fp
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800417e:	4629      	mov	r1, r5
 8004180:	028b      	lsls	r3, r1, #10
 8004182:	4621      	mov	r1, r4
 8004184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004188:	4621      	mov	r1, r4
 800418a:	028a      	lsls	r2, r1, #10
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004192:	2200      	movs	r2, #0
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	60fa      	str	r2, [r7, #12]
 8004198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800419c:	f7fc f870 	bl	8000280 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4613      	mov	r3, r2
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	3301      	adds	r3, #1
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041c2:	e002      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_GetSysClockFreq+0x184>)
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3740      	adds	r7, #64	; 0x40
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	00f42400 	.word	0x00f42400
 80041e0:	017d7840 	.word	0x017d7840

080041e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000008 	.word	0x20000008

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004200:	f7ff fff0 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0a9b      	lsrs	r3, r3, #10
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4903      	ldr	r1, [pc, #12]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40023800 	.word	0x40023800
 8004220:	08007828 	.word	0x08007828

08004224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004228:	f7ff ffdc 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	0b5b      	lsrs	r3, r3, #13
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4903      	ldr	r1, [pc, #12]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40023800 	.word	0x40023800
 8004248:	08007828 	.word	0x08007828

0800424c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e041      	b.n	80042e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fcda 	bl	8001c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f000 feca 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d001      	beq.n	8004304 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e046      	b.n	8004392 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <HAL_TIM_Base_Start+0xb4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d022      	beq.n	800435c <HAL_TIM_Base_Start+0x70>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431e:	d01d      	beq.n	800435c <HAL_TIM_Base_Start+0x70>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <HAL_TIM_Base_Start+0xb8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d018      	beq.n	800435c <HAL_TIM_Base_Start+0x70>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <HAL_TIM_Base_Start+0xbc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <HAL_TIM_Base_Start+0x70>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <HAL_TIM_Base_Start+0xc0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00e      	beq.n	800435c <HAL_TIM_Base_Start+0x70>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <HAL_TIM_Base_Start+0xc4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_TIM_Base_Start+0x70>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <HAL_TIM_Base_Start+0xc8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_TIM_Base_Start+0x70>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_TIM_Base_Start+0xcc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d111      	bne.n	8004380 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b06      	cmp	r3, #6
 800436c:	d010      	beq.n	8004390 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0201 	orr.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437e:	e007      	b.n	8004390 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40000800 	.word	0x40000800
 80043ac:	40000c00 	.word	0x40000c00
 80043b0:	40010400 	.word	0x40010400
 80043b4:	40014000 	.word	0x40014000
 80043b8:	40001800 	.word	0x40001800

080043bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e041      	b.n	8004452 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f839 	bl	800445a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f000 fe12 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d109      	bne.n	8004494 <HAL_TIM_PWM_Start+0x24>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e022      	b.n	80044da <HAL_TIM_PWM_Start+0x6a>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d109      	bne.n	80044ae <HAL_TIM_PWM_Start+0x3e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	bf14      	ite	ne
 80044a6:	2301      	movne	r3, #1
 80044a8:	2300      	moveq	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	e015      	b.n	80044da <HAL_TIM_PWM_Start+0x6a>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d109      	bne.n	80044c8 <HAL_TIM_PWM_Start+0x58>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e008      	b.n	80044da <HAL_TIM_PWM_Start+0x6a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e07c      	b.n	80045dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_PWM_Start+0x82>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f0:	e013      	b.n	800451a <HAL_TIM_PWM_Start+0xaa>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_PWM_Start+0x92>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004500:	e00b      	b.n	800451a <HAL_TIM_PWM_Start+0xaa>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d104      	bne.n	8004512 <HAL_TIM_PWM_Start+0xa2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004510:	e003      	b.n	800451a <HAL_TIM_PWM_Start+0xaa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f001 f992 	bl	800584c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2d      	ldr	r2, [pc, #180]	; (80045e4 <HAL_TIM_PWM_Start+0x174>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_TIM_PWM_Start+0xcc>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2c      	ldr	r2, [pc, #176]	; (80045e8 <HAL_TIM_PWM_Start+0x178>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d101      	bne.n	8004540 <HAL_TIM_PWM_Start+0xd0>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <HAL_TIM_PWM_Start+0xd2>
 8004540:	2300      	movs	r3, #0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004554:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a22      	ldr	r2, [pc, #136]	; (80045e4 <HAL_TIM_PWM_Start+0x174>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d022      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x136>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d01d      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x136>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_TIM_PWM_Start+0x17c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d018      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x136>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <HAL_TIM_PWM_Start+0x180>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x136>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <HAL_TIM_PWM_Start+0x184>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00e      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x136>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a16      	ldr	r2, [pc, #88]	; (80045e8 <HAL_TIM_PWM_Start+0x178>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x136>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_TIM_PWM_Start+0x188>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x136>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_TIM_PWM_Start+0x18c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d111      	bne.n	80045ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b06      	cmp	r3, #6
 80045b6:	d010      	beq.n	80045da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c8:	e007      	b.n	80045da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40010400 	.word	0x40010400
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40001800 	.word	0x40001800

08004600 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e041      	b.n	8004696 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f839 	bl	800469e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f000 fcf0 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_IC_Start_IT+0x1e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	e013      	b.n	80046fa <HAL_TIM_IC_Start_IT+0x46>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_IC_Start_IT+0x2e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	e00b      	b.n	80046fa <HAL_TIM_IC_Start_IT+0x46>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_IC_Start_IT+0x3e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	e003      	b.n	80046fa <HAL_TIM_IC_Start_IT+0x46>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <HAL_TIM_IC_Start_IT+0x58>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e013      	b.n	8004734 <HAL_TIM_IC_Start_IT+0x80>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b04      	cmp	r3, #4
 8004710:	d104      	bne.n	800471c <HAL_TIM_IC_Start_IT+0x68>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e00b      	b.n	8004734 <HAL_TIM_IC_Start_IT+0x80>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b08      	cmp	r3, #8
 8004720:	d104      	bne.n	800472c <HAL_TIM_IC_Start_IT+0x78>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e003      	b.n	8004734 <HAL_TIM_IC_Start_IT+0x80>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004732:	b2db      	uxtb	r3, r3
 8004734:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004736:	7bbb      	ldrb	r3, [r7, #14]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d102      	bne.n	8004742 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800473c:	7b7b      	ldrb	r3, [r7, #13]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d001      	beq.n	8004746 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0cc      	b.n	80048e0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_TIM_IC_Start_IT+0xa2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004754:	e013      	b.n	800477e <HAL_TIM_IC_Start_IT+0xca>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d104      	bne.n	8004766 <HAL_TIM_IC_Start_IT+0xb2>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004764:	e00b      	b.n	800477e <HAL_TIM_IC_Start_IT+0xca>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d104      	bne.n	8004776 <HAL_TIM_IC_Start_IT+0xc2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004774:	e003      	b.n	800477e <HAL_TIM_IC_Start_IT+0xca>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <HAL_TIM_IC_Start_IT+0xda>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800478c:	e013      	b.n	80047b6 <HAL_TIM_IC_Start_IT+0x102>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d104      	bne.n	800479e <HAL_TIM_IC_Start_IT+0xea>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800479c:	e00b      	b.n	80047b6 <HAL_TIM_IC_Start_IT+0x102>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_IC_Start_IT+0xfa>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ac:	e003      	b.n	80047b6 <HAL_TIM_IC_Start_IT+0x102>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2202      	movs	r2, #2
 80047b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	d841      	bhi.n	8004840 <HAL_TIM_IC_Start_IT+0x18c>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <HAL_TIM_IC_Start_IT+0x110>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047f9 	.word	0x080047f9
 80047c8:	08004841 	.word	0x08004841
 80047cc:	08004841 	.word	0x08004841
 80047d0:	08004841 	.word	0x08004841
 80047d4:	0800480b 	.word	0x0800480b
 80047d8:	08004841 	.word	0x08004841
 80047dc:	08004841 	.word	0x08004841
 80047e0:	08004841 	.word	0x08004841
 80047e4:	0800481d 	.word	0x0800481d
 80047e8:	08004841 	.word	0x08004841
 80047ec:	08004841 	.word	0x08004841
 80047f0:	08004841 	.word	0x08004841
 80047f4:	0800482f 	.word	0x0800482f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0202 	orr.w	r2, r2, #2
 8004806:	60da      	str	r2, [r3, #12]
      break;
 8004808:	e01d      	b.n	8004846 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0204 	orr.w	r2, r2, #4
 8004818:	60da      	str	r2, [r3, #12]
      break;
 800481a:	e014      	b.n	8004846 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0208 	orr.w	r2, r2, #8
 800482a:	60da      	str	r2, [r3, #12]
      break;
 800482c:	e00b      	b.n	8004846 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0210 	orr.w	r2, r2, #16
 800483c:	60da      	str	r2, [r3, #12]
      break;
 800483e:	e002      	b.n	8004846 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	bf00      	nop
  }

  if (status == HAL_OK)
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d148      	bne.n	80048de <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2201      	movs	r2, #1
 8004852:	6839      	ldr	r1, [r7, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fff9 	bl	800584c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <HAL_TIM_IC_Start_IT+0x234>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <HAL_TIM_IC_Start_IT+0x1f6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486c:	d01d      	beq.n	80048aa <HAL_TIM_IC_Start_IT+0x1f6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <HAL_TIM_IC_Start_IT+0x238>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <HAL_TIM_IC_Start_IT+0x1f6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_TIM_IC_Start_IT+0x23c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_TIM_IC_Start_IT+0x1f6>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_TIM_IC_Start_IT+0x240>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <HAL_TIM_IC_Start_IT+0x1f6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <HAL_TIM_IC_Start_IT+0x244>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_TIM_IC_Start_IT+0x1f6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_TIM_IC_Start_IT+0x248>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_TIM_IC_Start_IT+0x1f6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a16      	ldr	r2, [pc, #88]	; (8004900 <HAL_TIM_IC_Start_IT+0x24c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d111      	bne.n	80048ce <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d010      	beq.n	80048de <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048cc:	e007      	b.n	80048de <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80048de:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40010400 	.word	0x40010400
 80048fc:	40014000 	.word	0x40014000
 8004900:	40001800 	.word	0x40001800

08004904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d122      	bne.n	8004960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b02      	cmp	r3, #2
 8004926:	d11b      	bne.n	8004960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0202 	mvn.w	r2, #2
 8004930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc f8e4 	bl	8000b14 <HAL_TIM_IC_CaptureCallback>
 800494c:	e005      	b.n	800495a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fb4a 	bl	8004fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fb51 	bl	8004ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b04      	cmp	r3, #4
 800496c:	d122      	bne.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d11b      	bne.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0204 	mvn.w	r2, #4
 8004984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc f8ba 	bl	8000b14 <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fb20 	bl	8004fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fb27 	bl	8004ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d122      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d11b      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f06f 0208 	mvn.w	r2, #8
 80049d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2204      	movs	r2, #4
 80049de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc f890 	bl	8000b14 <HAL_TIM_IC_CaptureCallback>
 80049f4:	e005      	b.n	8004a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 faf6 	bl	8004fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fafd 	bl	8004ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b10      	cmp	r3, #16
 8004a14:	d122      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d11b      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0210 	mvn.w	r2, #16
 8004a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2208      	movs	r2, #8
 8004a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fc f866 	bl	8000b14 <HAL_TIM_IC_CaptureCallback>
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 facc 	bl	8004fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fad3 	bl	8004ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0201 	mvn.w	r2, #1
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fd fe86 	bl	8002794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d10e      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	2b80      	cmp	r3, #128	; 0x80
 8004aa2:	d107      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 ff78 	bl	80059a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa98 	bl	8005010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d10e      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d107      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0220 	mvn.w	r2, #32
 8004b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 ff42 	bl	8005990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e088      	b.n	8004c44 <HAL_TIM_IC_ConfigChannel+0x130>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6819      	ldr	r1, [r3, #0]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f000 fcb8 	bl	80054c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 020c 	bic.w	r2, r2, #12
 8004b62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6999      	ldr	r1, [r3, #24]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	619a      	str	r2, [r3, #24]
 8004b76:	e060      	b.n	8004c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f000 fd3c 	bl	800560a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ba0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6999      	ldr	r1, [r3, #24]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	619a      	str	r2, [r3, #24]
 8004bb6:	e040      	b.n	8004c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f000 fd89 	bl	80056e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 020c 	bic.w	r2, r2, #12
 8004be0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69d9      	ldr	r1, [r3, #28]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	61da      	str	r2, [r3, #28]
 8004bf4:	e021      	b.n	8004c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b0c      	cmp	r3, #12
 8004bfa:	d11c      	bne.n	8004c36 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f000 fda6 	bl	800575c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c1e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69d9      	ldr	r1, [r3, #28]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	61da      	str	r2, [r3, #28]
 8004c34:	e001      	b.n	8004c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e0ae      	b.n	8004dc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	f200 809f 	bhi.w	8004db8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c7a:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004cb5 	.word	0x08004cb5
 8004c84:	08004db9 	.word	0x08004db9
 8004c88:	08004db9 	.word	0x08004db9
 8004c8c:	08004db9 	.word	0x08004db9
 8004c90:	08004cf5 	.word	0x08004cf5
 8004c94:	08004db9 	.word	0x08004db9
 8004c98:	08004db9 	.word	0x08004db9
 8004c9c:	08004db9 	.word	0x08004db9
 8004ca0:	08004d37 	.word	0x08004d37
 8004ca4:	08004db9 	.word	0x08004db9
 8004ca8:	08004db9 	.word	0x08004db9
 8004cac:	08004db9 	.word	0x08004db9
 8004cb0:	08004d77 	.word	0x08004d77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fa52 	bl	8005164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0208 	orr.w	r2, r2, #8
 8004cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0204 	bic.w	r2, r2, #4
 8004cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6999      	ldr	r1, [r3, #24]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	619a      	str	r2, [r3, #24]
      break;
 8004cf2:	e064      	b.n	8004dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 faa2 	bl	8005244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6999      	ldr	r1, [r3, #24]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	021a      	lsls	r2, r3, #8
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	619a      	str	r2, [r3, #24]
      break;
 8004d34:	e043      	b.n	8004dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 faf7 	bl	8005330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0208 	orr.w	r2, r2, #8
 8004d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0204 	bic.w	r2, r2, #4
 8004d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69d9      	ldr	r1, [r3, #28]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	61da      	str	r2, [r3, #28]
      break;
 8004d74:	e023      	b.n	8004dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fb4b 	bl	8005418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69d9      	ldr	r1, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	021a      	lsls	r2, r3, #8
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	61da      	str	r2, [r3, #28]
      break;
 8004db6:	e002      	b.n	8004dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
      break;
 8004dbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_TIM_ConfigClockSource+0x1c>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e0b4      	b.n	8004f56 <HAL_TIM_ConfigClockSource+0x186>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e24:	d03e      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2a:	f200 8087 	bhi.w	8004f3c <HAL_TIM_ConfigClockSource+0x16c>
 8004e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e32:	f000 8086 	beq.w	8004f42 <HAL_TIM_ConfigClockSource+0x172>
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3a:	d87f      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x16c>
 8004e3c:	2b70      	cmp	r3, #112	; 0x70
 8004e3e:	d01a      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0xa6>
 8004e40:	2b70      	cmp	r3, #112	; 0x70
 8004e42:	d87b      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b60      	cmp	r3, #96	; 0x60
 8004e46:	d050      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x11a>
 8004e48:	2b60      	cmp	r3, #96	; 0x60
 8004e4a:	d877      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b50      	cmp	r3, #80	; 0x50
 8004e4e:	d03c      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0xfa>
 8004e50:	2b50      	cmp	r3, #80	; 0x50
 8004e52:	d873      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d058      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x13a>
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d86f      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b30      	cmp	r3, #48	; 0x30
 8004e5e:	d064      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x15a>
 8004e60:	2b30      	cmp	r3, #48	; 0x30
 8004e62:	d86b      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d060      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x15a>
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d867      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d05c      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x15a>
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d05a      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x15a>
 8004e74:	e062      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6899      	ldr	r1, [r3, #8]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f000 fcc1 	bl	800580c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	609a      	str	r2, [r3, #8]
      break;
 8004ea2:	e04f      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6899      	ldr	r1, [r3, #8]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f000 fcaa 	bl	800580c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec6:	609a      	str	r2, [r3, #8]
      break;
 8004ec8:	e03c      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6859      	ldr	r1, [r3, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f000 fb68 	bl	80055ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2150      	movs	r1, #80	; 0x50
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fc77 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8004ee8:	e02c      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 fbc4 	bl	8005684 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2160      	movs	r1, #96	; 0x60
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fc67 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8004f08:	e01c      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 fb48 	bl	80055ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2140      	movs	r1, #64	; 0x40
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fc57 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8004f28:	e00c      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f000 fc4e 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8004f3a:	e003      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f40:	e000      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	d831      	bhi.n	8004fd8 <HAL_TIM_ReadCapturedValue+0x78>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fb1 	.word	0x08004fb1
 8004f80:	08004fd9 	.word	0x08004fd9
 8004f84:	08004fd9 	.word	0x08004fd9
 8004f88:	08004fd9 	.word	0x08004fd9
 8004f8c:	08004fbb 	.word	0x08004fbb
 8004f90:	08004fd9 	.word	0x08004fd9
 8004f94:	08004fd9 	.word	0x08004fd9
 8004f98:	08004fd9 	.word	0x08004fd9
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fd9 	.word	0x08004fd9
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08004fd9 	.word	0x08004fd9
 8004fac:	08004fcf 	.word	0x08004fcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	60fb      	str	r3, [r7, #12]

      break;
 8004fb8:	e00f      	b.n	8004fda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	60fb      	str	r3, [r7, #12]

      break;
 8004fc2:	e00a      	b.n	8004fda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fca:	60fb      	str	r3, [r7, #12]

      break;
 8004fcc:	e005      	b.n	8004fda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	60fb      	str	r3, [r7, #12]

      break;
 8004fd6:	e000      	b.n	8004fda <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004fd8:	bf00      	nop
  }

  return tmpreg;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a40      	ldr	r2, [pc, #256]	; (8005138 <TIM_Base_SetConfig+0x114>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d00f      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3d      	ldr	r2, [pc, #244]	; (800513c <TIM_Base_SetConfig+0x118>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00b      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a3c      	ldr	r2, [pc, #240]	; (8005140 <TIM_Base_SetConfig+0x11c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a3b      	ldr	r2, [pc, #236]	; (8005144 <TIM_Base_SetConfig+0x120>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a3a      	ldr	r2, [pc, #232]	; (8005148 <TIM_Base_SetConfig+0x124>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d108      	bne.n	8005076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2f      	ldr	r2, [pc, #188]	; (8005138 <TIM_Base_SetConfig+0x114>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d02b      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d027      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2c      	ldr	r2, [pc, #176]	; (800513c <TIM_Base_SetConfig+0x118>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d023      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <TIM_Base_SetConfig+0x11c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01f      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2a      	ldr	r2, [pc, #168]	; (8005144 <TIM_Base_SetConfig+0x120>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01b      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a29      	ldr	r2, [pc, #164]	; (8005148 <TIM_Base_SetConfig+0x124>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d017      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a28      	ldr	r2, [pc, #160]	; (800514c <TIM_Base_SetConfig+0x128>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a27      	ldr	r2, [pc, #156]	; (8005150 <TIM_Base_SetConfig+0x12c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00f      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a26      	ldr	r2, [pc, #152]	; (8005154 <TIM_Base_SetConfig+0x130>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00b      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a25      	ldr	r2, [pc, #148]	; (8005158 <TIM_Base_SetConfig+0x134>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d007      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a24      	ldr	r2, [pc, #144]	; (800515c <TIM_Base_SetConfig+0x138>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a23      	ldr	r2, [pc, #140]	; (8005160 <TIM_Base_SetConfig+0x13c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d108      	bne.n	80050e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <TIM_Base_SetConfig+0x114>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_Base_SetConfig+0xf8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0c      	ldr	r2, [pc, #48]	; (8005148 <TIM_Base_SetConfig+0x124>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d103      	bne.n	8005124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	615a      	str	r2, [r3, #20]
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40010400 	.word	0x40010400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800
 8005158:	40001800 	.word	0x40001800
 800515c:	40001c00 	.word	0x40001c00
 8005160:	40002000 	.word	0x40002000

08005164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f023 0201 	bic.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f023 0302 	bic.w	r3, r3, #2
 80051ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a20      	ldr	r2, [pc, #128]	; (800523c <TIM_OC1_SetConfig+0xd8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_OC1_SetConfig+0x64>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <TIM_OC1_SetConfig+0xdc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10c      	bne.n	80051e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0308 	bic.w	r3, r3, #8
 80051ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 0304 	bic.w	r3, r3, #4
 80051e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a15      	ldr	r2, [pc, #84]	; (800523c <TIM_OC1_SetConfig+0xd8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_OC1_SetConfig+0x8e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <TIM_OC1_SetConfig+0xdc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d111      	bne.n	8005216 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	621a      	str	r2, [r3, #32]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40010000 	.word	0x40010000
 8005240:	40010400 	.word	0x40010400

08005244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0210 	bic.w	r2, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 0320 	bic.w	r3, r3, #32
 800528e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a22      	ldr	r2, [pc, #136]	; (8005328 <TIM_OC2_SetConfig+0xe4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC2_SetConfig+0x68>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a21      	ldr	r2, [pc, #132]	; (800532c <TIM_OC2_SetConfig+0xe8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10d      	bne.n	80052c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a17      	ldr	r2, [pc, #92]	; (8005328 <TIM_OC2_SetConfig+0xe4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_OC2_SetConfig+0x94>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <TIM_OC2_SetConfig+0xe8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d113      	bne.n	8005300 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40010400 	.word	0x40010400

08005330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a21      	ldr	r2, [pc, #132]	; (8005410 <TIM_OC3_SetConfig+0xe0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_OC3_SetConfig+0x66>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a20      	ldr	r2, [pc, #128]	; (8005414 <TIM_OC3_SetConfig+0xe4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10d      	bne.n	80053b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800539c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a16      	ldr	r2, [pc, #88]	; (8005410 <TIM_OC3_SetConfig+0xe0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d003      	beq.n	80053c2 <TIM_OC3_SetConfig+0x92>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a15      	ldr	r2, [pc, #84]	; (8005414 <TIM_OC3_SetConfig+0xe4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d113      	bne.n	80053ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	621a      	str	r2, [r3, #32]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40010000 	.word	0x40010000
 8005414:	40010400 	.word	0x40010400

08005418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	031b      	lsls	r3, r3, #12
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a12      	ldr	r2, [pc, #72]	; (80054bc <TIM_OC4_SetConfig+0xa4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_OC4_SetConfig+0x68>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a11      	ldr	r2, [pc, #68]	; (80054c0 <TIM_OC4_SetConfig+0xa8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d109      	bne.n	8005494 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	019b      	lsls	r3, r3, #6
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40010400 	.word	0x40010400

080054c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f023 0201 	bic.w	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a28      	ldr	r2, [pc, #160]	; (8005590 <TIM_TI1_SetConfig+0xcc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01b      	beq.n	800552a <TIM_TI1_SetConfig+0x66>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f8:	d017      	beq.n	800552a <TIM_TI1_SetConfig+0x66>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <TIM_TI1_SetConfig+0xd0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <TIM_TI1_SetConfig+0x66>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a24      	ldr	r2, [pc, #144]	; (8005598 <TIM_TI1_SetConfig+0xd4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00f      	beq.n	800552a <TIM_TI1_SetConfig+0x66>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a23      	ldr	r2, [pc, #140]	; (800559c <TIM_TI1_SetConfig+0xd8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_TI1_SetConfig+0x66>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a22      	ldr	r2, [pc, #136]	; (80055a0 <TIM_TI1_SetConfig+0xdc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_TI1_SetConfig+0x66>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <TIM_TI1_SetConfig+0xe0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_TI1_SetConfig+0x66>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4a20      	ldr	r2, [pc, #128]	; (80055a8 <TIM_TI1_SetConfig+0xe4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d101      	bne.n	800552e <TIM_TI1_SetConfig+0x6a>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <TIM_TI1_SetConfig+0x6c>
 800552e:	2300      	movs	r3, #0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d008      	beq.n	8005546 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e003      	b.n	800554e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	b2db      	uxtb	r3, r3
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f023 030a 	bic.w	r3, r3, #10
 8005568:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f003 030a 	and.w	r3, r3, #10
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40010400 	.word	0x40010400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40001800 	.word	0x40001800

080055ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f023 030a 	bic.w	r3, r3, #10
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800560a:	b480      	push	{r7}
 800560c:	b087      	sub	sp, #28
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f023 0210 	bic.w	r2, r3, #16
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005636:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	031b      	lsls	r3, r3, #12
 800564e:	b29b      	uxth	r3, r3
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800565c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	621a      	str	r2, [r3, #32]
}
 8005678:	bf00      	nop
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f023 0210 	bic.w	r2, r3, #16
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	031b      	lsls	r3, r3, #12
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	621a      	str	r2, [r3, #32]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f023 0303 	bic.w	r3, r3, #3
 8005710:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005720:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	b2db      	uxtb	r3, r3
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005734:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	621a      	str	r2, [r3, #32]
}
 8005750:	bf00      	nop
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005788:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800579a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	031b      	lsls	r3, r3, #12
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80057ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	031b      	lsls	r3, r3, #12
 80057b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f043 0307 	orr.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	021a      	lsls	r2, r3, #8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	431a      	orrs	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	2201      	movs	r2, #1
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1a      	ldr	r2, [r3, #32]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	43db      	mvns	r3, r3
 800586e:	401a      	ands	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	431a      	orrs	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e05a      	b.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a21      	ldr	r2, [pc, #132]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d01d      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1a      	ldr	r2, [pc, #104]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a18      	ldr	r2, [pc, #96]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a15      	ldr	r2, [pc, #84]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d10c      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	4313      	orrs	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40010400 	.word	0x40010400
 8005988:	40014000 	.word	0x40014000
 800598c:	40001800 	.word	0x40001800

08005990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e03f      	b.n	8005a4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fc f98a 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2224      	movs	r2, #36	; 0x24
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 ff9b 	bl	8006938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b08a      	sub	sp, #40	; 0x28
 8005a56:	af02      	add	r7, sp, #8
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d17c      	bne.n	8005b6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_UART_Transmit+0x2c>
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e075      	b.n	8005b6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_UART_Transmit+0x3e>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e06e      	b.n	8005b6e <HAL_UART_Transmit+0x11c>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2221      	movs	r2, #33	; 0x21
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aa6:	f7fd f823 	bl	8002af0 <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	88fa      	ldrh	r2, [r7, #6]
 8005ab0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	88fa      	ldrh	r2, [r7, #6]
 8005ab6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac0:	d108      	bne.n	8005ad4 <HAL_UART_Transmit+0x82>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e003      	b.n	8005adc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ae4:	e02a      	b.n	8005b3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2200      	movs	r2, #0
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fc53 	bl	800639c <UART_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e036      	b.n	8005b6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	3302      	adds	r3, #2
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	e007      	b.n	8005b2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	781a      	ldrb	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1cf      	bne.n	8005ae6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2140      	movs	r1, #64	; 0x40
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fc23 	bl	800639c <UART_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e006      	b.n	8005b6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e000      	b.n	8005b6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b6c:	2302      	movs	r3, #2
  }
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b08c      	sub	sp, #48	; 0x30
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	4613      	mov	r3, r2
 8005b82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d152      	bne.n	8005c36 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e04b      	b.n	8005c38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e044      	b.n	8005c38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fc58 	bl	8006478 <UART_Start_Receive_DMA>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d12c      	bne.n	8005c30 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d125      	bne.n	8005c2a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	617b      	str	r3, [r7, #20]
   return(result);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f043 0310 	orr.w	r3, r3, #16
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c14:	627a      	str	r2, [r7, #36]	; 0x24
 8005c16:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6a39      	ldr	r1, [r7, #32]
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e5      	bne.n	8005bf4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005c28:	e002      	b.n	8005c30 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005c30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c34:	e000      	b.n	8005c38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005c36:	2302      	movs	r3, #2
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3730      	adds	r7, #48	; 0x30
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b0ba      	sub	sp, #232	; 0xe8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10f      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x66>
 8005c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fd8f 	bl	80067c2 <UART_Receive_IT>
      return;
 8005ca4:	e256      	b.n	8006154 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80de 	beq.w	8005e6c <HAL_UART_IRQHandler+0x22c>
 8005cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d106      	bne.n	8005cca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 80d1 	beq.w	8005e6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00b      	beq.n	8005cee <HAL_UART_IRQHandler+0xae>
 8005cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f043 0201 	orr.w	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <HAL_UART_IRQHandler+0xd2>
 8005cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f043 0202 	orr.w	r2, r3, #2
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_UART_IRQHandler+0xf6>
 8005d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f043 0204 	orr.w	r2, r3, #4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d011      	beq.n	8005d66 <HAL_UART_IRQHandler+0x126>
 8005d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f043 0208 	orr.w	r2, r3, #8
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 81ed 	beq.w	800614a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_UART_IRQHandler+0x14e>
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fd1a 	bl	80067c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <HAL_UART_IRQHandler+0x17a>
 8005db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d04f      	beq.n	8005e5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fc22 	bl	8006604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d141      	bne.n	8005e52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3314      	adds	r3, #20
 8005dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3314      	adds	r3, #20
 8005df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1d9      	bne.n	8005dce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d013      	beq.n	8005e4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	4a7d      	ldr	r2, [pc, #500]	; (800601c <HAL_UART_IRQHandler+0x3dc>)
 8005e28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fd f98b 	bl	800314a <HAL_DMA_Abort_IT>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d016      	beq.n	8005e68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e44:	4610      	mov	r0, r2
 8005e46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e48:	e00e      	b.n	8005e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f9a4 	bl	8006198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e50:	e00a      	b.n	8005e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f9a0 	bl	8006198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e58:	e006      	b.n	8005e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f99c 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e66:	e170      	b.n	800614a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e68:	bf00      	nop
    return;
 8005e6a:	e16e      	b.n	800614a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	f040 814a 	bne.w	800610a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7a:	f003 0310 	and.w	r3, r3, #16
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 8143 	beq.w	800610a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 813c 	beq.w	800610a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e92:	2300      	movs	r3, #0
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	f040 80b4 	bne.w	8006020 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ec4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8140 	beq.w	800614e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	f080 8139 	bcs.w	800614e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ee2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eee:	f000 8088 	beq.w	8006002 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	330c      	adds	r3, #12
 8005f1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1d9      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3314      	adds	r3, #20
 8005f44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3314      	adds	r3, #20
 8005f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e1      	bne.n	8005f3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3314      	adds	r3, #20
 8005f80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3314      	adds	r3, #20
 8005f9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e3      	bne.n	8005f7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd2:	f023 0310 	bic.w	r3, r3, #16
 8005fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005fe4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fe6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e3      	bne.n	8005fc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fd f834 	bl	800306a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800600a:	b29b      	uxth	r3, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	b29b      	uxth	r3, r3
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fa fd88 	bl	8000b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006018:	e099      	b.n	800614e <HAL_UART_IRQHandler+0x50e>
 800601a:	bf00      	nop
 800601c:	080066cb 	.word	0x080066cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006028:	b29b      	uxth	r3, r3
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 808b 	beq.w	8006152 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800603c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8086 	beq.w	8006152 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800605c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800606a:	647a      	str	r2, [r7, #68]	; 0x44
 800606c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e3      	bne.n	8006046 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3314      	adds	r3, #20
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	623b      	str	r3, [r7, #32]
   return(result);
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060a2:	633a      	str	r2, [r7, #48]	; 0x30
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e3      	bne.n	800607e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0310 	bic.w	r3, r3, #16
 80060da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060e8:	61fa      	str	r2, [r7, #28]
 80060ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	69b9      	ldr	r1, [r7, #24]
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	617b      	str	r3, [r7, #20]
   return(result);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e3      	bne.n	80060c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fa fd10 	bl	8000b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006108:	e023      	b.n	8006152 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_UART_IRQHandler+0x4ea>
 8006116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fae5 	bl	80066f2 <UART_Transmit_IT>
    return;
 8006128:	e014      	b.n	8006154 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <HAL_UART_IRQHandler+0x514>
 8006136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d008      	beq.n	8006154 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fb25 	bl	8006792 <UART_EndTransmit_IT>
    return;
 8006148:	e004      	b.n	8006154 <HAL_UART_IRQHandler+0x514>
    return;
 800614a:	bf00      	nop
 800614c:	e002      	b.n	8006154 <HAL_UART_IRQHandler+0x514>
      return;
 800614e:	bf00      	nop
 8006150:	e000      	b.n	8006154 <HAL_UART_IRQHandler+0x514>
      return;
 8006152:	bf00      	nop
  }
}
 8006154:	37e8      	adds	r7, #232	; 0xe8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop

0800615c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b09c      	sub	sp, #112	; 0x70
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d172      	bne.n	80062ae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80061c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ca:	2200      	movs	r2, #0
 80061cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80061e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80061f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3314      	adds	r3, #20
 8006208:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	667b      	str	r3, [r7, #100]	; 0x64
 800621a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006222:	647a      	str	r2, [r7, #68]	; 0x44
 8006224:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3314      	adds	r3, #20
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	623b      	str	r3, [r7, #32]
   return(result);
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624c:	663b      	str	r3, [r7, #96]	; 0x60
 800624e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3314      	adds	r3, #20
 8006254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006256:	633a      	str	r2, [r7, #48]	; 0x30
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800625c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e5      	bne.n	8006236 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	2220      	movs	r2, #32
 800626e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	2b01      	cmp	r3, #1
 8006278:	d119      	bne.n	80062ae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	330c      	adds	r3, #12
 8006280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	60fb      	str	r3, [r7, #12]
   return(result);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0310 	bic.w	r3, r3, #16
 8006290:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800629a:	61fa      	str	r2, [r7, #28]
 800629c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	69b9      	ldr	r1, [r7, #24]
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	617b      	str	r3, [r7, #20]
   return(result);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e5      	bne.n	800627a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d106      	bne.n	80062c4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ba:	4619      	mov	r1, r3
 80062bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062be:	f7fa fc33 	bl	8000b28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062c2:	e002      	b.n	80062ca <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80062c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062c6:	f7ff ff53 	bl	8006170 <HAL_UART_RxCpltCallback>
}
 80062ca:	bf00      	nop
 80062cc:	3770      	adds	r7, #112	; 0x70
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d108      	bne.n	80062fa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	4619      	mov	r1, r3
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f7fa fc18 	bl	8000b28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062f8:	e002      	b.n	8006300 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff ff42 	bl	8006184 <HAL_UART_RxHalfCpltCallback>
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	2b80      	cmp	r3, #128	; 0x80
 8006326:	bf0c      	ite	eq
 8006328:	2301      	moveq	r3, #1
 800632a:	2300      	movne	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b21      	cmp	r3, #33	; 0x21
 800633a:	d108      	bne.n	800634e <UART_DMAError+0x46>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2200      	movs	r2, #0
 8006346:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006348:	68b8      	ldr	r0, [r7, #8]
 800634a:	f000 f933 	bl	80065b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	bf0c      	ite	eq
 800635c:	2301      	moveq	r3, #1
 800635e:	2300      	movne	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b22      	cmp	r3, #34	; 0x22
 800636e:	d108      	bne.n	8006382 <UART_DMAError+0x7a>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2200      	movs	r2, #0
 800637a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800637c:	68b8      	ldr	r0, [r7, #8]
 800637e:	f000 f941 	bl	8006604 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f043 0210 	orr.w	r2, r3, #16
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800638e:	68b8      	ldr	r0, [r7, #8]
 8006390:	f7ff ff02 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b090      	sub	sp, #64	; 0x40
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ac:	e050      	b.n	8006450 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d04c      	beq.n	8006450 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <UART_WaitOnFlagUntilTimeout+0x30>
 80063bc:	f7fc fb98 	bl	8002af0 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d241      	bcs.n	8006450 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	330c      	adds	r3, #12
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063ec:	637a      	str	r2, [r7, #52]	; 0x34
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e5      	bne.n	80063cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3314      	adds	r3, #20
 8006406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	613b      	str	r3, [r7, #16]
   return(result);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f023 0301 	bic.w	r3, r3, #1
 8006416:	63bb      	str	r3, [r7, #56]	; 0x38
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3314      	adds	r3, #20
 800641e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006420:	623a      	str	r2, [r7, #32]
 8006422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	69f9      	ldr	r1, [r7, #28]
 8006426:	6a3a      	ldr	r2, [r7, #32]
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	61bb      	str	r3, [r7, #24]
   return(result);
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e5      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e00f      	b.n	8006470 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4013      	ands	r3, r2
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	bf0c      	ite	eq
 8006460:	2301      	moveq	r3, #1
 8006462:	2300      	movne	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	429a      	cmp	r2, r3
 800646c:	d09f      	beq.n	80063ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3740      	adds	r7, #64	; 0x40
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b098      	sub	sp, #96	; 0x60
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2222      	movs	r2, #34	; 0x22
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	4a40      	ldr	r2, [pc, #256]	; (80065a8 <UART_Start_Receive_DMA+0x130>)
 80064a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	4a3f      	ldr	r2, [pc, #252]	; (80065ac <UART_Start_Receive_DMA+0x134>)
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	4a3e      	ldr	r2, [pc, #248]	; (80065b0 <UART_Start_Receive_DMA+0x138>)
 80064b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	2200      	movs	r2, #0
 80064be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80064c0:	f107 0308 	add.w	r3, r7, #8
 80064c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	f7fc fd6f 	bl	8002fba <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d019      	beq.n	8006536 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006518:	65bb      	str	r3, [r7, #88]	; 0x58
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006522:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006524:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006528:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e5      	bne.n	8006502 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3314      	adds	r3, #20
 800653c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	f043 0301 	orr.w	r3, r3, #1
 800654c:	657b      	str	r3, [r7, #84]	; 0x54
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3314      	adds	r3, #20
 8006554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006556:	63ba      	str	r2, [r7, #56]	; 0x38
 8006558:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800655c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e5      	bne.n	8006536 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3314      	adds	r3, #20
 8006570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	617b      	str	r3, [r7, #20]
   return(result);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006580:	653b      	str	r3, [r7, #80]	; 0x50
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3314      	adds	r3, #20
 8006588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800658a:	627a      	str	r2, [r7, #36]	; 0x24
 800658c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6a39      	ldr	r1, [r7, #32]
 8006590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	61fb      	str	r3, [r7, #28]
   return(result);
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e5      	bne.n	800656a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3760      	adds	r7, #96	; 0x60
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	080061ad 	.word	0x080061ad
 80065ac:	080062d3 	.word	0x080062d3
 80065b0:	08006309 	.word	0x08006309

080065b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b089      	sub	sp, #36	; 0x24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	61ba      	str	r2, [r7, #24]
 80065de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6979      	ldr	r1, [r7, #20]
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	613b      	str	r3, [r7, #16]
   return(result);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e5      	bne.n	80065bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80065f8:	bf00      	nop
 80065fa:	3724      	adds	r7, #36	; 0x24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b095      	sub	sp, #84	; 0x54
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	330c      	adds	r3, #12
 800662a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800662c:	643a      	str	r2, [r7, #64]	; 0x40
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e5      	bne.n	800660c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3314      	adds	r3, #20
 8006646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f023 0301 	bic.w	r3, r3, #1
 8006656:	64bb      	str	r3, [r7, #72]	; 0x48
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3314      	adds	r3, #20
 800665e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e5      	bne.n	8006640 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	2b01      	cmp	r3, #1
 800667a:	d119      	bne.n	80066b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	60bb      	str	r3, [r7, #8]
   return(result);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f023 0310 	bic.w	r3, r3, #16
 8006692:	647b      	str	r3, [r7, #68]	; 0x44
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800669c:	61ba      	str	r2, [r7, #24]
 800669e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6979      	ldr	r1, [r7, #20]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	613b      	str	r3, [r7, #16]
   return(result);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e5      	bne.n	800667c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066be:	bf00      	nop
 80066c0:	3754      	adds	r7, #84	; 0x54
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff fd57 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b21      	cmp	r3, #33	; 0x21
 8006704:	d13e      	bne.n	8006784 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670e:	d114      	bne.n	800673a <UART_Transmit_IT+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d110      	bne.n	800673a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800672c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	1c9a      	adds	r2, r3, #2
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	621a      	str	r2, [r3, #32]
 8006738:	e008      	b.n	800674c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	1c59      	adds	r1, r3, #1
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6211      	str	r1, [r2, #32]
 8006744:	781a      	ldrb	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29b      	uxth	r3, r3
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4619      	mov	r1, r3
 800675a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10f      	bne.n	8006780 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800676e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800677e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	e000      	b.n	8006786 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006784:	2302      	movs	r3, #2
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fcd2 	bl	800615c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b08c      	sub	sp, #48	; 0x30
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b22      	cmp	r3, #34	; 0x22
 80067d4:	f040 80ab 	bne.w	800692e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e0:	d117      	bne.n	8006812 <UART_Receive_IT+0x50>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d113      	bne.n	8006812 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006800:	b29a      	uxth	r2, r3
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	1c9a      	adds	r2, r3, #2
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28
 8006810:	e026      	b.n	8006860 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006824:	d007      	beq.n	8006836 <UART_Receive_IT+0x74>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <UART_Receive_IT+0x82>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	b2da      	uxtb	r2, r3
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	e008      	b.n	8006856 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006850:	b2da      	uxtb	r2, r3
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29b      	uxth	r3, r3
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4619      	mov	r1, r3
 800686e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006870:	2b00      	cmp	r3, #0
 8006872:	d15a      	bne.n	800692a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0220 	bic.w	r2, r2, #32
 8006882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d135      	bne.n	8006920 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	330c      	adds	r3, #12
 80068c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f023 0310 	bic.w	r3, r3, #16
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	330c      	adds	r3, #12
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	623a      	str	r2, [r7, #32]
 80068dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	69f9      	ldr	r1, [r7, #28]
 80068e0:	6a3a      	ldr	r2, [r7, #32]
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e5      	bne.n	80068ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d10a      	bne.n	8006912 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fa f905 	bl	8000b28 <HAL_UARTEx_RxEventCallback>
 800691e:	e002      	b.n	8006926 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff fc25 	bl	8006170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	e002      	b.n	8006930 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	e000      	b.n	8006930 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800692e:	2302      	movs	r3, #2
  }
}
 8006930:	4618      	mov	r0, r3
 8006932:	3730      	adds	r7, #48	; 0x30
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800693c:	b0c0      	sub	sp, #256	; 0x100
 800693e:	af00      	add	r7, sp, #0
 8006940:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	68d9      	ldr	r1, [r3, #12]
 8006956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	ea40 0301 	orr.w	r3, r0, r1
 8006960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	431a      	orrs	r2, r3
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	431a      	orrs	r2, r3
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006990:	f021 010c 	bic.w	r1, r1, #12
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800699e:	430b      	orrs	r3, r1
 80069a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b2:	6999      	ldr	r1, [r3, #24]
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	ea40 0301 	orr.w	r3, r0, r1
 80069be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4b8f      	ldr	r3, [pc, #572]	; (8006c04 <UART_SetConfig+0x2cc>)
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d005      	beq.n	80069d8 <UART_SetConfig+0xa0>
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b8d      	ldr	r3, [pc, #564]	; (8006c08 <UART_SetConfig+0x2d0>)
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d104      	bne.n	80069e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069d8:	f7fd fc24 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 80069dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069e0:	e003      	b.n	80069ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069e2:	f7fd fc0b 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 80069e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f4:	f040 810c 	bne.w	8006c10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	1891      	adds	r1, r2, r2
 8006a10:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a12:	415b      	adcs	r3, r3
 8006a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	eb12 0801 	adds.w	r8, r2, r1
 8006a20:	4629      	mov	r1, r5
 8006a22:	eb43 0901 	adc.w	r9, r3, r1
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a3a:	4690      	mov	r8, r2
 8006a3c:	4699      	mov	r9, r3
 8006a3e:	4623      	mov	r3, r4
 8006a40:	eb18 0303 	adds.w	r3, r8, r3
 8006a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a48:	462b      	mov	r3, r5
 8006a4a:	eb49 0303 	adc.w	r3, r9, r3
 8006a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a66:	460b      	mov	r3, r1
 8006a68:	18db      	adds	r3, r3, r3
 8006a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	eb42 0303 	adc.w	r3, r2, r3
 8006a72:	657b      	str	r3, [r7, #84]	; 0x54
 8006a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a7c:	f7f9 fc00 	bl	8000280 <__aeabi_uldivmod>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4b61      	ldr	r3, [pc, #388]	; (8006c0c <UART_SetConfig+0x2d4>)
 8006a86:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	011c      	lsls	r4, r3, #4
 8006a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	1891      	adds	r1, r2, r2
 8006aa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006aa8:	415b      	adcs	r3, r3
 8006aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	eb43 0b01 	adc.w	fp, r3, r1
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ad0:	4692      	mov	sl, r2
 8006ad2:	469b      	mov	fp, r3
 8006ad4:	4643      	mov	r3, r8
 8006ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8006ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ade:	464b      	mov	r3, r9
 8006ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006af4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006afc:	460b      	mov	r3, r1
 8006afe:	18db      	adds	r3, r3, r3
 8006b00:	643b      	str	r3, [r7, #64]	; 0x40
 8006b02:	4613      	mov	r3, r2
 8006b04:	eb42 0303 	adc.w	r3, r2, r3
 8006b08:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b12:	f7f9 fbb5 	bl	8000280 <__aeabi_uldivmod>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <UART_SetConfig+0x2d4>)
 8006b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	2264      	movs	r2, #100	; 0x64
 8006b26:	fb02 f303 	mul.w	r3, r2, r3
 8006b2a:	1acb      	subs	r3, r1, r3
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b32:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <UART_SetConfig+0x2d4>)
 8006b34:	fba3 2302 	umull	r2, r3, r3, r2
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b40:	441c      	add	r4, r3
 8006b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b54:	4642      	mov	r2, r8
 8006b56:	464b      	mov	r3, r9
 8006b58:	1891      	adds	r1, r2, r2
 8006b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b5c:	415b      	adcs	r3, r3
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b64:	4641      	mov	r1, r8
 8006b66:	1851      	adds	r1, r2, r1
 8006b68:	6339      	str	r1, [r7, #48]	; 0x30
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	414b      	adcs	r3, r1
 8006b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b7c:	4659      	mov	r1, fp
 8006b7e:	00cb      	lsls	r3, r1, #3
 8006b80:	4651      	mov	r1, sl
 8006b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b86:	4651      	mov	r1, sl
 8006b88:	00ca      	lsls	r2, r1, #3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4642      	mov	r2, r8
 8006b92:	189b      	adds	r3, r3, r2
 8006b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b98:	464b      	mov	r3, r9
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006bb8:	460b      	mov	r3, r1
 8006bba:	18db      	adds	r3, r3, r3
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	eb42 0303 	adc.w	r3, r2, r3
 8006bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006bce:	f7f9 fb57 	bl	8000280 <__aeabi_uldivmod>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <UART_SetConfig+0x2d4>)
 8006bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bdc:	095b      	lsrs	r3, r3, #5
 8006bde:	2164      	movs	r1, #100	; 0x64
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	3332      	adds	r3, #50	; 0x32
 8006bea:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <UART_SetConfig+0x2d4>)
 8006bec:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	f003 0207 	and.w	r2, r3, #7
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4422      	add	r2, r4
 8006bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c00:	e105      	b.n	8006e0e <UART_SetConfig+0x4d6>
 8006c02:	bf00      	nop
 8006c04:	40011000 	.word	0x40011000
 8006c08:	40011400 	.word	0x40011400
 8006c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c22:	4642      	mov	r2, r8
 8006c24:	464b      	mov	r3, r9
 8006c26:	1891      	adds	r1, r2, r2
 8006c28:	6239      	str	r1, [r7, #32]
 8006c2a:	415b      	adcs	r3, r3
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c32:	4641      	mov	r1, r8
 8006c34:	1854      	adds	r4, r2, r1
 8006c36:	4649      	mov	r1, r9
 8006c38:	eb43 0501 	adc.w	r5, r3, r1
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	00eb      	lsls	r3, r5, #3
 8006c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c4a:	00e2      	lsls	r2, r4, #3
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	461d      	mov	r5, r3
 8006c50:	4643      	mov	r3, r8
 8006c52:	18e3      	adds	r3, r4, r3
 8006c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c58:	464b      	mov	r3, r9
 8006c5a:	eb45 0303 	adc.w	r3, r5, r3
 8006c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c7e:	4629      	mov	r1, r5
 8006c80:	008b      	lsls	r3, r1, #2
 8006c82:	4621      	mov	r1, r4
 8006c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c88:	4621      	mov	r1, r4
 8006c8a:	008a      	lsls	r2, r1, #2
 8006c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c90:	f7f9 faf6 	bl	8000280 <__aeabi_uldivmod>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4b60      	ldr	r3, [pc, #384]	; (8006e1c <UART_SetConfig+0x4e4>)
 8006c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	011c      	lsls	r4, r3, #4
 8006ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006cb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	1891      	adds	r1, r2, r2
 8006cba:	61b9      	str	r1, [r7, #24]
 8006cbc:	415b      	adcs	r3, r3
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cc4:	4641      	mov	r1, r8
 8006cc6:	1851      	adds	r1, r2, r1
 8006cc8:	6139      	str	r1, [r7, #16]
 8006cca:	4649      	mov	r1, r9
 8006ccc:	414b      	adcs	r3, r1
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cdc:	4659      	mov	r1, fp
 8006cde:	00cb      	lsls	r3, r1, #3
 8006ce0:	4651      	mov	r1, sl
 8006ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ce6:	4651      	mov	r1, sl
 8006ce8:	00ca      	lsls	r2, r1, #3
 8006cea:	4610      	mov	r0, r2
 8006cec:	4619      	mov	r1, r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	189b      	adds	r3, r3, r2
 8006cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cf8:	464b      	mov	r3, r9
 8006cfa:	460a      	mov	r2, r1
 8006cfc:	eb42 0303 	adc.w	r3, r2, r3
 8006d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	008b      	lsls	r3, r1, #2
 8006d20:	4641      	mov	r1, r8
 8006d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d26:	4641      	mov	r1, r8
 8006d28:	008a      	lsls	r2, r1, #2
 8006d2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d2e:	f7f9 faa7 	bl	8000280 <__aeabi_uldivmod>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4b39      	ldr	r3, [pc, #228]	; (8006e1c <UART_SetConfig+0x4e4>)
 8006d38:	fba3 1302 	umull	r1, r3, r3, r2
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	2164      	movs	r1, #100	; 0x64
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	3332      	adds	r3, #50	; 0x32
 8006d4a:	4a34      	ldr	r2, [pc, #208]	; (8006e1c <UART_SetConfig+0x4e4>)
 8006d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d56:	441c      	add	r4, r3
 8006d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d60:	677a      	str	r2, [r7, #116]	; 0x74
 8006d62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d66:	4642      	mov	r2, r8
 8006d68:	464b      	mov	r3, r9
 8006d6a:	1891      	adds	r1, r2, r2
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	415b      	adcs	r3, r3
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d76:	4641      	mov	r1, r8
 8006d78:	1851      	adds	r1, r2, r1
 8006d7a:	6039      	str	r1, [r7, #0]
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	414b      	adcs	r3, r1
 8006d80:	607b      	str	r3, [r7, #4]
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d8e:	4659      	mov	r1, fp
 8006d90:	00cb      	lsls	r3, r1, #3
 8006d92:	4651      	mov	r1, sl
 8006d94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d98:	4651      	mov	r1, sl
 8006d9a:	00ca      	lsls	r2, r1, #3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	4642      	mov	r2, r8
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006da8:	464b      	mov	r3, r9
 8006daa:	460a      	mov	r2, r1
 8006dac:	eb42 0303 	adc.w	r3, r2, r3
 8006db0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	663b      	str	r3, [r7, #96]	; 0x60
 8006dbc:	667a      	str	r2, [r7, #100]	; 0x64
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006dca:	4649      	mov	r1, r9
 8006dcc:	008b      	lsls	r3, r1, #2
 8006dce:	4641      	mov	r1, r8
 8006dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	008a      	lsls	r2, r1, #2
 8006dd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ddc:	f7f9 fa50 	bl	8000280 <__aeabi_uldivmod>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <UART_SetConfig+0x4e4>)
 8006de6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	2164      	movs	r1, #100	; 0x64
 8006dee:	fb01 f303 	mul.w	r3, r1, r3
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	3332      	adds	r3, #50	; 0x32
 8006df8:	4a08      	ldr	r2, [pc, #32]	; (8006e1c <UART_SetConfig+0x4e4>)
 8006dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	f003 020f 	and.w	r2, r3, #15
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4422      	add	r2, r4
 8006e0c:	609a      	str	r2, [r3, #8]
}
 8006e0e:	bf00      	nop
 8006e10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e14:	46bd      	mov	sp, r7
 8006e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e1a:	bf00      	nop
 8006e1c:	51eb851f 	.word	0x51eb851f

08006e20 <__errno>:
 8006e20:	4b01      	ldr	r3, [pc, #4]	; (8006e28 <__errno+0x8>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	2000001c 	.word	0x2000001c

08006e2c <__libc_init_array>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4d0d      	ldr	r5, [pc, #52]	; (8006e64 <__libc_init_array+0x38>)
 8006e30:	4c0d      	ldr	r4, [pc, #52]	; (8006e68 <__libc_init_array+0x3c>)
 8006e32:	1b64      	subs	r4, r4, r5
 8006e34:	10a4      	asrs	r4, r4, #2
 8006e36:	2600      	movs	r6, #0
 8006e38:	42a6      	cmp	r6, r4
 8006e3a:	d109      	bne.n	8006e50 <__libc_init_array+0x24>
 8006e3c:	4d0b      	ldr	r5, [pc, #44]	; (8006e6c <__libc_init_array+0x40>)
 8006e3e:	4c0c      	ldr	r4, [pc, #48]	; (8006e70 <__libc_init_array+0x44>)
 8006e40:	f000 fc8e 	bl	8007760 <_init>
 8006e44:	1b64      	subs	r4, r4, r5
 8006e46:	10a4      	asrs	r4, r4, #2
 8006e48:	2600      	movs	r6, #0
 8006e4a:	42a6      	cmp	r6, r4
 8006e4c:	d105      	bne.n	8006e5a <__libc_init_array+0x2e>
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e54:	4798      	blx	r3
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7ee      	b.n	8006e38 <__libc_init_array+0xc>
 8006e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5e:	4798      	blx	r3
 8006e60:	3601      	adds	r6, #1
 8006e62:	e7f2      	b.n	8006e4a <__libc_init_array+0x1e>
 8006e64:	080079d4 	.word	0x080079d4
 8006e68:	080079d4 	.word	0x080079d4
 8006e6c:	080079d4 	.word	0x080079d4
 8006e70:	080079d8 	.word	0x080079d8

08006e74 <memset>:
 8006e74:	4402      	add	r2, r0
 8006e76:	4603      	mov	r3, r0
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d100      	bne.n	8006e7e <memset+0xa>
 8006e7c:	4770      	bx	lr
 8006e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e82:	e7f9      	b.n	8006e78 <memset+0x4>

08006e84 <siprintf>:
 8006e84:	b40e      	push	{r1, r2, r3}
 8006e86:	b500      	push	{lr}
 8006e88:	b09c      	sub	sp, #112	; 0x70
 8006e8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e8c:	9002      	str	r0, [sp, #8]
 8006e8e:	9006      	str	r0, [sp, #24]
 8006e90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e94:	4809      	ldr	r0, [pc, #36]	; (8006ebc <siprintf+0x38>)
 8006e96:	9107      	str	r1, [sp, #28]
 8006e98:	9104      	str	r1, [sp, #16]
 8006e9a:	4909      	ldr	r1, [pc, #36]	; (8006ec0 <siprintf+0x3c>)
 8006e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea0:	9105      	str	r1, [sp, #20]
 8006ea2:	6800      	ldr	r0, [r0, #0]
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	a902      	add	r1, sp, #8
 8006ea8:	f000 f948 	bl	800713c <_svfiprintf_r>
 8006eac:	9b02      	ldr	r3, [sp, #8]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	b01c      	add	sp, #112	; 0x70
 8006eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eb8:	b003      	add	sp, #12
 8006eba:	4770      	bx	lr
 8006ebc:	2000001c 	.word	0x2000001c
 8006ec0:	ffff0208 	.word	0xffff0208

08006ec4 <_free_r>:
 8006ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d044      	beq.n	8006f54 <_free_r+0x90>
 8006eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ece:	9001      	str	r0, [sp, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ed6:	bfb8      	it	lt
 8006ed8:	18e4      	addlt	r4, r4, r3
 8006eda:	f000 fbfd 	bl	80076d8 <__malloc_lock>
 8006ede:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <_free_r+0x94>)
 8006ee0:	9801      	ldr	r0, [sp, #4]
 8006ee2:	6813      	ldr	r3, [r2, #0]
 8006ee4:	b933      	cbnz	r3, 8006ef4 <_free_r+0x30>
 8006ee6:	6063      	str	r3, [r4, #4]
 8006ee8:	6014      	str	r4, [r2, #0]
 8006eea:	b003      	add	sp, #12
 8006eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ef0:	f000 bbf8 	b.w	80076e4 <__malloc_unlock>
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	d908      	bls.n	8006f0a <_free_r+0x46>
 8006ef8:	6825      	ldr	r5, [r4, #0]
 8006efa:	1961      	adds	r1, r4, r5
 8006efc:	428b      	cmp	r3, r1
 8006efe:	bf01      	itttt	eq
 8006f00:	6819      	ldreq	r1, [r3, #0]
 8006f02:	685b      	ldreq	r3, [r3, #4]
 8006f04:	1949      	addeq	r1, r1, r5
 8006f06:	6021      	streq	r1, [r4, #0]
 8006f08:	e7ed      	b.n	8006ee6 <_free_r+0x22>
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	b10b      	cbz	r3, 8006f14 <_free_r+0x50>
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	d9fa      	bls.n	8006f0a <_free_r+0x46>
 8006f14:	6811      	ldr	r1, [r2, #0]
 8006f16:	1855      	adds	r5, r2, r1
 8006f18:	42a5      	cmp	r5, r4
 8006f1a:	d10b      	bne.n	8006f34 <_free_r+0x70>
 8006f1c:	6824      	ldr	r4, [r4, #0]
 8006f1e:	4421      	add	r1, r4
 8006f20:	1854      	adds	r4, r2, r1
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	6011      	str	r1, [r2, #0]
 8006f26:	d1e0      	bne.n	8006eea <_free_r+0x26>
 8006f28:	681c      	ldr	r4, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	6053      	str	r3, [r2, #4]
 8006f2e:	4421      	add	r1, r4
 8006f30:	6011      	str	r1, [r2, #0]
 8006f32:	e7da      	b.n	8006eea <_free_r+0x26>
 8006f34:	d902      	bls.n	8006f3c <_free_r+0x78>
 8006f36:	230c      	movs	r3, #12
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	e7d6      	b.n	8006eea <_free_r+0x26>
 8006f3c:	6825      	ldr	r5, [r4, #0]
 8006f3e:	1961      	adds	r1, r4, r5
 8006f40:	428b      	cmp	r3, r1
 8006f42:	bf04      	itt	eq
 8006f44:	6819      	ldreq	r1, [r3, #0]
 8006f46:	685b      	ldreq	r3, [r3, #4]
 8006f48:	6063      	str	r3, [r4, #4]
 8006f4a:	bf04      	itt	eq
 8006f4c:	1949      	addeq	r1, r1, r5
 8006f4e:	6021      	streq	r1, [r4, #0]
 8006f50:	6054      	str	r4, [r2, #4]
 8006f52:	e7ca      	b.n	8006eea <_free_r+0x26>
 8006f54:	b003      	add	sp, #12
 8006f56:	bd30      	pop	{r4, r5, pc}
 8006f58:	20001a34 	.word	0x20001a34

08006f5c <sbrk_aligned>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	4e0e      	ldr	r6, [pc, #56]	; (8006f98 <sbrk_aligned+0x3c>)
 8006f60:	460c      	mov	r4, r1
 8006f62:	6831      	ldr	r1, [r6, #0]
 8006f64:	4605      	mov	r5, r0
 8006f66:	b911      	cbnz	r1, 8006f6e <sbrk_aligned+0x12>
 8006f68:	f000 fb7c 	bl	8007664 <_sbrk_r>
 8006f6c:	6030      	str	r0, [r6, #0]
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 fb77 	bl	8007664 <_sbrk_r>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d00a      	beq.n	8006f90 <sbrk_aligned+0x34>
 8006f7a:	1cc4      	adds	r4, r0, #3
 8006f7c:	f024 0403 	bic.w	r4, r4, #3
 8006f80:	42a0      	cmp	r0, r4
 8006f82:	d007      	beq.n	8006f94 <sbrk_aligned+0x38>
 8006f84:	1a21      	subs	r1, r4, r0
 8006f86:	4628      	mov	r0, r5
 8006f88:	f000 fb6c 	bl	8007664 <_sbrk_r>
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d101      	bne.n	8006f94 <sbrk_aligned+0x38>
 8006f90:	f04f 34ff 	mov.w	r4, #4294967295
 8006f94:	4620      	mov	r0, r4
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	20001a38 	.word	0x20001a38

08006f9c <_malloc_r>:
 8006f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa0:	1ccd      	adds	r5, r1, #3
 8006fa2:	f025 0503 	bic.w	r5, r5, #3
 8006fa6:	3508      	adds	r5, #8
 8006fa8:	2d0c      	cmp	r5, #12
 8006faa:	bf38      	it	cc
 8006fac:	250c      	movcc	r5, #12
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	4607      	mov	r7, r0
 8006fb2:	db01      	blt.n	8006fb8 <_malloc_r+0x1c>
 8006fb4:	42a9      	cmp	r1, r5
 8006fb6:	d905      	bls.n	8006fc4 <_malloc_r+0x28>
 8006fb8:	230c      	movs	r3, #12
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	2600      	movs	r6, #0
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc4:	4e2e      	ldr	r6, [pc, #184]	; (8007080 <_malloc_r+0xe4>)
 8006fc6:	f000 fb87 	bl	80076d8 <__malloc_lock>
 8006fca:	6833      	ldr	r3, [r6, #0]
 8006fcc:	461c      	mov	r4, r3
 8006fce:	bb34      	cbnz	r4, 800701e <_malloc_r+0x82>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f7ff ffc2 	bl	8006f5c <sbrk_aligned>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	4604      	mov	r4, r0
 8006fdc:	d14d      	bne.n	800707a <_malloc_r+0xde>
 8006fde:	6834      	ldr	r4, [r6, #0]
 8006fe0:	4626      	mov	r6, r4
 8006fe2:	2e00      	cmp	r6, #0
 8006fe4:	d140      	bne.n	8007068 <_malloc_r+0xcc>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4638      	mov	r0, r7
 8006fec:	eb04 0803 	add.w	r8, r4, r3
 8006ff0:	f000 fb38 	bl	8007664 <_sbrk_r>
 8006ff4:	4580      	cmp	r8, r0
 8006ff6:	d13a      	bne.n	800706e <_malloc_r+0xd2>
 8006ff8:	6821      	ldr	r1, [r4, #0]
 8006ffa:	3503      	adds	r5, #3
 8006ffc:	1a6d      	subs	r5, r5, r1
 8006ffe:	f025 0503 	bic.w	r5, r5, #3
 8007002:	3508      	adds	r5, #8
 8007004:	2d0c      	cmp	r5, #12
 8007006:	bf38      	it	cc
 8007008:	250c      	movcc	r5, #12
 800700a:	4629      	mov	r1, r5
 800700c:	4638      	mov	r0, r7
 800700e:	f7ff ffa5 	bl	8006f5c <sbrk_aligned>
 8007012:	3001      	adds	r0, #1
 8007014:	d02b      	beq.n	800706e <_malloc_r+0xd2>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	442b      	add	r3, r5
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	e00e      	b.n	800703c <_malloc_r+0xa0>
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	1b52      	subs	r2, r2, r5
 8007022:	d41e      	bmi.n	8007062 <_malloc_r+0xc6>
 8007024:	2a0b      	cmp	r2, #11
 8007026:	d916      	bls.n	8007056 <_malloc_r+0xba>
 8007028:	1961      	adds	r1, r4, r5
 800702a:	42a3      	cmp	r3, r4
 800702c:	6025      	str	r5, [r4, #0]
 800702e:	bf18      	it	ne
 8007030:	6059      	strne	r1, [r3, #4]
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	bf08      	it	eq
 8007036:	6031      	streq	r1, [r6, #0]
 8007038:	5162      	str	r2, [r4, r5]
 800703a:	604b      	str	r3, [r1, #4]
 800703c:	4638      	mov	r0, r7
 800703e:	f104 060b 	add.w	r6, r4, #11
 8007042:	f000 fb4f 	bl	80076e4 <__malloc_unlock>
 8007046:	f026 0607 	bic.w	r6, r6, #7
 800704a:	1d23      	adds	r3, r4, #4
 800704c:	1af2      	subs	r2, r6, r3
 800704e:	d0b6      	beq.n	8006fbe <_malloc_r+0x22>
 8007050:	1b9b      	subs	r3, r3, r6
 8007052:	50a3      	str	r3, [r4, r2]
 8007054:	e7b3      	b.n	8006fbe <_malloc_r+0x22>
 8007056:	6862      	ldr	r2, [r4, #4]
 8007058:	42a3      	cmp	r3, r4
 800705a:	bf0c      	ite	eq
 800705c:	6032      	streq	r2, [r6, #0]
 800705e:	605a      	strne	r2, [r3, #4]
 8007060:	e7ec      	b.n	800703c <_malloc_r+0xa0>
 8007062:	4623      	mov	r3, r4
 8007064:	6864      	ldr	r4, [r4, #4]
 8007066:	e7b2      	b.n	8006fce <_malloc_r+0x32>
 8007068:	4634      	mov	r4, r6
 800706a:	6876      	ldr	r6, [r6, #4]
 800706c:	e7b9      	b.n	8006fe2 <_malloc_r+0x46>
 800706e:	230c      	movs	r3, #12
 8007070:	603b      	str	r3, [r7, #0]
 8007072:	4638      	mov	r0, r7
 8007074:	f000 fb36 	bl	80076e4 <__malloc_unlock>
 8007078:	e7a1      	b.n	8006fbe <_malloc_r+0x22>
 800707a:	6025      	str	r5, [r4, #0]
 800707c:	e7de      	b.n	800703c <_malloc_r+0xa0>
 800707e:	bf00      	nop
 8007080:	20001a34 	.word	0x20001a34

08007084 <__ssputs_r>:
 8007084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	688e      	ldr	r6, [r1, #8]
 800708a:	429e      	cmp	r6, r3
 800708c:	4682      	mov	sl, r0
 800708e:	460c      	mov	r4, r1
 8007090:	4690      	mov	r8, r2
 8007092:	461f      	mov	r7, r3
 8007094:	d838      	bhi.n	8007108 <__ssputs_r+0x84>
 8007096:	898a      	ldrh	r2, [r1, #12]
 8007098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800709c:	d032      	beq.n	8007104 <__ssputs_r+0x80>
 800709e:	6825      	ldr	r5, [r4, #0]
 80070a0:	6909      	ldr	r1, [r1, #16]
 80070a2:	eba5 0901 	sub.w	r9, r5, r1
 80070a6:	6965      	ldr	r5, [r4, #20]
 80070a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070b0:	3301      	adds	r3, #1
 80070b2:	444b      	add	r3, r9
 80070b4:	106d      	asrs	r5, r5, #1
 80070b6:	429d      	cmp	r5, r3
 80070b8:	bf38      	it	cc
 80070ba:	461d      	movcc	r5, r3
 80070bc:	0553      	lsls	r3, r2, #21
 80070be:	d531      	bpl.n	8007124 <__ssputs_r+0xa0>
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7ff ff6b 	bl	8006f9c <_malloc_r>
 80070c6:	4606      	mov	r6, r0
 80070c8:	b950      	cbnz	r0, 80070e0 <__ssputs_r+0x5c>
 80070ca:	230c      	movs	r3, #12
 80070cc:	f8ca 3000 	str.w	r3, [sl]
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d6:	81a3      	strh	r3, [r4, #12]
 80070d8:	f04f 30ff 	mov.w	r0, #4294967295
 80070dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e0:	6921      	ldr	r1, [r4, #16]
 80070e2:	464a      	mov	r2, r9
 80070e4:	f000 fad0 	bl	8007688 <memcpy>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	6126      	str	r6, [r4, #16]
 80070f6:	6165      	str	r5, [r4, #20]
 80070f8:	444e      	add	r6, r9
 80070fa:	eba5 0509 	sub.w	r5, r5, r9
 80070fe:	6026      	str	r6, [r4, #0]
 8007100:	60a5      	str	r5, [r4, #8]
 8007102:	463e      	mov	r6, r7
 8007104:	42be      	cmp	r6, r7
 8007106:	d900      	bls.n	800710a <__ssputs_r+0x86>
 8007108:	463e      	mov	r6, r7
 800710a:	6820      	ldr	r0, [r4, #0]
 800710c:	4632      	mov	r2, r6
 800710e:	4641      	mov	r1, r8
 8007110:	f000 fac8 	bl	80076a4 <memmove>
 8007114:	68a3      	ldr	r3, [r4, #8]
 8007116:	1b9b      	subs	r3, r3, r6
 8007118:	60a3      	str	r3, [r4, #8]
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	4433      	add	r3, r6
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	2000      	movs	r0, #0
 8007122:	e7db      	b.n	80070dc <__ssputs_r+0x58>
 8007124:	462a      	mov	r2, r5
 8007126:	f000 fae3 	bl	80076f0 <_realloc_r>
 800712a:	4606      	mov	r6, r0
 800712c:	2800      	cmp	r0, #0
 800712e:	d1e1      	bne.n	80070f4 <__ssputs_r+0x70>
 8007130:	6921      	ldr	r1, [r4, #16]
 8007132:	4650      	mov	r0, sl
 8007134:	f7ff fec6 	bl	8006ec4 <_free_r>
 8007138:	e7c7      	b.n	80070ca <__ssputs_r+0x46>
	...

0800713c <_svfiprintf_r>:
 800713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007140:	4698      	mov	r8, r3
 8007142:	898b      	ldrh	r3, [r1, #12]
 8007144:	061b      	lsls	r3, r3, #24
 8007146:	b09d      	sub	sp, #116	; 0x74
 8007148:	4607      	mov	r7, r0
 800714a:	460d      	mov	r5, r1
 800714c:	4614      	mov	r4, r2
 800714e:	d50e      	bpl.n	800716e <_svfiprintf_r+0x32>
 8007150:	690b      	ldr	r3, [r1, #16]
 8007152:	b963      	cbnz	r3, 800716e <_svfiprintf_r+0x32>
 8007154:	2140      	movs	r1, #64	; 0x40
 8007156:	f7ff ff21 	bl	8006f9c <_malloc_r>
 800715a:	6028      	str	r0, [r5, #0]
 800715c:	6128      	str	r0, [r5, #16]
 800715e:	b920      	cbnz	r0, 800716a <_svfiprintf_r+0x2e>
 8007160:	230c      	movs	r3, #12
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	e0d1      	b.n	800730e <_svfiprintf_r+0x1d2>
 800716a:	2340      	movs	r3, #64	; 0x40
 800716c:	616b      	str	r3, [r5, #20]
 800716e:	2300      	movs	r3, #0
 8007170:	9309      	str	r3, [sp, #36]	; 0x24
 8007172:	2320      	movs	r3, #32
 8007174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007178:	f8cd 800c 	str.w	r8, [sp, #12]
 800717c:	2330      	movs	r3, #48	; 0x30
 800717e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007328 <_svfiprintf_r+0x1ec>
 8007182:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007186:	f04f 0901 	mov.w	r9, #1
 800718a:	4623      	mov	r3, r4
 800718c:	469a      	mov	sl, r3
 800718e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007192:	b10a      	cbz	r2, 8007198 <_svfiprintf_r+0x5c>
 8007194:	2a25      	cmp	r2, #37	; 0x25
 8007196:	d1f9      	bne.n	800718c <_svfiprintf_r+0x50>
 8007198:	ebba 0b04 	subs.w	fp, sl, r4
 800719c:	d00b      	beq.n	80071b6 <_svfiprintf_r+0x7a>
 800719e:	465b      	mov	r3, fp
 80071a0:	4622      	mov	r2, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff ff6d 	bl	8007084 <__ssputs_r>
 80071aa:	3001      	adds	r0, #1
 80071ac:	f000 80aa 	beq.w	8007304 <_svfiprintf_r+0x1c8>
 80071b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b2:	445a      	add	r2, fp
 80071b4:	9209      	str	r2, [sp, #36]	; 0x24
 80071b6:	f89a 3000 	ldrb.w	r3, [sl]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 80a2 	beq.w	8007304 <_svfiprintf_r+0x1c8>
 80071c0:	2300      	movs	r3, #0
 80071c2:	f04f 32ff 	mov.w	r2, #4294967295
 80071c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ca:	f10a 0a01 	add.w	sl, sl, #1
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	9307      	str	r3, [sp, #28]
 80071d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071d6:	931a      	str	r3, [sp, #104]	; 0x68
 80071d8:	4654      	mov	r4, sl
 80071da:	2205      	movs	r2, #5
 80071dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e0:	4851      	ldr	r0, [pc, #324]	; (8007328 <_svfiprintf_r+0x1ec>)
 80071e2:	f7f8 fffd 	bl	80001e0 <memchr>
 80071e6:	9a04      	ldr	r2, [sp, #16]
 80071e8:	b9d8      	cbnz	r0, 8007222 <_svfiprintf_r+0xe6>
 80071ea:	06d0      	lsls	r0, r2, #27
 80071ec:	bf44      	itt	mi
 80071ee:	2320      	movmi	r3, #32
 80071f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071f4:	0711      	lsls	r1, r2, #28
 80071f6:	bf44      	itt	mi
 80071f8:	232b      	movmi	r3, #43	; 0x2b
 80071fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007202:	2b2a      	cmp	r3, #42	; 0x2a
 8007204:	d015      	beq.n	8007232 <_svfiprintf_r+0xf6>
 8007206:	9a07      	ldr	r2, [sp, #28]
 8007208:	4654      	mov	r4, sl
 800720a:	2000      	movs	r0, #0
 800720c:	f04f 0c0a 	mov.w	ip, #10
 8007210:	4621      	mov	r1, r4
 8007212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007216:	3b30      	subs	r3, #48	; 0x30
 8007218:	2b09      	cmp	r3, #9
 800721a:	d94e      	bls.n	80072ba <_svfiprintf_r+0x17e>
 800721c:	b1b0      	cbz	r0, 800724c <_svfiprintf_r+0x110>
 800721e:	9207      	str	r2, [sp, #28]
 8007220:	e014      	b.n	800724c <_svfiprintf_r+0x110>
 8007222:	eba0 0308 	sub.w	r3, r0, r8
 8007226:	fa09 f303 	lsl.w	r3, r9, r3
 800722a:	4313      	orrs	r3, r2
 800722c:	9304      	str	r3, [sp, #16]
 800722e:	46a2      	mov	sl, r4
 8007230:	e7d2      	b.n	80071d8 <_svfiprintf_r+0x9c>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	1d19      	adds	r1, r3, #4
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	9103      	str	r1, [sp, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	bfbb      	ittet	lt
 800723e:	425b      	neglt	r3, r3
 8007240:	f042 0202 	orrlt.w	r2, r2, #2
 8007244:	9307      	strge	r3, [sp, #28]
 8007246:	9307      	strlt	r3, [sp, #28]
 8007248:	bfb8      	it	lt
 800724a:	9204      	strlt	r2, [sp, #16]
 800724c:	7823      	ldrb	r3, [r4, #0]
 800724e:	2b2e      	cmp	r3, #46	; 0x2e
 8007250:	d10c      	bne.n	800726c <_svfiprintf_r+0x130>
 8007252:	7863      	ldrb	r3, [r4, #1]
 8007254:	2b2a      	cmp	r3, #42	; 0x2a
 8007256:	d135      	bne.n	80072c4 <_svfiprintf_r+0x188>
 8007258:	9b03      	ldr	r3, [sp, #12]
 800725a:	1d1a      	adds	r2, r3, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	9203      	str	r2, [sp, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	bfb8      	it	lt
 8007264:	f04f 33ff 	movlt.w	r3, #4294967295
 8007268:	3402      	adds	r4, #2
 800726a:	9305      	str	r3, [sp, #20]
 800726c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007338 <_svfiprintf_r+0x1fc>
 8007270:	7821      	ldrb	r1, [r4, #0]
 8007272:	2203      	movs	r2, #3
 8007274:	4650      	mov	r0, sl
 8007276:	f7f8 ffb3 	bl	80001e0 <memchr>
 800727a:	b140      	cbz	r0, 800728e <_svfiprintf_r+0x152>
 800727c:	2340      	movs	r3, #64	; 0x40
 800727e:	eba0 000a 	sub.w	r0, r0, sl
 8007282:	fa03 f000 	lsl.w	r0, r3, r0
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	4303      	orrs	r3, r0
 800728a:	3401      	adds	r4, #1
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007292:	4826      	ldr	r0, [pc, #152]	; (800732c <_svfiprintf_r+0x1f0>)
 8007294:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007298:	2206      	movs	r2, #6
 800729a:	f7f8 ffa1 	bl	80001e0 <memchr>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d038      	beq.n	8007314 <_svfiprintf_r+0x1d8>
 80072a2:	4b23      	ldr	r3, [pc, #140]	; (8007330 <_svfiprintf_r+0x1f4>)
 80072a4:	bb1b      	cbnz	r3, 80072ee <_svfiprintf_r+0x1b2>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	3307      	adds	r3, #7
 80072aa:	f023 0307 	bic.w	r3, r3, #7
 80072ae:	3308      	adds	r3, #8
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b4:	4433      	add	r3, r6
 80072b6:	9309      	str	r3, [sp, #36]	; 0x24
 80072b8:	e767      	b.n	800718a <_svfiprintf_r+0x4e>
 80072ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80072be:	460c      	mov	r4, r1
 80072c0:	2001      	movs	r0, #1
 80072c2:	e7a5      	b.n	8007210 <_svfiprintf_r+0xd4>
 80072c4:	2300      	movs	r3, #0
 80072c6:	3401      	adds	r4, #1
 80072c8:	9305      	str	r3, [sp, #20]
 80072ca:	4619      	mov	r1, r3
 80072cc:	f04f 0c0a 	mov.w	ip, #10
 80072d0:	4620      	mov	r0, r4
 80072d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072d6:	3a30      	subs	r2, #48	; 0x30
 80072d8:	2a09      	cmp	r2, #9
 80072da:	d903      	bls.n	80072e4 <_svfiprintf_r+0x1a8>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0c5      	beq.n	800726c <_svfiprintf_r+0x130>
 80072e0:	9105      	str	r1, [sp, #20]
 80072e2:	e7c3      	b.n	800726c <_svfiprintf_r+0x130>
 80072e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072e8:	4604      	mov	r4, r0
 80072ea:	2301      	movs	r3, #1
 80072ec:	e7f0      	b.n	80072d0 <_svfiprintf_r+0x194>
 80072ee:	ab03      	add	r3, sp, #12
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	462a      	mov	r2, r5
 80072f4:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <_svfiprintf_r+0x1f8>)
 80072f6:	a904      	add	r1, sp, #16
 80072f8:	4638      	mov	r0, r7
 80072fa:	f3af 8000 	nop.w
 80072fe:	1c42      	adds	r2, r0, #1
 8007300:	4606      	mov	r6, r0
 8007302:	d1d6      	bne.n	80072b2 <_svfiprintf_r+0x176>
 8007304:	89ab      	ldrh	r3, [r5, #12]
 8007306:	065b      	lsls	r3, r3, #25
 8007308:	f53f af2c 	bmi.w	8007164 <_svfiprintf_r+0x28>
 800730c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800730e:	b01d      	add	sp, #116	; 0x74
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	ab03      	add	r3, sp, #12
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	462a      	mov	r2, r5
 800731a:	4b06      	ldr	r3, [pc, #24]	; (8007334 <_svfiprintf_r+0x1f8>)
 800731c:	a904      	add	r1, sp, #16
 800731e:	4638      	mov	r0, r7
 8007320:	f000 f87a 	bl	8007418 <_printf_i>
 8007324:	e7eb      	b.n	80072fe <_svfiprintf_r+0x1c2>
 8007326:	bf00      	nop
 8007328:	08007938 	.word	0x08007938
 800732c:	08007942 	.word	0x08007942
 8007330:	00000000 	.word	0x00000000
 8007334:	08007085 	.word	0x08007085
 8007338:	0800793e 	.word	0x0800793e

0800733c <_printf_common>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	4616      	mov	r6, r2
 8007342:	4699      	mov	r9, r3
 8007344:	688a      	ldr	r2, [r1, #8]
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800734c:	4293      	cmp	r3, r2
 800734e:	bfb8      	it	lt
 8007350:	4613      	movlt	r3, r2
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007358:	4607      	mov	r7, r0
 800735a:	460c      	mov	r4, r1
 800735c:	b10a      	cbz	r2, 8007362 <_printf_common+0x26>
 800735e:	3301      	adds	r3, #1
 8007360:	6033      	str	r3, [r6, #0]
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	0699      	lsls	r1, r3, #26
 8007366:	bf42      	ittt	mi
 8007368:	6833      	ldrmi	r3, [r6, #0]
 800736a:	3302      	addmi	r3, #2
 800736c:	6033      	strmi	r3, [r6, #0]
 800736e:	6825      	ldr	r5, [r4, #0]
 8007370:	f015 0506 	ands.w	r5, r5, #6
 8007374:	d106      	bne.n	8007384 <_printf_common+0x48>
 8007376:	f104 0a19 	add.w	sl, r4, #25
 800737a:	68e3      	ldr	r3, [r4, #12]
 800737c:	6832      	ldr	r2, [r6, #0]
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	42ab      	cmp	r3, r5
 8007382:	dc26      	bgt.n	80073d2 <_printf_common+0x96>
 8007384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007388:	1e13      	subs	r3, r2, #0
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	bf18      	it	ne
 800738e:	2301      	movne	r3, #1
 8007390:	0692      	lsls	r2, r2, #26
 8007392:	d42b      	bmi.n	80073ec <_printf_common+0xb0>
 8007394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007398:	4649      	mov	r1, r9
 800739a:	4638      	mov	r0, r7
 800739c:	47c0      	blx	r8
 800739e:	3001      	adds	r0, #1
 80073a0:	d01e      	beq.n	80073e0 <_printf_common+0xa4>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	68e5      	ldr	r5, [r4, #12]
 80073a6:	6832      	ldr	r2, [r6, #0]
 80073a8:	f003 0306 	and.w	r3, r3, #6
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	bf08      	it	eq
 80073b0:	1aad      	subeq	r5, r5, r2
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	6922      	ldr	r2, [r4, #16]
 80073b6:	bf0c      	ite	eq
 80073b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073bc:	2500      	movne	r5, #0
 80073be:	4293      	cmp	r3, r2
 80073c0:	bfc4      	itt	gt
 80073c2:	1a9b      	subgt	r3, r3, r2
 80073c4:	18ed      	addgt	r5, r5, r3
 80073c6:	2600      	movs	r6, #0
 80073c8:	341a      	adds	r4, #26
 80073ca:	42b5      	cmp	r5, r6
 80073cc:	d11a      	bne.n	8007404 <_printf_common+0xc8>
 80073ce:	2000      	movs	r0, #0
 80073d0:	e008      	b.n	80073e4 <_printf_common+0xa8>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4652      	mov	r2, sl
 80073d6:	4649      	mov	r1, r9
 80073d8:	4638      	mov	r0, r7
 80073da:	47c0      	blx	r8
 80073dc:	3001      	adds	r0, #1
 80073de:	d103      	bne.n	80073e8 <_printf_common+0xac>
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e8:	3501      	adds	r5, #1
 80073ea:	e7c6      	b.n	800737a <_printf_common+0x3e>
 80073ec:	18e1      	adds	r1, r4, r3
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	2030      	movs	r0, #48	; 0x30
 80073f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f6:	4422      	add	r2, r4
 80073f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007400:	3302      	adds	r3, #2
 8007402:	e7c7      	b.n	8007394 <_printf_common+0x58>
 8007404:	2301      	movs	r3, #1
 8007406:	4622      	mov	r2, r4
 8007408:	4649      	mov	r1, r9
 800740a:	4638      	mov	r0, r7
 800740c:	47c0      	blx	r8
 800740e:	3001      	adds	r0, #1
 8007410:	d0e6      	beq.n	80073e0 <_printf_common+0xa4>
 8007412:	3601      	adds	r6, #1
 8007414:	e7d9      	b.n	80073ca <_printf_common+0x8e>
	...

08007418 <_printf_i>:
 8007418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	7e0f      	ldrb	r7, [r1, #24]
 800741e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007420:	2f78      	cmp	r7, #120	; 0x78
 8007422:	4691      	mov	r9, r2
 8007424:	4680      	mov	r8, r0
 8007426:	460c      	mov	r4, r1
 8007428:	469a      	mov	sl, r3
 800742a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800742e:	d807      	bhi.n	8007440 <_printf_i+0x28>
 8007430:	2f62      	cmp	r7, #98	; 0x62
 8007432:	d80a      	bhi.n	800744a <_printf_i+0x32>
 8007434:	2f00      	cmp	r7, #0
 8007436:	f000 80d8 	beq.w	80075ea <_printf_i+0x1d2>
 800743a:	2f58      	cmp	r7, #88	; 0x58
 800743c:	f000 80a3 	beq.w	8007586 <_printf_i+0x16e>
 8007440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007448:	e03a      	b.n	80074c0 <_printf_i+0xa8>
 800744a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800744e:	2b15      	cmp	r3, #21
 8007450:	d8f6      	bhi.n	8007440 <_printf_i+0x28>
 8007452:	a101      	add	r1, pc, #4	; (adr r1, 8007458 <_printf_i+0x40>)
 8007454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007458:	080074b1 	.word	0x080074b1
 800745c:	080074c5 	.word	0x080074c5
 8007460:	08007441 	.word	0x08007441
 8007464:	08007441 	.word	0x08007441
 8007468:	08007441 	.word	0x08007441
 800746c:	08007441 	.word	0x08007441
 8007470:	080074c5 	.word	0x080074c5
 8007474:	08007441 	.word	0x08007441
 8007478:	08007441 	.word	0x08007441
 800747c:	08007441 	.word	0x08007441
 8007480:	08007441 	.word	0x08007441
 8007484:	080075d1 	.word	0x080075d1
 8007488:	080074f5 	.word	0x080074f5
 800748c:	080075b3 	.word	0x080075b3
 8007490:	08007441 	.word	0x08007441
 8007494:	08007441 	.word	0x08007441
 8007498:	080075f3 	.word	0x080075f3
 800749c:	08007441 	.word	0x08007441
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	08007441 	.word	0x08007441
 80074a8:	08007441 	.word	0x08007441
 80074ac:	080075bb 	.word	0x080075bb
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	1d1a      	adds	r2, r3, #4
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	602a      	str	r2, [r5, #0]
 80074b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0a3      	b.n	800760c <_printf_i+0x1f4>
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	6829      	ldr	r1, [r5, #0]
 80074c8:	0606      	lsls	r6, r0, #24
 80074ca:	f101 0304 	add.w	r3, r1, #4
 80074ce:	d50a      	bpl.n	80074e6 <_printf_i+0xce>
 80074d0:	680e      	ldr	r6, [r1, #0]
 80074d2:	602b      	str	r3, [r5, #0]
 80074d4:	2e00      	cmp	r6, #0
 80074d6:	da03      	bge.n	80074e0 <_printf_i+0xc8>
 80074d8:	232d      	movs	r3, #45	; 0x2d
 80074da:	4276      	negs	r6, r6
 80074dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e0:	485e      	ldr	r0, [pc, #376]	; (800765c <_printf_i+0x244>)
 80074e2:	230a      	movs	r3, #10
 80074e4:	e019      	b.n	800751a <_printf_i+0x102>
 80074e6:	680e      	ldr	r6, [r1, #0]
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074ee:	bf18      	it	ne
 80074f0:	b236      	sxthne	r6, r6
 80074f2:	e7ef      	b.n	80074d4 <_printf_i+0xbc>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	6820      	ldr	r0, [r4, #0]
 80074f8:	1d19      	adds	r1, r3, #4
 80074fa:	6029      	str	r1, [r5, #0]
 80074fc:	0601      	lsls	r1, r0, #24
 80074fe:	d501      	bpl.n	8007504 <_printf_i+0xec>
 8007500:	681e      	ldr	r6, [r3, #0]
 8007502:	e002      	b.n	800750a <_printf_i+0xf2>
 8007504:	0646      	lsls	r6, r0, #25
 8007506:	d5fb      	bpl.n	8007500 <_printf_i+0xe8>
 8007508:	881e      	ldrh	r6, [r3, #0]
 800750a:	4854      	ldr	r0, [pc, #336]	; (800765c <_printf_i+0x244>)
 800750c:	2f6f      	cmp	r7, #111	; 0x6f
 800750e:	bf0c      	ite	eq
 8007510:	2308      	moveq	r3, #8
 8007512:	230a      	movne	r3, #10
 8007514:	2100      	movs	r1, #0
 8007516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800751a:	6865      	ldr	r5, [r4, #4]
 800751c:	60a5      	str	r5, [r4, #8]
 800751e:	2d00      	cmp	r5, #0
 8007520:	bfa2      	ittt	ge
 8007522:	6821      	ldrge	r1, [r4, #0]
 8007524:	f021 0104 	bicge.w	r1, r1, #4
 8007528:	6021      	strge	r1, [r4, #0]
 800752a:	b90e      	cbnz	r6, 8007530 <_printf_i+0x118>
 800752c:	2d00      	cmp	r5, #0
 800752e:	d04d      	beq.n	80075cc <_printf_i+0x1b4>
 8007530:	4615      	mov	r5, r2
 8007532:	fbb6 f1f3 	udiv	r1, r6, r3
 8007536:	fb03 6711 	mls	r7, r3, r1, r6
 800753a:	5dc7      	ldrb	r7, [r0, r7]
 800753c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007540:	4637      	mov	r7, r6
 8007542:	42bb      	cmp	r3, r7
 8007544:	460e      	mov	r6, r1
 8007546:	d9f4      	bls.n	8007532 <_printf_i+0x11a>
 8007548:	2b08      	cmp	r3, #8
 800754a:	d10b      	bne.n	8007564 <_printf_i+0x14c>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	07de      	lsls	r6, r3, #31
 8007550:	d508      	bpl.n	8007564 <_printf_i+0x14c>
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	6861      	ldr	r1, [r4, #4]
 8007556:	4299      	cmp	r1, r3
 8007558:	bfde      	ittt	le
 800755a:	2330      	movle	r3, #48	; 0x30
 800755c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007560:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007564:	1b52      	subs	r2, r2, r5
 8007566:	6122      	str	r2, [r4, #16]
 8007568:	f8cd a000 	str.w	sl, [sp]
 800756c:	464b      	mov	r3, r9
 800756e:	aa03      	add	r2, sp, #12
 8007570:	4621      	mov	r1, r4
 8007572:	4640      	mov	r0, r8
 8007574:	f7ff fee2 	bl	800733c <_printf_common>
 8007578:	3001      	adds	r0, #1
 800757a:	d14c      	bne.n	8007616 <_printf_i+0x1fe>
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	b004      	add	sp, #16
 8007582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007586:	4835      	ldr	r0, [pc, #212]	; (800765c <_printf_i+0x244>)
 8007588:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800758c:	6829      	ldr	r1, [r5, #0]
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	f851 6b04 	ldr.w	r6, [r1], #4
 8007594:	6029      	str	r1, [r5, #0]
 8007596:	061d      	lsls	r5, r3, #24
 8007598:	d514      	bpl.n	80075c4 <_printf_i+0x1ac>
 800759a:	07df      	lsls	r7, r3, #31
 800759c:	bf44      	itt	mi
 800759e:	f043 0320 	orrmi.w	r3, r3, #32
 80075a2:	6023      	strmi	r3, [r4, #0]
 80075a4:	b91e      	cbnz	r6, 80075ae <_printf_i+0x196>
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	f023 0320 	bic.w	r3, r3, #32
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	2310      	movs	r3, #16
 80075b0:	e7b0      	b.n	8007514 <_printf_i+0xfc>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	f043 0320 	orr.w	r3, r3, #32
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	2378      	movs	r3, #120	; 0x78
 80075bc:	4828      	ldr	r0, [pc, #160]	; (8007660 <_printf_i+0x248>)
 80075be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075c2:	e7e3      	b.n	800758c <_printf_i+0x174>
 80075c4:	0659      	lsls	r1, r3, #25
 80075c6:	bf48      	it	mi
 80075c8:	b2b6      	uxthmi	r6, r6
 80075ca:	e7e6      	b.n	800759a <_printf_i+0x182>
 80075cc:	4615      	mov	r5, r2
 80075ce:	e7bb      	b.n	8007548 <_printf_i+0x130>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	6826      	ldr	r6, [r4, #0]
 80075d4:	6961      	ldr	r1, [r4, #20]
 80075d6:	1d18      	adds	r0, r3, #4
 80075d8:	6028      	str	r0, [r5, #0]
 80075da:	0635      	lsls	r5, r6, #24
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	d501      	bpl.n	80075e4 <_printf_i+0x1cc>
 80075e0:	6019      	str	r1, [r3, #0]
 80075e2:	e002      	b.n	80075ea <_printf_i+0x1d2>
 80075e4:	0670      	lsls	r0, r6, #25
 80075e6:	d5fb      	bpl.n	80075e0 <_printf_i+0x1c8>
 80075e8:	8019      	strh	r1, [r3, #0]
 80075ea:	2300      	movs	r3, #0
 80075ec:	6123      	str	r3, [r4, #16]
 80075ee:	4615      	mov	r5, r2
 80075f0:	e7ba      	b.n	8007568 <_printf_i+0x150>
 80075f2:	682b      	ldr	r3, [r5, #0]
 80075f4:	1d1a      	adds	r2, r3, #4
 80075f6:	602a      	str	r2, [r5, #0]
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	6862      	ldr	r2, [r4, #4]
 80075fc:	2100      	movs	r1, #0
 80075fe:	4628      	mov	r0, r5
 8007600:	f7f8 fdee 	bl	80001e0 <memchr>
 8007604:	b108      	cbz	r0, 800760a <_printf_i+0x1f2>
 8007606:	1b40      	subs	r0, r0, r5
 8007608:	6060      	str	r0, [r4, #4]
 800760a:	6863      	ldr	r3, [r4, #4]
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	2300      	movs	r3, #0
 8007610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007614:	e7a8      	b.n	8007568 <_printf_i+0x150>
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	462a      	mov	r2, r5
 800761a:	4649      	mov	r1, r9
 800761c:	4640      	mov	r0, r8
 800761e:	47d0      	blx	sl
 8007620:	3001      	adds	r0, #1
 8007622:	d0ab      	beq.n	800757c <_printf_i+0x164>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	079b      	lsls	r3, r3, #30
 8007628:	d413      	bmi.n	8007652 <_printf_i+0x23a>
 800762a:	68e0      	ldr	r0, [r4, #12]
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	4298      	cmp	r0, r3
 8007630:	bfb8      	it	lt
 8007632:	4618      	movlt	r0, r3
 8007634:	e7a4      	b.n	8007580 <_printf_i+0x168>
 8007636:	2301      	movs	r3, #1
 8007638:	4632      	mov	r2, r6
 800763a:	4649      	mov	r1, r9
 800763c:	4640      	mov	r0, r8
 800763e:	47d0      	blx	sl
 8007640:	3001      	adds	r0, #1
 8007642:	d09b      	beq.n	800757c <_printf_i+0x164>
 8007644:	3501      	adds	r5, #1
 8007646:	68e3      	ldr	r3, [r4, #12]
 8007648:	9903      	ldr	r1, [sp, #12]
 800764a:	1a5b      	subs	r3, r3, r1
 800764c:	42ab      	cmp	r3, r5
 800764e:	dcf2      	bgt.n	8007636 <_printf_i+0x21e>
 8007650:	e7eb      	b.n	800762a <_printf_i+0x212>
 8007652:	2500      	movs	r5, #0
 8007654:	f104 0619 	add.w	r6, r4, #25
 8007658:	e7f5      	b.n	8007646 <_printf_i+0x22e>
 800765a:	bf00      	nop
 800765c:	08007949 	.word	0x08007949
 8007660:	0800795a 	.word	0x0800795a

08007664 <_sbrk_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d06      	ldr	r5, [pc, #24]	; (8007680 <_sbrk_r+0x1c>)
 8007668:	2300      	movs	r3, #0
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	f7fa fc0c 	bl	8001e8c <_sbrk>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d102      	bne.n	800767e <_sbrk_r+0x1a>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b103      	cbz	r3, 800767e <_sbrk_r+0x1a>
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	20001a40 	.word	0x20001a40

08007684 <__retarget_lock_acquire_recursive>:
 8007684:	4770      	bx	lr

08007686 <__retarget_lock_release_recursive>:
 8007686:	4770      	bx	lr

08007688 <memcpy>:
 8007688:	440a      	add	r2, r1
 800768a:	4291      	cmp	r1, r2
 800768c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007690:	d100      	bne.n	8007694 <memcpy+0xc>
 8007692:	4770      	bx	lr
 8007694:	b510      	push	{r4, lr}
 8007696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800769a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800769e:	4291      	cmp	r1, r2
 80076a0:	d1f9      	bne.n	8007696 <memcpy+0xe>
 80076a2:	bd10      	pop	{r4, pc}

080076a4 <memmove>:
 80076a4:	4288      	cmp	r0, r1
 80076a6:	b510      	push	{r4, lr}
 80076a8:	eb01 0402 	add.w	r4, r1, r2
 80076ac:	d902      	bls.n	80076b4 <memmove+0x10>
 80076ae:	4284      	cmp	r4, r0
 80076b0:	4623      	mov	r3, r4
 80076b2:	d807      	bhi.n	80076c4 <memmove+0x20>
 80076b4:	1e43      	subs	r3, r0, #1
 80076b6:	42a1      	cmp	r1, r4
 80076b8:	d008      	beq.n	80076cc <memmove+0x28>
 80076ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076c2:	e7f8      	b.n	80076b6 <memmove+0x12>
 80076c4:	4402      	add	r2, r0
 80076c6:	4601      	mov	r1, r0
 80076c8:	428a      	cmp	r2, r1
 80076ca:	d100      	bne.n	80076ce <memmove+0x2a>
 80076cc:	bd10      	pop	{r4, pc}
 80076ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076d6:	e7f7      	b.n	80076c8 <memmove+0x24>

080076d8 <__malloc_lock>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__malloc_lock+0x8>)
 80076da:	f7ff bfd3 	b.w	8007684 <__retarget_lock_acquire_recursive>
 80076de:	bf00      	nop
 80076e0:	20001a3c 	.word	0x20001a3c

080076e4 <__malloc_unlock>:
 80076e4:	4801      	ldr	r0, [pc, #4]	; (80076ec <__malloc_unlock+0x8>)
 80076e6:	f7ff bfce 	b.w	8007686 <__retarget_lock_release_recursive>
 80076ea:	bf00      	nop
 80076ec:	20001a3c 	.word	0x20001a3c

080076f0 <_realloc_r>:
 80076f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f4:	4680      	mov	r8, r0
 80076f6:	4614      	mov	r4, r2
 80076f8:	460e      	mov	r6, r1
 80076fa:	b921      	cbnz	r1, 8007706 <_realloc_r+0x16>
 80076fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	4611      	mov	r1, r2
 8007702:	f7ff bc4b 	b.w	8006f9c <_malloc_r>
 8007706:	b92a      	cbnz	r2, 8007714 <_realloc_r+0x24>
 8007708:	f7ff fbdc 	bl	8006ec4 <_free_r>
 800770c:	4625      	mov	r5, r4
 800770e:	4628      	mov	r0, r5
 8007710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007714:	f000 f81b 	bl	800774e <_malloc_usable_size_r>
 8007718:	4284      	cmp	r4, r0
 800771a:	4607      	mov	r7, r0
 800771c:	d802      	bhi.n	8007724 <_realloc_r+0x34>
 800771e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007722:	d812      	bhi.n	800774a <_realloc_r+0x5a>
 8007724:	4621      	mov	r1, r4
 8007726:	4640      	mov	r0, r8
 8007728:	f7ff fc38 	bl	8006f9c <_malloc_r>
 800772c:	4605      	mov	r5, r0
 800772e:	2800      	cmp	r0, #0
 8007730:	d0ed      	beq.n	800770e <_realloc_r+0x1e>
 8007732:	42bc      	cmp	r4, r7
 8007734:	4622      	mov	r2, r4
 8007736:	4631      	mov	r1, r6
 8007738:	bf28      	it	cs
 800773a:	463a      	movcs	r2, r7
 800773c:	f7ff ffa4 	bl	8007688 <memcpy>
 8007740:	4631      	mov	r1, r6
 8007742:	4640      	mov	r0, r8
 8007744:	f7ff fbbe 	bl	8006ec4 <_free_r>
 8007748:	e7e1      	b.n	800770e <_realloc_r+0x1e>
 800774a:	4635      	mov	r5, r6
 800774c:	e7df      	b.n	800770e <_realloc_r+0x1e>

0800774e <_malloc_usable_size_r>:
 800774e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007752:	1f18      	subs	r0, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	bfbc      	itt	lt
 8007758:	580b      	ldrlt	r3, [r1, r0]
 800775a:	18c0      	addlt	r0, r0, r3
 800775c:	4770      	bx	lr
	...

08007760 <_init>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr

0800776c <_fini>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	bf00      	nop
 8007770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007772:	bc08      	pop	{r3}
 8007774:	469e      	mov	lr, r3
 8007776:	4770      	bx	lr
