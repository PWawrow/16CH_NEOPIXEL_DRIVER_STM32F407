
STM32F407-WS2812B-TEST-23022023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800d144  0800d144  0001d144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3f0  0800d3f0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3f0  0800d3f0  0001d3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3f8  0800d3f8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3f8  0800d3f8  0001d3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3fc  0800d3fc  0001d3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00003260  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003444  20003444  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae25  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e69  00000000  00000000  0003b039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001358  00000000  00000000  00040398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025080  00000000  00000000  000416f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b314  00000000  00000000  00066770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0527  00000000  00000000  00081a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00151fab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c18  00000000  00000000  00151ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d12c 	.word	0x0800d12c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800d12c 	.word	0x0800d12c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <irSetup>:

#endif


void irSetup(TIM_HandleTypeDef *htim, UART_HandleTypeDef *huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	irHtim = htim;
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <irSetup+0x28>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6013      	str	r3, [r2, #0]
	irHuart = huart;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <irSetup+0x2c>)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	6013      	str	r3, [r2, #0]
//	HAL_TIM_Base_Start_IT(htim);
	HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f005 fc3d 	bl	8005e1c <HAL_TIM_IC_Start_IT>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000248 	.word	0x20000248
 80005b0:	2000024c 	.word	0x2000024c

080005b4 <irHandle>:
void irHandle(void (*callback)(uint16_t, uint16_t))
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if(irReceived == 1){
 80005bc:	4b62      	ldr	r3, [pc, #392]	; (8000748 <irHandle+0x194>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	f040 80bd 	bne.w	8000740 <irHandle+0x18c>
			  for(int i = 0; i<8; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e049      	b.n	8000660 <irHandle+0xac>
			  {
				  if(irPulses[i]<(1000+irPulseError) && irPulses[i]>(1000-irPulseError))
 80005cc:	4b5f      	ldr	r3, [pc, #380]	; (800074c <irHandle+0x198>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80005d4:	495e      	ldr	r1, [pc, #376]	; (8000750 <irHandle+0x19c>)
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80005dc:	4293      	cmp	r3, r2
 80005de:	db1a      	blt.n	8000616 <irHandle+0x62>
 80005e0:	4a5b      	ldr	r2, [pc, #364]	; (8000750 <irHandle+0x19c>)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b58      	ldr	r3, [pc, #352]	; (800074c <irHandle+0x198>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dd0f      	ble.n	8000616 <irHandle+0x62>
					  irDevice &= ~(1 << (i));
 80005f6:	2201      	movs	r2, #1
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	b25a      	sxtb	r2, r3
 8000604:	4b53      	ldr	r3, [pc, #332]	; (8000754 <irHandle+0x1a0>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	4013      	ands	r3, r2
 800060c:	b25b      	sxtb	r3, r3
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b50      	ldr	r3, [pc, #320]	; (8000754 <irHandle+0x1a0>)
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	e021      	b.n	800065a <irHandle+0xa6>
				  else if(irPulses[i]<(2000+irPulseError) && irPulses[i]>(2000-irPulseError))
 8000616:	4b4d      	ldr	r3, [pc, #308]	; (800074c <irHandle+0x198>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 800061e:	494c      	ldr	r1, [pc, #304]	; (8000750 <irHandle+0x19c>)
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000626:	4293      	cmp	r3, r2
 8000628:	db17      	blt.n	800065a <irHandle+0xa6>
 800062a:	4a49      	ldr	r2, [pc, #292]	; (8000750 <irHandle+0x19c>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000632:	461a      	mov	r2, r3
 8000634:	4b45      	ldr	r3, [pc, #276]	; (800074c <irHandle+0x198>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800063c:	429a      	cmp	r2, r3
 800063e:	dd0c      	ble.n	800065a <irHandle+0xa6>
					  irDevice |= (1 << (i));
 8000640:	2201      	movs	r2, #1
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	b25a      	sxtb	r2, r3
 800064a:	4b42      	ldr	r3, [pc, #264]	; (8000754 <irHandle+0x1a0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	4313      	orrs	r3, r2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b3f      	ldr	r3, [pc, #252]	; (8000754 <irHandle+0x1a0>)
 8000658:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i<8; i++)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b07      	cmp	r3, #7
 8000664:	ddb2      	ble.n	80005cc <irHandle+0x18>
			  }
			  for(int i = 17; i<25; i++)
 8000666:	2311      	movs	r3, #17
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	e04b      	b.n	8000704 <irHandle+0x150>
			  {
				  if(irPulses[i]<(1000+irPulseError) && irPulses[i]>(1000-irPulseError))
 800066c:	4b37      	ldr	r3, [pc, #220]	; (800074c <irHandle+0x198>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8000674:	4936      	ldr	r1, [pc, #216]	; (8000750 <irHandle+0x19c>)
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800067c:	4293      	cmp	r3, r2
 800067e:	db1b      	blt.n	80006b8 <irHandle+0x104>
 8000680:	4a33      	ldr	r2, [pc, #204]	; (8000750 <irHandle+0x19c>)
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000688:	461a      	mov	r2, r3
 800068a:	4b30      	ldr	r3, [pc, #192]	; (800074c <irHandle+0x198>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000692:	429a      	cmp	r2, r3
 8000694:	dd10      	ble.n	80006b8 <irHandle+0x104>
					  irCommand &= ~(1 << (i-17));
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	3b11      	subs	r3, #17
 800069a:	2201      	movs	r2, #1
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	b25a      	sxtb	r2, r3
 80006a6:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <irHandle+0x1a4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	4013      	ands	r3, r2
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <irHandle+0x1a4>)
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e022      	b.n	80006fe <irHandle+0x14a>
				  else if(irPulses[i]<(2000+irPulseError) && irPulses[i]>(2000-irPulseError))
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <irHandle+0x198>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 80006c0:	4923      	ldr	r1, [pc, #140]	; (8000750 <irHandle+0x19c>)
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	db18      	blt.n	80006fe <irHandle+0x14a>
 80006cc:	4a20      	ldr	r2, [pc, #128]	; (8000750 <irHandle+0x19c>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <irHandle+0x198>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 80006de:	429a      	cmp	r2, r3
 80006e0:	dd0d      	ble.n	80006fe <irHandle+0x14a>
					  irCommand |= (1 << (i-17));
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3b11      	subs	r3, #17
 80006e6:	2201      	movs	r2, #1
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <irHandle+0x1a4>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <irHandle+0x1a4>)
 80006fc:	701a      	strb	r2, [r3, #0]
			  for(int i = 17; i<25; i++)
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3301      	adds	r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2b18      	cmp	r3, #24
 8000708:	ddb0      	ble.n	800066c <irHandle+0xb8>
			  }
#ifdef DEBUG
			  sprintf(ascii, "%d, c: %d\r\n", irDevice, irCommand);
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <irHandle+0x1a0>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <irHandle+0x1a4>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4911      	ldr	r1, [pc, #68]	; (800075c <irHandle+0x1a8>)
 8000716:	4812      	ldr	r0, [pc, #72]	; (8000760 <irHandle+0x1ac>)
 8000718:	f00c f8a8 	bl	800c86c <siprintf>
			  HAL_UART_Transmit(&irHuart, ascii, sizeof(ascii), 100);
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	2214      	movs	r2, #20
 8000720:	490f      	ldr	r1, [pc, #60]	; (8000760 <irHandle+0x1ac>)
 8000722:	4810      	ldr	r0, [pc, #64]	; (8000764 <irHandle+0x1b0>)
 8000724:	f006 fd49 	bl	80071ba <HAL_UART_Transmit>
#endif
			  callback(irDevice, irCommand);
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <irHandle+0x1a0>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <irHandle+0x1a4>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b299      	uxth	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4610      	mov	r0, r2
 8000738:	4798      	blx	r3
			  irReceived = 0;
 800073a:	4b03      	ldr	r3, [pc, #12]	; (8000748 <irHandle+0x194>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]

	}
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000200 	.word	0x20000200
 800074c:	20000000 	.word	0x20000000
 8000750:	20000204 	.word	0x20000204
 8000754:	20000244 	.word	0x20000244
 8000758:	20000245 	.word	0x20000245
 800075c:	0800d144 	.word	0x0800d144
 8000760:	20000250 	.word	0x20000250
 8000764:	2000024c 	.word	0x2000024c

08000768 <irIRQ>:


void irIRQ()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	uint16_t pulse_duration = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	80fb      	strh	r3, [r7, #6]

	  if (irHtim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <irIRQ+0x9c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7f1b      	ldrb	r3, [r3, #28]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d13e      	bne.n	80007fa <irIRQ+0x92>
	    {

	      pulse_duration = (uint16_t)HAL_TIM_ReadCapturedValue(irHtim, TIM_CHANNEL_1);
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <irIRQ+0x9c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f005 ffa0 	bl	80066c8 <HAL_TIM_ReadCapturedValue>
 8000788:	4603      	mov	r3, r0
 800078a:	80fb      	strh	r3, [r7, #6]
	      __HAL_TIM_SET_COUNTER(irHtim, 0);
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <irIRQ+0x9c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
	      if(irPulseNb > 0 && irPulseNb <= 33){
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <irIRQ+0xa0>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d01a      	beq.n	80007d4 <irIRQ+0x6c>
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <irIRQ+0xa0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b21      	cmp	r3, #33	; 0x21
 80007a4:	d816      	bhi.n	80007d4 <irIRQ+0x6c>
	          	irPulses[irPulseNb-1] = pulse_duration;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <irIRQ+0xa0>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	4917      	ldr	r1, [pc, #92]	; (800080c <irIRQ+0xa4>)
 80007ae:	88fa      	ldrh	r2, [r7, #6]
 80007b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	          	irPulseNb++;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <irIRQ+0xa0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <irIRQ+0xa0>)
 80007be:	701a      	strb	r2, [r3, #0]
	          	if(irPulseNb == 33)
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <irIRQ+0xa0>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b21      	cmp	r3, #33	; 0x21
 80007c6:	d105      	bne.n	80007d4 <irIRQ+0x6c>
	          	{
	          		irReceived = 1;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <irIRQ+0xa8>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
	          		irPulseNb = 0;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <irIRQ+0xa0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
	          	}
	          }
	      if(pulse_duration<(8600+irPulseError) && pulse_duration>(8600-irPulseError))
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <irIRQ+0xac>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80007dc:	3317      	adds	r3, #23
 80007de:	88fa      	ldrh	r2, [r7, #6]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	db0a      	blt.n	80007fa <irIRQ+0x92>
 80007e4:	88fa      	ldrh	r2, [r7, #6]
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <irIRQ+0xac>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	f5c3 5306 	rsb	r3, r3, #8576	; 0x2180
 80007ee:	3318      	adds	r3, #24
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dd02      	ble.n	80007fa <irIRQ+0x92>
	          	irPulseNb = 1;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <irIRQ+0xa0>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
	    }
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000248 	.word	0x20000248
 8000808:	20000201 	.word	0x20000201
 800080c:	20000204 	.word	0x20000204
 8000810:	20000200 	.word	0x20000200
 8000814:	20000000 	.word	0x20000000

08000818 <effectsLoop>:
uint8_t ACTIVE_EFFECT_TYPE = 0;
uint8_t ACTIVE_EFFECT_NB = 0;


void effectsLoop()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	//CHECK ACTIVE STRIP
	switch(ACTIVE_EFFECT_TYPE)
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <effectsLoop+0xd4>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d852      	bhi.n	80008cc <effectsLoop+0xb4>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <effectsLoop+0x14>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	0800083d 	.word	0x0800083d
 8000830:	08000841 	.word	0x08000841
 8000834:	08000887 	.word	0x08000887
 8000838:	080008cd 	.word	0x080008cd
	{
		//HANDLE ELE
		uint16_t strips;
		case 0:
			setAllBlack();
 800083c:	f000 f8a4 	bl	8000988 <setAllBlack>
		case 1:
			strips = (ELE_INPUT_MACROS[ACTIVE_EFFECT_NB][1]<<8) | ELE_INPUT_MACROS[ACTIVE_EFFECT_NB][0];
 8000840:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <effectsLoop+0xd8>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	4a2b      	ldr	r2, [pc, #172]	; (80008f4 <effectsLoop+0xdc>)
 8000848:	460b      	mov	r3, r1
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	440b      	add	r3, r1
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	3301      	adds	r3, #1
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	b21a      	sxth	r2, r3
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <effectsLoop+0xd8>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	4924      	ldr	r1, [pc, #144]	; (80008f4 <effectsLoop+0xdc>)
 8000862:	4603      	mov	r3, r0
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	4403      	add	r3, r0
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	440b      	add	r3, r1
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21b      	sxth	r3, r3
 8000874:	80fb      	strh	r3, [r7, #6]
			handleEffects(strips, &ELE_INPUT_MACROS[0][0], ACTIVE_EFFECT_NB, BYTES_PER_EFFECT);
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <effectsLoop+0xd8>)
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	88f8      	ldrh	r0, [r7, #6]
 800087c:	2306      	movs	r3, #6
 800087e:	491d      	ldr	r1, [pc, #116]	; (80008f4 <effectsLoop+0xdc>)
 8000880:	f000 f83e 	bl	8000900 <handleEffects>
		break;
 8000884:	e022      	b.n	80008cc <effectsLoop+0xb4>
		//HANDLE IR
		case 2:
			strips = (IR_CODES_MACROS[ACTIVE_EFFECT_NB][1]<<8) | IR_CODES_MACROS[ACTIVE_EFFECT_NB][0];
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <effectsLoop+0xd8>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <effectsLoop+0xe0>)
 800088e:	460b      	mov	r3, r1
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	440b      	add	r3, r1
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	3301      	adds	r3, #1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	b21a      	sxth	r2, r3
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <effectsLoop+0xd8>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	4914      	ldr	r1, [pc, #80]	; (80008f8 <effectsLoop+0xe0>)
 80008a8:	4603      	mov	r3, r0
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4403      	add	r3, r0
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	440b      	add	r3, r1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	80fb      	strh	r3, [r7, #6]
			handleEffects(strips, &IR_CODES_MACROS[0][0], ACTIVE_EFFECT_NB, BYTES_PER_EFFECT);
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <effectsLoop+0xd8>)
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	88f8      	ldrh	r0, [r7, #6]
 80008c2:	2306      	movs	r3, #6
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <effectsLoop+0xe0>)
 80008c6:	f000 f81b 	bl	8000900 <handleEffects>
		break;
 80008ca:	bf00      	nop
		//HANDLE TIME
		case 3:

		break;
	}
	if(ws2812b.transferComplete)
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <effectsLoop+0xe4>)
 80008ce:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d005      	beq.n	80008e2 <effectsLoop+0xca>
	{
		ws2812b.startTransfer = 1;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <effectsLoop+0xe4>)
 80008d8:	2201      	movs	r2, #1
 80008da:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		ws2812b_handle();
 80008de:	f002 f91f 	bl	8002b20 <ws2812b_handle>
	}
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20001524 	.word	0x20001524
 80008f0:	20001525 	.word	0x20001525
 80008f4:	20001788 	.word	0x20001788
 80008f8:	20001710 	.word	0x20001710
 80008fc:	20001890 	.word	0x20001890

08000900 <handleEffects>:
void handleEffects(uint16_t strips, uint8_t *arr, uint8_t start, uint8_t size)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6039      	str	r1, [r7, #0]
 8000908:	4611      	mov	r1, r2
 800090a:	461a      	mov	r2, r3
 800090c:	4603      	mov	r3, r0
 800090e:	80fb      	strh	r3, [r7, #6]
 8000910:	460b      	mov	r3, r1
 8000912:	717b      	strb	r3, [r7, #5]
 8000914:	4613      	mov	r3, r2
 8000916:	713b      	strb	r3, [r7, #4]
	switch(*(arr+start*size+2))
 8000918:	797b      	ldrb	r3, [r7, #5]
 800091a:	793a      	ldrb	r2, [r7, #4]
 800091c:	fb02 f303 	mul.w	r3, r2, r3
 8000920:	3302      	adds	r3, #2
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <handleEffects+0x32>
 800092c:	2b01      	cmp	r3, #1
 800092e:	d003      	beq.n	8000938 <handleEffects+0x38>
					setBlack(i);
				}
			}
			break;
	}
}
 8000930:	e026      	b.n	8000980 <handleEffects+0x80>
			setAllBlack();
 8000932:	f000 f829 	bl	8000988 <setAllBlack>
			break;
 8000936:	e023      	b.n	8000980 <handleEffects+0x80>
			for(uint8_t i = 0; i < WS2812_BUFFER_COUNT; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e01c      	b.n	8000978 <handleEffects+0x78>
				if(strips & (1<<i)) // Effect on strip
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	fa42 f303 	asr.w	r3, r2, r3
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00d      	beq.n	800096a <handleEffects+0x6a>
					calcRainbow(i, *(arr+start*size+3));
 800094e:	797b      	ldrb	r3, [r7, #5]
 8000950:	793a      	ldrb	r2, [r7, #4]
 8000952:	fb02 f303 	mul.w	r3, r2, r3
 8000956:	3303      	adds	r3, #3
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	4413      	add	r3, r2
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f85e 	bl	8000a24 <calcRainbow>
 8000968:	e003      	b.n	8000972 <handleEffects+0x72>
					setBlack(i);
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f835 	bl	80009dc <setBlack>
			for(uint8_t i = 0; i < WS2812_BUFFER_COUNT; i++)
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	3301      	adds	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d9df      	bls.n	800093e <handleEffects+0x3e>
			break;
 800097e:	bf00      	nop
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <setAllBlack>:

void setAllBlack()
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
	for(uint8_t j = 0; j < WS2812_BUFFER_COUNT; j++)
 800098e:	2300      	movs	r3, #0
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	e017      	b.n	80009c4 <setAllBlack+0x3c>
		for(uint16_t i = 0; i < (WS2812B_NUMBER_OF_LEDS*3); i++)
 8000994:	2300      	movs	r3, #0
 8000996:	80bb      	strh	r3, [r7, #4]
 8000998:	e00d      	b.n	80009b6 <setAllBlack+0x2e>
			frameBufferArray[j][i] = 0;
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	88bb      	ldrh	r3, [r7, #4]
 800099e:	490e      	ldr	r1, [pc, #56]	; (80009d8 <setAllBlack+0x50>)
 80009a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009a4:	fb00 f202 	mul.w	r2, r0, r2
 80009a8:	440a      	add	r2, r1
 80009aa:	4413      	add	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
		for(uint16_t i = 0; i < (WS2812B_NUMBER_OF_LEDS*3); i++)
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	80bb      	strh	r3, [r7, #4]
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009bc:	d3ed      	bcc.n	800099a <setAllBlack+0x12>
	for(uint8_t j = 0; j < WS2812_BUFFER_COUNT; j++)
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	3301      	adds	r3, #1
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d9e4      	bls.n	8000994 <setAllBlack+0xc>
}
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20000264 	.word	0x20000264

080009dc <setBlack>:
void setBlack(uint8_t id)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i<(WS2812B_NUMBER_OF_LEDS*3); i++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	81fb      	strh	r3, [r7, #14]
 80009ea:	e00d      	b.n	8000a08 <setBlack+0x2c>
		frameBufferArray[id][i] = 0;
 80009ec:	79fa      	ldrb	r2, [r7, #7]
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	490b      	ldr	r1, [pc, #44]	; (8000a20 <setBlack+0x44>)
 80009f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009f6:	fb00 f202 	mul.w	r2, r0, r2
 80009fa:	440a      	add	r2, r1
 80009fc:	4413      	add	r3, r2
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i<(WS2812B_NUMBER_OF_LEDS*3); i++)
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	3301      	adds	r3, #1
 8000a06:	81fb      	strh	r3, [r7, #14]
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a0e:	d3ed      	bcc.n	80009ec <setBlack+0x10>
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000264 	.word	0x20000264

08000a24 <calcRainbow>:
void calcRainbow(uint8_t id, uint8_t effectLength)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
		uint32_t i;
		static uint8_t x[WS2812_BUFFER_COUNT] = {0};

		x[id] += 1;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4a2c      	ldr	r2, [pc, #176]	; (8000ae8 <calcRainbow+0xc4>)
 8000a38:	5cd2      	ldrb	r2, [r2, r3]
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	3201      	adds	r2, #1
 8000a3e:	b2d1      	uxtb	r1, r2
 8000a40:	4a29      	ldr	r2, [pc, #164]	; (8000ae8 <calcRainbow+0xc4>)
 8000a42:	54d1      	strb	r1, [r2, r3]

		if(x[id] == 256*5)
			x[id] = 0;


		for( i = 0; i < WS2812B_NUMBER_OF_LEDS; i++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	e045      	b.n	8000ad6 <calcRainbow+0xb2>
		{
			uint32_t color = Wheel(((i * 256) / effectLength + x[id]) & 0xFF);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	021a      	lsls	r2, r3, #8
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4923      	ldr	r1, [pc, #140]	; (8000ae8 <calcRainbow+0xc4>)
 8000a5a:	5ccb      	ldrb	r3, [r1, r3]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f845 	bl	8000af0 <Wheel>
 8000a66:	60b8      	str	r0, [r7, #8]

			frameBufferArray[id][i*3 + 0] = (color & 0xFF);
 8000a68:	79f9      	ldrb	r1, [r7, #7]
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	b2d4      	uxtb	r4, r2
 8000a76:	481d      	ldr	r0, [pc, #116]	; (8000aec <calcRainbow+0xc8>)
 8000a78:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a7c:	fb01 f202 	mul.w	r2, r1, r2
 8000a80:	4402      	add	r2, r0
 8000a82:	4413      	add	r3, r2
 8000a84:	4622      	mov	r2, r4
 8000a86:	701a      	strb	r2, [r3, #0]
			frameBufferArray[id][i*3 + 1] = (color >> 8 & 0xFF);
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	0a18      	lsrs	r0, r3, #8
 8000a8c:	79f9      	ldrb	r1, [r7, #7]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	3301      	adds	r3, #1
 8000a98:	b2c4      	uxtb	r4, r0
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <calcRainbow+0xc8>)
 8000a9c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000aa0:	fb01 f202 	mul.w	r2, r1, r2
 8000aa4:	4402      	add	r2, r0
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4622      	mov	r2, r4
 8000aaa:	701a      	strb	r2, [r3, #0]
			frameBufferArray[id][i*3 + 2] = (color >> 16 & 0xFF);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	0c18      	lsrs	r0, r3, #16
 8000ab0:	79f9      	ldrb	r1, [r7, #7]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4413      	add	r3, r2
 8000aba:	3302      	adds	r3, #2
 8000abc:	b2c4      	uxtb	r4, r0
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <calcRainbow+0xc8>)
 8000ac0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ac4:	fb01 f202 	mul.w	r2, r1, r2
 8000ac8:	4402      	add	r2, r0
 8000aca:	4413      	add	r3, r2
 8000acc:	4622      	mov	r2, r4
 8000ace:	701a      	strb	r2, [r3, #0]
		for( i = 0; i < WS2812B_NUMBER_OF_LEDS; i++)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b63      	cmp	r3, #99	; 0x63
 8000ada:	d9b6      	bls.n	8000a4a <calcRainbow+0x26>
		}

}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20001528 	.word	0x20001528
 8000aec:	20000264 	.word	0x20000264

08000af0 <Wheel>:

uint32_t Wheel(uint8_t WheelPos) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b54      	cmp	r3, #84	; 0x54
 8000b04:	d80b      	bhi.n	8000b1e <Wheel+0x2e>
    return newColor(255 - WheelPos * 3, 0, WheelPos * 3);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	33ff      	adds	r3, #255	; 0xff
 8000b10:	0419      	lsls	r1, r3, #16
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	4413      	add	r3, r2
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	e020      	b.n	8000b60 <Wheel+0x70>
  }
  if(WheelPos < 170) {
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2ba9      	cmp	r3, #169	; 0xa9
 8000b22:	d80e      	bhi.n	8000b42 <Wheel+0x52>
    WheelPos -= 85;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	3b55      	subs	r3, #85	; 0x55
 8000b28:	71fb      	strb	r3, [r7, #7]
    return newColor(0, WheelPos * 3, 255 - WheelPos * 3);
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	021a      	lsls	r2, r3, #8
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	4619      	mov	r1, r3
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	1acb      	subs	r3, r1, r3
 8000b3c:	33ff      	adds	r3, #255	; 0xff
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	e00e      	b.n	8000b60 <Wheel+0x70>
  }
  WheelPos -= 170;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	3356      	adds	r3, #86	; 0x56
 8000b46:	71fb      	strb	r3, [r7, #7]
  return newColor(WheelPos * 3, 255 - WheelPos * 3, 0);
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4619      	mov	r1, r3
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	1acb      	subs	r3, r1, r3
 8000b5a:	33ff      	adds	r3, #255	; 0xff
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	4313      	orrs	r3, r2
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <HAL_GPIO_EXTI_Callback>:

uint8_t USB_RX_BUFF[64];
uint8_t USB_RX_BYTES_RECEIVED = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
  if( ACTIVE_EFFECT_NB == 0)
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d106      	bne.n	8000b8c <HAL_GPIO_EXTI_Callback+0x20>
  {
	  ACTIVE_EFFECT_TYPE = 1;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
	  ACTIVE_EFFECT_NB = 1;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
  }else
  {
	  ACTIVE_EFFECT_TYPE = 0;
	  ACTIVE_EFFECT_NB = 0;
  }
}
 8000b8a:	e005      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x2c>
	  ACTIVE_EFFECT_TYPE = 0;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
	  ACTIVE_EFFECT_NB = 0;
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	20001525 	.word	0x20001525
 8000ba8:	20001524 	.word	0x20001524

08000bac <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	irIRQ();
 8000bb4:	f7ff fdd8 	bl	8000768 <irIRQ>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SendRoutinesOverUart>:
//			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
//		}
//
//}
void SendRoutinesOverUart()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t *)"\nIR:\n", 5, 100);
 8000bc6:	2364      	movs	r3, #100	; 0x64
 8000bc8:	2205      	movs	r2, #5
 8000bca:	4963      	ldr	r1, [pc, #396]	; (8000d58 <SendRoutinesOverUart+0x198>)
 8000bcc:	4863      	ldr	r0, [pc, #396]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000bce:	f006 faf4 	bl	80071ba <HAL_UART_Transmit>
	for(int i = 0; i < MAX_IR_CODES; i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	e039      	b.n	8000c4c <SendRoutinesOverUart+0x8c>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"n:", 2, 100);
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	2202      	movs	r2, #2
 8000bdc:	4960      	ldr	r1, [pc, #384]	; (8000d60 <SendRoutinesOverUart+0x1a0>)
 8000bde:	485f      	ldr	r0, [pc, #380]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000be0:	f006 faeb 	bl	80071ba <HAL_UART_Transmit>

		for(int j = 0; j<BYTES_PER_IR_CODE; j++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	e00d      	b.n	8000c06 <SendRoutinesOverUart+0x46>
			HAL_UART_Transmit(&huart2, &IR_CODES_FLAGS[i][j], 1, 100);
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005a      	lsls	r2, r3, #1
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a5c      	ldr	r2, [pc, #368]	; (8000d64 <SendRoutinesOverUart+0x1a4>)
 8000bf4:	1899      	adds	r1, r3, r2
 8000bf6:	2364      	movs	r3, #100	; 0x64
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4858      	ldr	r0, [pc, #352]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000bfc:	f006 fadd 	bl	80071ba <HAL_UART_Transmit>
		for(int j = 0; j<BYTES_PER_IR_CODE; j++)
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	3301      	adds	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	ddee      	ble.n	8000bea <SendRoutinesOverUart+0x2a>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e010      	b.n	8000c34 <SendRoutinesOverUart+0x74>
			HAL_UART_Transmit(&huart2, &IR_CODES_MACROS[i][k], 1, 100);
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a51      	ldr	r2, [pc, #324]	; (8000d68 <SendRoutinesOverUart+0x1a8>)
 8000c22:	1899      	adds	r1, r3, r2
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	2201      	movs	r2, #1
 8000c28:	484c      	ldr	r0, [pc, #304]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000c2a:	f006 fac6 	bl	80071ba <HAL_UART_Transmit>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	ddeb      	ble.n	8000c12 <SendRoutinesOverUart+0x52>

		HAL_UART_Transmit(&huart2, (uint8_t *)'\n', 1, 100);
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	210a      	movs	r1, #10
 8000c40:	4846      	ldr	r0, [pc, #280]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000c42:	f006 faba 	bl	80071ba <HAL_UART_Transmit>
	for(int i = 0; i < MAX_IR_CODES; i++)
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	2b13      	cmp	r3, #19
 8000c50:	ddc2      	ble.n	8000bd8 <SendRoutinesOverUart+0x18>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)"\nEL:\n", 5, 100);
 8000c52:	2364      	movs	r3, #100	; 0x64
 8000c54:	2205      	movs	r2, #5
 8000c56:	4945      	ldr	r1, [pc, #276]	; (8000d6c <SendRoutinesOverUart+0x1ac>)
 8000c58:	4840      	ldr	r0, [pc, #256]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000c5a:	f006 faae 	bl	80071ba <HAL_UART_Transmit>

	for(int i = 0; i < MAX_ELE_INPUTS; i++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	e02b      	b.n	8000cbc <SendRoutinesOverUart+0xfc>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"n:", 2, 100);
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	2202      	movs	r2, #2
 8000c68:	493d      	ldr	r1, [pc, #244]	; (8000d60 <SendRoutinesOverUart+0x1a0>)
 8000c6a:	483c      	ldr	r0, [pc, #240]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000c6c:	f006 faa5 	bl	80071ba <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)i, 1, 100);
 8000c70:	6939      	ldr	r1, [r7, #16]
 8000c72:	2364      	movs	r3, #100	; 0x64
 8000c74:	2201      	movs	r2, #1
 8000c76:	4839      	ldr	r0, [pc, #228]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000c78:	f006 fa9f 	bl	80071ba <HAL_UART_Transmit>

		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	e010      	b.n	8000ca4 <SendRoutinesOverUart+0xe4>
			HAL_UART_Transmit(&huart2, &ELE_INPUT_MACROS[i][k], 1, 100);
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a37      	ldr	r2, [pc, #220]	; (8000d70 <SendRoutinesOverUart+0x1b0>)
 8000c92:	1899      	adds	r1, r3, r2
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	2201      	movs	r2, #1
 8000c98:	4830      	ldr	r0, [pc, #192]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000c9a:	f006 fa8e 	bl	80071ba <HAL_UART_Transmit>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b05      	cmp	r3, #5
 8000ca8:	ddeb      	ble.n	8000c82 <SendRoutinesOverUart+0xc2>

		HAL_UART_Transmit(&huart2,(uint8_t *) '\n', 1, 100);
 8000caa:	2364      	movs	r3, #100	; 0x64
 8000cac:	2201      	movs	r2, #1
 8000cae:	210a      	movs	r1, #10
 8000cb0:	482a      	ldr	r0, [pc, #168]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000cb2:	f006 fa82 	bl	80071ba <HAL_UART_Transmit>
	for(int i = 0; i < MAX_ELE_INPUTS; i++)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	2b09      	cmp	r3, #9
 8000cc0:	ddd0      	ble.n	8000c64 <SendRoutinesOverUart+0xa4>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)"\nTM:\n", 5, 100);
 8000cc2:	2364      	movs	r3, #100	; 0x64
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	492b      	ldr	r1, [pc, #172]	; (8000d74 <SendRoutinesOverUart+0x1b4>)
 8000cc8:	4824      	ldr	r0, [pc, #144]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000cca:	f006 fa76 	bl	80071ba <HAL_UART_Transmit>
	for(int i = 0; i < MAX_TIME_MACROS; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	e039      	b.n	8000d48 <SendRoutinesOverUart+0x188>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"n:", 2, 100);
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4921      	ldr	r1, [pc, #132]	; (8000d60 <SendRoutinesOverUart+0x1a0>)
 8000cda:	4820      	ldr	r0, [pc, #128]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000cdc:	f006 fa6d 	bl	80071ba <HAL_UART_Transmit>
		for(int j = 0; j<BYTES_PER_TIME_FLAG; j++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	e00d      	b.n	8000d02 <SendRoutinesOverUart+0x142>
			HAL_UART_Transmit(&huart2, &TIME_FLAGS[i][j], 1, 100);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	009a      	lsls	r2, r3, #2
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <SendRoutinesOverUart+0x1b8>)
 8000cf0:	1899      	adds	r1, r3, r2
 8000cf2:	2364      	movs	r3, #100	; 0x64
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4819      	ldr	r0, [pc, #100]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000cf8:	f006 fa5f 	bl	80071ba <HAL_UART_Transmit>
		for(int j = 0; j<BYTES_PER_TIME_FLAG; j++)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	ddee      	ble.n	8000ce6 <SendRoutinesOverUart+0x126>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	e010      	b.n	8000d30 <SendRoutinesOverUart+0x170>
			HAL_UART_Transmit(&huart2, &TIME_MACROS[i][k], 1, 100);
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <SendRoutinesOverUart+0x1bc>)
 8000d1e:	1899      	adds	r1, r3, r2
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000d26:	f006 fa48 	bl	80071ba <HAL_UART_Transmit>
		for(int k = 0; k<BYTES_PER_EFFECT; k++)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	ddeb      	ble.n	8000d0e <SendRoutinesOverUart+0x14e>
		HAL_UART_Transmit(&huart2,(uint8_t *) '\n', 1, 100);
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	2201      	movs	r2, #1
 8000d3a:	210a      	movs	r1, #10
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <SendRoutinesOverUart+0x19c>)
 8000d3e:	f006 fa3c 	bl	80071ba <HAL_UART_Transmit>
	for(int i = 0; i < MAX_TIME_MACROS; i++)
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2b13      	cmp	r3, #19
 8000d4c:	ddc2      	ble.n	8000cd4 <SendRoutinesOverUart+0x114>
	}

}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	0800d1c4 	.word	0x0800d1c4
 8000d5c:	200015c8 	.word	0x200015c8
 8000d60:	0800d1cc 	.word	0x0800d1cc
 8000d64:	200016e8 	.word	0x200016e8
 8000d68:	20001710 	.word	0x20001710
 8000d6c:	0800d1d0 	.word	0x0800d1d0
 8000d70:	20001788 	.word	0x20001788
 8000d74:	0800d1d8 	.word	0x0800d1d8
 8000d78:	200017c4 	.word	0x200017c4
 8000d7c:	20001814 	.word	0x20001814

08000d80 <UartCheckReceived>:
void UartCheckReceived()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	; 0x30
 8000d84:	af00      	add	r7, sp, #0
	if(USB_RX_BYTES_RECEIVED > 0)
 8000d86:	4b91      	ldr	r3, [pc, #580]	; (8000fcc <UartCheckReceived+0x24c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 833e 	beq.w	800140c <UartCheckReceived+0x68c>
	{
		if(ROUTINES_WRITE_FLAG == 1)
 8000d90:	4b8f      	ldr	r3, [pc, #572]	; (8000fd0 <UartCheckReceived+0x250>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 81c4 	bne.w	8001122 <UartCheckReceived+0x3a2>
		{
			if(USB_RX_BYTES_RECEIVED >= 3 && USB_RX_BUFF[0] == 'E' && USB_RX_BUFF[1] == 'N' && USB_RX_BUFF[2] == 'D' )
 8000d9a:	4b8c      	ldr	r3, [pc, #560]	; (8000fcc <UartCheckReceived+0x24c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d919      	bls.n	8000dd6 <UartCheckReceived+0x56>
 8000da2:	4b8c      	ldr	r3, [pc, #560]	; (8000fd4 <UartCheckReceived+0x254>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b45      	cmp	r3, #69	; 0x45
 8000da8:	d115      	bne.n	8000dd6 <UartCheckReceived+0x56>
 8000daa:	4b8a      	ldr	r3, [pc, #552]	; (8000fd4 <UartCheckReceived+0x254>)
 8000dac:	785b      	ldrb	r3, [r3, #1]
 8000dae:	2b4e      	cmp	r3, #78	; 0x4e
 8000db0:	d111      	bne.n	8000dd6 <UartCheckReceived+0x56>
 8000db2:	4b88      	ldr	r3, [pc, #544]	; (8000fd4 <UartCheckReceived+0x254>)
 8000db4:	789b      	ldrb	r3, [r3, #2]
 8000db6:	2b44      	cmp	r3, #68	; 0x44
 8000db8:	d10d      	bne.n	8000dd6 <UartCheckReceived+0x56>
			{
				CDC_Transmit_FS(UART_RESPONSE_END, sizeof(UART_RESPONSE_END));
 8000dba:	2107      	movs	r1, #7
 8000dbc:	4886      	ldr	r0, [pc, #536]	; (8000fd8 <UartCheckReceived+0x258>)
 8000dbe:	f00b f8c1 	bl	800bf44 <CDC_Transmit_FS>
				ROUTINES_WRITE_FLAG = 0;
 8000dc2:	4b83      	ldr	r3, [pc, #524]	; (8000fd0 <UartCheckReceived+0x250>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
				SAVING_IR_POS = 0;
 8000dc8:	4b84      	ldr	r3, [pc, #528]	; (8000fdc <UartCheckReceived+0x25c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
				SAVING_TIME_POS = 0;
 8000dce:	4b84      	ldr	r3, [pc, #528]	; (8000fe0 <UartCheckReceived+0x260>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	e317      	b.n	8001406 <UartCheckReceived+0x686>

			}else if(USB_RX_BYTES_RECEIVED >= 14 && USB_RX_BUFF[0] == 'S' && USB_RX_BUFF[1] == 'V' && USB_RX_BUFF[2] == '+'){
 8000dd6:	4b7d      	ldr	r3, [pc, #500]	; (8000fcc <UartCheckReceived+0x24c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b0d      	cmp	r3, #13
 8000ddc:	f240 8313 	bls.w	8001406 <UartCheckReceived+0x686>
 8000de0:	4b7c      	ldr	r3, [pc, #496]	; (8000fd4 <UartCheckReceived+0x254>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b53      	cmp	r3, #83	; 0x53
 8000de6:	f040 830e 	bne.w	8001406 <UartCheckReceived+0x686>
 8000dea:	4b7a      	ldr	r3, [pc, #488]	; (8000fd4 <UartCheckReceived+0x254>)
 8000dec:	785b      	ldrb	r3, [r3, #1]
 8000dee:	2b56      	cmp	r3, #86	; 0x56
 8000df0:	f040 8309 	bne.w	8001406 <UartCheckReceived+0x686>
 8000df4:	4b77      	ldr	r3, [pc, #476]	; (8000fd4 <UartCheckReceived+0x254>)
 8000df6:	789b      	ldrb	r3, [r3, #2]
 8000df8:	2b2b      	cmp	r3, #43	; 0x2b
 8000dfa:	f040 8304 	bne.w	8001406 <UartCheckReceived+0x686>

				if(USB_RX_BYTES_RECEIVED >= 15 && USB_RX_BUFF[3] == 'I' && USB_RX_BUFF[4] == 'R')
 8000dfe:	4b73      	ldr	r3, [pc, #460]	; (8000fcc <UartCheckReceived+0x24c>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b0e      	cmp	r3, #14
 8000e04:	d97c      	bls.n	8000f00 <UartCheckReceived+0x180>
 8000e06:	4b73      	ldr	r3, [pc, #460]	; (8000fd4 <UartCheckReceived+0x254>)
 8000e08:	78db      	ldrb	r3, [r3, #3]
 8000e0a:	2b49      	cmp	r3, #73	; 0x49
 8000e0c:	d178      	bne.n	8000f00 <UartCheckReceived+0x180>
 8000e0e:	4b71      	ldr	r3, [pc, #452]	; (8000fd4 <UartCheckReceived+0x254>)
 8000e10:	791b      	ldrb	r3, [r3, #4]
 8000e12:	2b52      	cmp	r3, #82	; 0x52
 8000e14:	d174      	bne.n	8000f00 <UartCheckReceived+0x180>
				{
					if(SAVING_IR_POS < MAX_IR_CODES)
 8000e16:	4b71      	ldr	r3, [pc, #452]	; (8000fdc <UartCheckReceived+0x25c>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b13      	cmp	r3, #19
 8000e1c:	f200 82f3 	bhi.w	8001406 <UartCheckReceived+0x686>
					{
						//IR ADDR
						IR_CODES_FLAGS[SAVING_IR_POS][0] = USB_RX_BUFF[5];
 8000e20:	4b6e      	ldr	r3, [pc, #440]	; (8000fdc <UartCheckReceived+0x25c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <UartCheckReceived+0x254>)
 8000e28:	7959      	ldrb	r1, [r3, #5]
 8000e2a:	4b6e      	ldr	r3, [pc, #440]	; (8000fe4 <UartCheckReceived+0x264>)
 8000e2c:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
						//IR COMMAND
						IR_CODES_FLAGS[SAVING_IR_POS][1] = USB_RX_BUFF[6];
 8000e30:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <UartCheckReceived+0x25c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	4b67      	ldr	r3, [pc, #412]	; (8000fd4 <UartCheckReceived+0x254>)
 8000e38:	7999      	ldrb	r1, [r3, #6]
 8000e3a:	4a6a      	ldr	r2, [pc, #424]	; (8000fe4 <UartCheckReceived+0x264>)
 8000e3c:	0043      	lsls	r3, r0, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	460a      	mov	r2, r1
 8000e42:	705a      	strb	r2, [r3, #1]
						//ACTIVE STRIPS
						IR_CODES_MACROS[SAVING_IR_POS][0] = USB_RX_BUFF[8];
 8000e44:	4b65      	ldr	r3, [pc, #404]	; (8000fdc <UartCheckReceived+0x25c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4b62      	ldr	r3, [pc, #392]	; (8000fd4 <UartCheckReceived+0x254>)
 8000e4c:	7a18      	ldrb	r0, [r3, #8]
 8000e4e:	4a66      	ldr	r2, [pc, #408]	; (8000fe8 <UartCheckReceived+0x268>)
 8000e50:	460b      	mov	r3, r1
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	440b      	add	r3, r1
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	701a      	strb	r2, [r3, #0]
						IR_CODES_MACROS[SAVING_IR_POS][1] = USB_RX_BUFF[9];
 8000e5e:	4b5f      	ldr	r3, [pc, #380]	; (8000fdc <UartCheckReceived+0x25c>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <UartCheckReceived+0x254>)
 8000e66:	7a58      	ldrb	r0, [r3, #9]
 8000e68:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <UartCheckReceived+0x268>)
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	440b      	add	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	3301      	adds	r3, #1
 8000e76:	4602      	mov	r2, r0
 8000e78:	701a      	strb	r2, [r3, #0]
						//EFFECT
						IR_CODES_MACROS[SAVING_IR_POS][2] = USB_RX_BUFF[11];
 8000e7a:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <UartCheckReceived+0x25c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <UartCheckReceived+0x254>)
 8000e82:	7ad8      	ldrb	r0, [r3, #11]
 8000e84:	4a58      	ldr	r2, [pc, #352]	; (8000fe8 <UartCheckReceived+0x268>)
 8000e86:	460b      	mov	r3, r1
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	440b      	add	r3, r1
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4413      	add	r3, r2
 8000e90:	3302      	adds	r3, #2
 8000e92:	4602      	mov	r2, r0
 8000e94:	701a      	strb	r2, [r3, #0]
						IR_CODES_MACROS[SAVING_IR_POS][3] = USB_RX_BUFF[12];
 8000e96:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <UartCheckReceived+0x25c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <UartCheckReceived+0x254>)
 8000e9e:	7b18      	ldrb	r0, [r3, #12]
 8000ea0:	4a51      	ldr	r2, [pc, #324]	; (8000fe8 <UartCheckReceived+0x268>)
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	440b      	add	r3, r1
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	3303      	adds	r3, #3
 8000eae:	4602      	mov	r2, r0
 8000eb0:	701a      	strb	r2, [r3, #0]
						IR_CODES_MACROS[SAVING_IR_POS][4] = USB_RX_BUFF[13];
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <UartCheckReceived+0x25c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <UartCheckReceived+0x254>)
 8000eba:	7b58      	ldrb	r0, [r3, #13]
 8000ebc:	4a4a      	ldr	r2, [pc, #296]	; (8000fe8 <UartCheckReceived+0x268>)
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	440b      	add	r3, r1
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3304      	adds	r3, #4
 8000eca:	4602      	mov	r2, r0
 8000ecc:	701a      	strb	r2, [r3, #0]
						IR_CODES_MACROS[SAVING_IR_POS][5] = USB_RX_BUFF[14];
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <UartCheckReceived+0x25c>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4b3f      	ldr	r3, [pc, #252]	; (8000fd4 <UartCheckReceived+0x254>)
 8000ed6:	7b98      	ldrb	r0, [r3, #14]
 8000ed8:	4a43      	ldr	r2, [pc, #268]	; (8000fe8 <UartCheckReceived+0x268>)
 8000eda:	460b      	mov	r3, r1
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	440b      	add	r3, r1
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3305      	adds	r3, #5
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	701a      	strb	r2, [r3, #0]

						SAVING_IR_POS++;
 8000eea:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <UartCheckReceived+0x25c>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <UartCheckReceived+0x25c>)
 8000ef4:	701a      	strb	r2, [r3, #0]
						CDC_Transmit_FS(UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK));
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	483c      	ldr	r0, [pc, #240]	; (8000fec <UartCheckReceived+0x26c>)
 8000efa:	f00b f823 	bl	800bf44 <CDC_Transmit_FS>
					if(SAVING_IR_POS < MAX_IR_CODES)
 8000efe:	e282      	b.n	8001406 <UartCheckReceived+0x686>
					}
				} else if(USB_RX_BUFF[3] == 'E' && USB_RX_BUFF[4] == 'L')
 8000f00:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f02:	78db      	ldrb	r3, [r3, #3]
 8000f04:	2b45      	cmp	r3, #69	; 0x45
 8000f06:	d175      	bne.n	8000ff4 <UartCheckReceived+0x274>
 8000f08:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	2b4c      	cmp	r3, #76	; 0x4c
 8000f0e:	d171      	bne.n	8000ff4 <UartCheckReceived+0x274>
				{
					if(USB_RX_BUFF[5] < MAX_ELE_INPUTS)
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f12:	795b      	ldrb	r3, [r3, #5]
 8000f14:	2b09      	cmp	r3, #9
 8000f16:	f200 8276 	bhi.w	8001406 <UartCheckReceived+0x686>
					{
						//ACTIVE STRIPS
						ELE_INPUT_MACROS[USB_RX_BUFF[5]][0] = USB_RX_BUFF[7];
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f1c:	795b      	ldrb	r3, [r3, #5]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f22:	79d8      	ldrb	r0, [r3, #7]
 8000f24:	4a32      	ldr	r2, [pc, #200]	; (8000ff0 <UartCheckReceived+0x270>)
 8000f26:	460b      	mov	r3, r1
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	440b      	add	r3, r1
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	4602      	mov	r2, r0
 8000f32:	701a      	strb	r2, [r3, #0]
						ELE_INPUT_MACROS[USB_RX_BUFF[5]][1] = USB_RX_BUFF[8];
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f36:	795b      	ldrb	r3, [r3, #5]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f3c:	7a18      	ldrb	r0, [r3, #8]
 8000f3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ff0 <UartCheckReceived+0x270>)
 8000f40:	460b      	mov	r3, r1
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	440b      	add	r3, r1
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	701a      	strb	r2, [r3, #0]
						//EFFECT
						ELE_INPUT_MACROS[USB_RX_BUFF[5]][2] = USB_RX_BUFF[10];
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f52:	795b      	ldrb	r3, [r3, #5]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f58:	7a98      	ldrb	r0, [r3, #10]
 8000f5a:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <UartCheckReceived+0x270>)
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	440b      	add	r3, r1
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	3302      	adds	r3, #2
 8000f68:	4602      	mov	r2, r0
 8000f6a:	701a      	strb	r2, [r3, #0]
						ELE_INPUT_MACROS[USB_RX_BUFF[5]][3] = USB_RX_BUFF[11];
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f6e:	795b      	ldrb	r3, [r3, #5]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f74:	7ad8      	ldrb	r0, [r3, #11]
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <UartCheckReceived+0x270>)
 8000f78:	460b      	mov	r3, r1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	440b      	add	r3, r1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	3303      	adds	r3, #3
 8000f84:	4602      	mov	r2, r0
 8000f86:	701a      	strb	r2, [r3, #0]
						ELE_INPUT_MACROS[USB_RX_BUFF[5]][4] = USB_RX_BUFF[12];
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f8a:	795b      	ldrb	r3, [r3, #5]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <UartCheckReceived+0x254>)
 8000f90:	7b18      	ldrb	r0, [r3, #12]
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <UartCheckReceived+0x270>)
 8000f94:	460b      	mov	r3, r1
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	440b      	add	r3, r1
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	701a      	strb	r2, [r3, #0]
						ELE_INPUT_MACROS[USB_RX_BUFF[5]][5] = USB_RX_BUFF[13];
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <UartCheckReceived+0x254>)
 8000fa6:	795b      	ldrb	r3, [r3, #5]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <UartCheckReceived+0x254>)
 8000fac:	7b58      	ldrb	r0, [r3, #13]
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <UartCheckReceived+0x270>)
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	440b      	add	r3, r1
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	3305      	adds	r3, #5
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	701a      	strb	r2, [r3, #0]
						CDC_Transmit_FS(UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK));
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <UartCheckReceived+0x26c>)
 8000fc4:	f00a ffbe 	bl	800bf44 <CDC_Transmit_FS>
					if(USB_RX_BUFF[5] < MAX_ELE_INPUTS)
 8000fc8:	e21d      	b.n	8001406 <UartCheckReceived+0x686>
 8000fca:	bf00      	nop
 8000fcc:	200016e4 	.word	0x200016e4
 8000fd0:	2000169f 	.word	0x2000169f
 8000fd4:	200016a4 	.word	0x200016a4
 8000fd8:	2000006c 	.word	0x2000006c
 8000fdc:	200016a1 	.word	0x200016a1
 8000fe0:	200016a2 	.word	0x200016a2
 8000fe4:	200016e8 	.word	0x200016e8
 8000fe8:	20001710 	.word	0x20001710
 8000fec:	20000068 	.word	0x20000068
 8000ff0:	20001788 	.word	0x20001788
					}
				} else if(USB_RX_BYTES_RECEIVED >= 17 && USB_RX_BUFF[3] == 'T' && USB_RX_BUFF[4] == 'M')
 8000ff4:	4b9d      	ldr	r3, [pc, #628]	; (800126c <UartCheckReceived+0x4ec>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b10      	cmp	r3, #16
 8000ffa:	f240 8204 	bls.w	8001406 <UartCheckReceived+0x686>
 8000ffe:	4b9c      	ldr	r3, [pc, #624]	; (8001270 <UartCheckReceived+0x4f0>)
 8001000:	78db      	ldrb	r3, [r3, #3]
 8001002:	2b54      	cmp	r3, #84	; 0x54
 8001004:	f040 81ff 	bne.w	8001406 <UartCheckReceived+0x686>
 8001008:	4b99      	ldr	r3, [pc, #612]	; (8001270 <UartCheckReceived+0x4f0>)
 800100a:	791b      	ldrb	r3, [r3, #4]
 800100c:	2b4d      	cmp	r3, #77	; 0x4d
 800100e:	f040 81fa 	bne.w	8001406 <UartCheckReceived+0x686>
				{
					if(SAVING_TIME_POS < MAX_TIME_MACROS)
 8001012:	4b98      	ldr	r3, [pc, #608]	; (8001274 <UartCheckReceived+0x4f4>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b13      	cmp	r3, #19
 8001018:	f200 81f5 	bhi.w	8001406 <UartCheckReceived+0x686>
					{
						//START TIME
						TIME_FLAGS[SAVING_TIME_POS][0] = USB_RX_BUFF[5];
 800101c:	4b95      	ldr	r3, [pc, #596]	; (8001274 <UartCheckReceived+0x4f4>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b93      	ldr	r3, [pc, #588]	; (8001270 <UartCheckReceived+0x4f0>)
 8001024:	7959      	ldrb	r1, [r3, #5]
 8001026:	4b94      	ldr	r3, [pc, #592]	; (8001278 <UartCheckReceived+0x4f8>)
 8001028:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
						TIME_FLAGS[SAVING_TIME_POS][1] = USB_RX_BUFF[6];
 800102c:	4b91      	ldr	r3, [pc, #580]	; (8001274 <UartCheckReceived+0x4f4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <UartCheckReceived+0x4f0>)
 8001034:	7999      	ldrb	r1, [r3, #6]
 8001036:	4a90      	ldr	r2, [pc, #576]	; (8001278 <UartCheckReceived+0x4f8>)
 8001038:	0083      	lsls	r3, r0, #2
 800103a:	4413      	add	r3, r2
 800103c:	460a      	mov	r2, r1
 800103e:	705a      	strb	r2, [r3, #1]
						//FOR TIME (TWO 8BITS = 1 16BIT)
						TIME_FLAGS[SAVING_TIME_POS][2] = USB_RX_BUFF[7];
 8001040:	4b8c      	ldr	r3, [pc, #560]	; (8001274 <UartCheckReceived+0x4f4>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	4b8a      	ldr	r3, [pc, #552]	; (8001270 <UartCheckReceived+0x4f0>)
 8001048:	79d9      	ldrb	r1, [r3, #7]
 800104a:	4a8b      	ldr	r2, [pc, #556]	; (8001278 <UartCheckReceived+0x4f8>)
 800104c:	0083      	lsls	r3, r0, #2
 800104e:	4413      	add	r3, r2
 8001050:	460a      	mov	r2, r1
 8001052:	709a      	strb	r2, [r3, #2]
						TIME_FLAGS[SAVING_TIME_POS][3] = USB_RX_BUFF[8];
 8001054:	4b87      	ldr	r3, [pc, #540]	; (8001274 <UartCheckReceived+0x4f4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <UartCheckReceived+0x4f0>)
 800105c:	7a19      	ldrb	r1, [r3, #8]
 800105e:	4a86      	ldr	r2, [pc, #536]	; (8001278 <UartCheckReceived+0x4f8>)
 8001060:	0083      	lsls	r3, r0, #2
 8001062:	4413      	add	r3, r2
 8001064:	460a      	mov	r2, r1
 8001066:	70da      	strb	r2, [r3, #3]
						//ACTIVE STRIPS
						TIME_MACROS[SAVING_TIME_POS][0] = USB_RX_BUFF[10];
 8001068:	4b82      	ldr	r3, [pc, #520]	; (8001274 <UartCheckReceived+0x4f4>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	4b80      	ldr	r3, [pc, #512]	; (8001270 <UartCheckReceived+0x4f0>)
 8001070:	7a98      	ldrb	r0, [r3, #10]
 8001072:	4a82      	ldr	r2, [pc, #520]	; (800127c <UartCheckReceived+0x4fc>)
 8001074:	460b      	mov	r3, r1
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	440b      	add	r3, r1
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	4602      	mov	r2, r0
 8001080:	701a      	strb	r2, [r3, #0]
						TIME_MACROS[SAVING_TIME_POS][1] = USB_RX_BUFF[11];
 8001082:	4b7c      	ldr	r3, [pc, #496]	; (8001274 <UartCheckReceived+0x4f4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	4b79      	ldr	r3, [pc, #484]	; (8001270 <UartCheckReceived+0x4f0>)
 800108a:	7ad8      	ldrb	r0, [r3, #11]
 800108c:	4a7b      	ldr	r2, [pc, #492]	; (800127c <UartCheckReceived+0x4fc>)
 800108e:	460b      	mov	r3, r1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	440b      	add	r3, r1
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	3301      	adds	r3, #1
 800109a:	4602      	mov	r2, r0
 800109c:	701a      	strb	r2, [r3, #0]
						//EFFECT
						TIME_MACROS[SAVING_TIME_POS][0] = USB_RX_BUFF[13];
 800109e:	4b75      	ldr	r3, [pc, #468]	; (8001274 <UartCheckReceived+0x4f4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4b72      	ldr	r3, [pc, #456]	; (8001270 <UartCheckReceived+0x4f0>)
 80010a6:	7b58      	ldrb	r0, [r3, #13]
 80010a8:	4a74      	ldr	r2, [pc, #464]	; (800127c <UartCheckReceived+0x4fc>)
 80010aa:	460b      	mov	r3, r1
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	440b      	add	r3, r1
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	4602      	mov	r2, r0
 80010b6:	701a      	strb	r2, [r3, #0]
						TIME_MACROS[SAVING_TIME_POS][1] = USB_RX_BUFF[13];
 80010b8:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <UartCheckReceived+0x4f4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	4b6c      	ldr	r3, [pc, #432]	; (8001270 <UartCheckReceived+0x4f0>)
 80010c0:	7b58      	ldrb	r0, [r3, #13]
 80010c2:	4a6e      	ldr	r2, [pc, #440]	; (800127c <UartCheckReceived+0x4fc>)
 80010c4:	460b      	mov	r3, r1
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	440b      	add	r3, r1
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	3301      	adds	r3, #1
 80010d0:	4602      	mov	r2, r0
 80010d2:	701a      	strb	r2, [r3, #0]
						TIME_MACROS[SAVING_TIME_POS][2] = USB_RX_BUFF[13];
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <UartCheckReceived+0x4f4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	4b65      	ldr	r3, [pc, #404]	; (8001270 <UartCheckReceived+0x4f0>)
 80010dc:	7b58      	ldrb	r0, [r3, #13]
 80010de:	4a67      	ldr	r2, [pc, #412]	; (800127c <UartCheckReceived+0x4fc>)
 80010e0:	460b      	mov	r3, r1
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	440b      	add	r3, r1
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	3302      	adds	r3, #2
 80010ec:	4602      	mov	r2, r0
 80010ee:	701a      	strb	r2, [r3, #0]
						TIME_MACROS[SAVING_TIME_POS][3] = USB_RX_BUFF[13];
 80010f0:	4b60      	ldr	r3, [pc, #384]	; (8001274 <UartCheckReceived+0x4f4>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <UartCheckReceived+0x4f0>)
 80010f8:	7b58      	ldrb	r0, [r3, #13]
 80010fa:	4a60      	ldr	r2, [pc, #384]	; (800127c <UartCheckReceived+0x4fc>)
 80010fc:	460b      	mov	r3, r1
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	440b      	add	r3, r1
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	3303      	adds	r3, #3
 8001108:	4602      	mov	r2, r0
 800110a:	701a      	strb	r2, [r3, #0]

						SAVING_TIME_POS++;
 800110c:	4b59      	ldr	r3, [pc, #356]	; (8001274 <UartCheckReceived+0x4f4>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b57      	ldr	r3, [pc, #348]	; (8001274 <UartCheckReceived+0x4f4>)
 8001116:	701a      	strb	r2, [r3, #0]
						CDC_Transmit_FS(UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK));
 8001118:	2103      	movs	r1, #3
 800111a:	4859      	ldr	r0, [pc, #356]	; (8001280 <UartCheckReceived+0x500>)
 800111c:	f00a ff12 	bl	800bf44 <CDC_Transmit_FS>
 8001120:	e171      	b.n	8001406 <UartCheckReceived+0x686>
					}
				}

			}

		}else if(UART_SET_TIME == 1)
 8001122:	4b58      	ldr	r3, [pc, #352]	; (8001284 <UartCheckReceived+0x504>)
 8001124:	2b01      	cmp	r3, #1
 8001126:	f000 816e 	beq.w	8001406 <UartCheckReceived+0x686>
		{
			/*GET TIME HERE*/
		}else if(USB_RX_BYTES_RECEIVED == 4)
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <UartCheckReceived+0x4ec>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d118      	bne.n	8001164 <UartCheckReceived+0x3e4>
		{
			  if(USB_RX_BUFF[0] == 'A' && USB_RX_BUFF[1] == 'T' && USB_RX_BUFF[2] == '\r' && USB_RX_BUFF[3] == '\n')
 8001132:	4b4f      	ldr	r3, [pc, #316]	; (8001270 <UartCheckReceived+0x4f0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b41      	cmp	r3, #65	; 0x41
 8001138:	f040 8165 	bne.w	8001406 <UartCheckReceived+0x686>
 800113c:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <UartCheckReceived+0x4f0>)
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	2b54      	cmp	r3, #84	; 0x54
 8001142:	f040 8160 	bne.w	8001406 <UartCheckReceived+0x686>
 8001146:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <UartCheckReceived+0x4f0>)
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	2b0d      	cmp	r3, #13
 800114c:	f040 815b 	bne.w	8001406 <UartCheckReceived+0x686>
 8001150:	4b47      	ldr	r3, [pc, #284]	; (8001270 <UartCheckReceived+0x4f0>)
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	2b0a      	cmp	r3, #10
 8001156:	f040 8156 	bne.w	8001406 <UartCheckReceived+0x686>
			  {
				  CDC_Transmit_FS(UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK));
 800115a:	2103      	movs	r1, #3
 800115c:	4848      	ldr	r0, [pc, #288]	; (8001280 <UartCheckReceived+0x500>)
 800115e:	f00a fef1 	bl	800bf44 <CDC_Transmit_FS>
 8001162:	e150      	b.n	8001406 <UartCheckReceived+0x686>
			  }
		}else if(USB_RX_BYTES_RECEIVED > 4 && USB_RX_BUFF[0] == 'A' && USB_RX_BUFF[1] == 'T' && USB_RX_BUFF[2] == '+')
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <UartCheckReceived+0x4ec>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b04      	cmp	r3, #4
 800116a:	f240 814c 	bls.w	8001406 <UartCheckReceived+0x686>
 800116e:	4b40      	ldr	r3, [pc, #256]	; (8001270 <UartCheckReceived+0x4f0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b41      	cmp	r3, #65	; 0x41
 8001174:	f040 8147 	bne.w	8001406 <UartCheckReceived+0x686>
 8001178:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <UartCheckReceived+0x4f0>)
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	2b54      	cmp	r3, #84	; 0x54
 800117e:	f040 8142 	bne.w	8001406 <UartCheckReceived+0x686>
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <UartCheckReceived+0x4f0>)
 8001184:	789b      	ldrb	r3, [r3, #2]
 8001186:	2b2b      	cmp	r3, #43	; 0x2b
 8001188:	f040 813d 	bne.w	8001406 <UartCheckReceived+0x686>
		  	  {
			  	  if(USB_RX_BYTES_RECEIVED == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_GET_IR_SENTENCE))
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <UartCheckReceived+0x4ec>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <UartCheckReceived+0x508>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	4b3c      	ldr	r3, [pc, #240]	; (800128c <UartCheckReceived+0x50c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	440b      	add	r3, r1
 800119e:	3306      	adds	r3, #6
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d123      	bne.n	80011ec <UartCheckReceived+0x46c>
			  	  {
					  uint8_t UART_GET_IR_FLAG = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  for(int i = 0; i<sizeof(UART_GET_IR_SENTENCE); i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ae:	e012      	b.n	80011d6 <UartCheckReceived+0x456>
						  if(USB_RX_BUFF[i+UART_SENTENCE_HEAD_BYTES] !=  UART_GET_IR_SENTENCE[i])
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <UartCheckReceived+0x508>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b8:	4413      	add	r3, r2
 80011ba:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <UartCheckReceived+0x4f0>)
 80011bc:	5cd2      	ldrb	r2, [r2, r3]
 80011be:	4934      	ldr	r1, [pc, #208]	; (8001290 <UartCheckReceived+0x510>)
 80011c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c2:	440b      	add	r3, r1
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d002      	beq.n	80011d0 <UartCheckReceived+0x450>
							  UART_GET_IR_FLAG = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  for(int i = 0; i<sizeof(UART_GET_IR_SENTENCE); i++)
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	3301      	adds	r3, #1
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d9e9      	bls.n	80011b0 <UartCheckReceived+0x430>
					  GET_IR_FLAG = UART_GET_IR_FLAG;
 80011dc:	4a2d      	ldr	r2, [pc, #180]	; (8001294 <UartCheckReceived+0x514>)
 80011de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011e2:	7013      	strb	r3, [r2, #0]

					  CDC_Transmit_FS(UART_GET_IR_RESPONSE, sizeof(UART_GET_IR_RESPONSE));
 80011e4:	2110      	movs	r1, #16
 80011e6:	482c      	ldr	r0, [pc, #176]	; (8001298 <UartCheckReceived+0x518>)
 80011e8:	f00a feac 	bl	800bf44 <CDC_Transmit_FS>
			  	  }
			  	  if(USB_RX_BYTES_RECEIVED == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_ROUTINES_READ_SENTENCE))
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <UartCheckReceived+0x4ec>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <UartCheckReceived+0x508>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <UartCheckReceived+0x50c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	440b      	add	r3, r1
 80011fe:	330d      	adds	r3, #13
 8001200:	429a      	cmp	r2, r3
 8001202:	d121      	bne.n	8001248 <UartCheckReceived+0x4c8>
			  	  {
					  uint8_t UART_ROUTINES_READ_FLAG = 1;
 8001204:	2301      	movs	r3, #1
 8001206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					  for(int i = 0; i<sizeof(UART_ROUTINES_READ_SENTENCE); i++)
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
 800120e:	e012      	b.n	8001236 <UartCheckReceived+0x4b6>
						  if(USB_RX_BUFF[i+UART_SENTENCE_HEAD_BYTES] !=  UART_ROUTINES_READ_SENTENCE[i])
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <UartCheckReceived+0x508>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	4413      	add	r3, r2
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <UartCheckReceived+0x4f0>)
 800121c:	5cd2      	ldrb	r2, [r2, r3]
 800121e:	491f      	ldr	r1, [pc, #124]	; (800129c <UartCheckReceived+0x51c>)
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	440b      	add	r3, r1
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d002      	beq.n	8001230 <UartCheckReceived+0x4b0>
							  UART_ROUTINES_READ_FLAG = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					  for(int i = 0; i<sizeof(UART_ROUTINES_READ_SENTENCE); i++)
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	3301      	adds	r3, #1
 8001234:	623b      	str	r3, [r7, #32]
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d9e9      	bls.n	8001210 <UartCheckReceived+0x490>
					  if(UART_ROUTINES_READ_FLAG == 1)
 800123c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <UartCheckReceived+0x4c8>
						  SendRoutinesOverUart();
 8001244:	f7ff fcbc 	bl	8000bc0 <SendRoutinesOverUart>
			  	  }
			  	  if(USB_RX_BYTES_RECEIVED == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_ROUTINES_WRITE_SENTENCE))
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <UartCheckReceived+0x4ec>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <UartCheckReceived+0x508>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <UartCheckReceived+0x50c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	440b      	add	r3, r1
 800125a:	330e      	adds	r3, #14
 800125c:	429a      	cmp	r2, r3
 800125e:	d13e      	bne.n	80012de <UartCheckReceived+0x55e>
			  	  {
					  uint8_t UART_ROUTINES_WRITE_FLAG = 1;
 8001260:	2301      	movs	r3, #1
 8001262:	77fb      	strb	r3, [r7, #31]
					  for(int i = 0; i<sizeof(UART_ROUTINES_WRITE_SENTENCE); i++)
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e02c      	b.n	80012c4 <UartCheckReceived+0x544>
 800126a:	bf00      	nop
 800126c:	200016e4 	.word	0x200016e4
 8001270:	200016a4 	.word	0x200016a4
 8001274:	200016a2 	.word	0x200016a2
 8001278:	200017c4 	.word	0x200017c4
 800127c:	20001814 	.word	0x20001814
 8001280:	20000068 	.word	0x20000068
 8001284:	2000005c 	.word	0x2000005c
 8001288:	20000074 	.word	0x20000074
 800128c:	20000073 	.word	0x20000073
 8001290:	20000004 	.word	0x20000004
 8001294:	2000169e 	.word	0x2000169e
 8001298:	2000000c 	.word	0x2000000c
 800129c:	2000001c 	.word	0x2000001c
						  if(USB_RX_BUFF[i+UART_SENTENCE_HEAD_BYTES] !=  UART_ROUTINES_WRITE_SENTENCE[i])
 80012a0:	4b5c      	ldr	r3, [pc, #368]	; (8001414 <UartCheckReceived+0x694>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a5b      	ldr	r2, [pc, #364]	; (8001418 <UartCheckReceived+0x698>)
 80012ac:	5cd2      	ldrb	r2, [r2, r3]
 80012ae:	495b      	ldr	r1, [pc, #364]	; (800141c <UartCheckReceived+0x69c>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	440b      	add	r3, r1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d001      	beq.n	80012be <UartCheckReceived+0x53e>
							  UART_ROUTINES_WRITE_FLAG = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	77fb      	strb	r3, [r7, #31]
					  for(int i = 0; i<sizeof(UART_ROUTINES_WRITE_SENTENCE); i++)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b0d      	cmp	r3, #13
 80012c8:	d9ea      	bls.n	80012a0 <UartCheckReceived+0x520>
					  ROUTINES_WRITE_FLAG = UART_ROUTINES_WRITE_FLAG;
 80012ca:	4a55      	ldr	r2, [pc, #340]	; (8001420 <UartCheckReceived+0x6a0>)
 80012cc:	7ffb      	ldrb	r3, [r7, #31]
 80012ce:	7013      	strb	r3, [r2, #0]
					  if(UART_ROUTINES_WRITE_FLAG == 1)
 80012d0:	7ffb      	ldrb	r3, [r7, #31]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d103      	bne.n	80012de <UartCheckReceived+0x55e>
						  CDC_Transmit_FS(UART_ROUTINES_WRITE_RESPONSE, sizeof(UART_ROUTINES_WRITE_RESPONSE));
 80012d6:	2108      	movs	r1, #8
 80012d8:	4852      	ldr	r0, [pc, #328]	; (8001424 <UartCheckReceived+0x6a4>)
 80012da:	f00a fe33 	bl	800bf44 <CDC_Transmit_FS>
			  	  }
			  	  if(USB_RX_BYTES_RECEIVED == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_ROUTINES_SAVE_SENTENCE))
 80012de:	4b52      	ldr	r3, [pc, #328]	; (8001428 <UartCheckReceived+0x6a8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <UartCheckReceived+0x694>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4b50      	ldr	r3, [pc, #320]	; (800142c <UartCheckReceived+0x6ac>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	440b      	add	r3, r1
 80012f0:	330b      	adds	r3, #11
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d122      	bne.n	800133c <UartCheckReceived+0x5bc>
			  	  {
			  		uint8_t UART_ROUTINES_SAVE_FLAG = 1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	75fb      	strb	r3, [r7, #23]
			  		for(int i = 0; i<sizeof(UART_ROUTINES_SAVE_SENTENCE); i++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	e011      	b.n	8001324 <UartCheckReceived+0x5a4>
			  			if(USB_RX_BUFF[i+UART_SENTENCE_HEAD_BYTES] !=  UART_ROUTINES_SAVE_SENTENCE[i])
 8001300:	4b44      	ldr	r3, [pc, #272]	; (8001414 <UartCheckReceived+0x694>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4413      	add	r3, r2
 800130a:	4a43      	ldr	r2, [pc, #268]	; (8001418 <UartCheckReceived+0x698>)
 800130c:	5cd2      	ldrb	r2, [r2, r3]
 800130e:	4948      	ldr	r1, [pc, #288]	; (8001430 <UartCheckReceived+0x6b0>)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	440b      	add	r3, r1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d001      	beq.n	800131e <UartCheckReceived+0x59e>
			  				UART_ROUTINES_SAVE_FLAG = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
			  		for(int i = 0; i<sizeof(UART_ROUTINES_SAVE_SENTENCE); i++)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	3301      	adds	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	2b0a      	cmp	r3, #10
 8001328:	d9ea      	bls.n	8001300 <UartCheckReceived+0x580>
			  		if(UART_ROUTINES_SAVE_FLAG == 1)
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <UartCheckReceived+0x5bc>
			  			{
			  				saveMem();
 8001330:	f000 fbee 	bl	8001b10 <saveMem>
			  				CDC_Transmit_FS(UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK));
 8001334:	2103      	movs	r1, #3
 8001336:	483f      	ldr	r0, [pc, #252]	; (8001434 <UartCheckReceived+0x6b4>)
 8001338:	f00a fe04 	bl	800bf44 <CDC_Transmit_FS>
			  			}
			  	  }
			  	  if(USB_RX_BYTES_RECEIVED == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_ROUTINES_PURGE_SAVED_SENTENCE))
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <UartCheckReceived+0x6a8>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <UartCheckReceived+0x694>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	4b38      	ldr	r3, [pc, #224]	; (800142c <UartCheckReceived+0x6ac>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	440b      	add	r3, r1
 800134e:	3309      	adds	r3, #9
 8001350:	429a      	cmp	r2, r3
 8001352:	d126      	bne.n	80013a2 <UartCheckReceived+0x622>
			  	  {
			  		uint8_t UART_ROUTINES_PURGE_SAVED_FLAG = 1;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
					for(int i = 0; i<sizeof(UART_ROUTINES_PURGE_SAVED_SENTENCE); i++)
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	e011      	b.n	8001382 <UartCheckReceived+0x602>
						if(USB_RX_BUFF[i+UART_SENTENCE_HEAD_BYTES] !=  UART_ROUTINES_PURGE_SAVED_SENTENCE[i])
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <UartCheckReceived+0x694>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4413      	add	r3, r2
 8001368:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <UartCheckReceived+0x698>)
 800136a:	5cd2      	ldrb	r2, [r2, r3]
 800136c:	4932      	ldr	r1, [pc, #200]	; (8001438 <UartCheckReceived+0x6b8>)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	440b      	add	r3, r1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <UartCheckReceived+0x5fc>
							UART_ROUTINES_PURGE_SAVED_FLAG = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
					for(int i = 0; i<sizeof(UART_ROUTINES_PURGE_SAVED_SENTENCE); i++)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	3301      	adds	r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d9ea      	bls.n	800135e <UartCheckReceived+0x5de>
					if(UART_ROUTINES_PURGE_SAVED_FLAG == 1)
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d109      	bne.n	80013a2 <UartCheckReceived+0x622>
					{
						purgeSaved(2000);
 800138e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001392:	f000 fb2e 	bl	80019f2 <purgeSaved>
						readMem();
 8001396:	f000 fc3f 	bl	8001c18 <readMem>
						CDC_Transmit_FS(UART_RESPONSE_OK, sizeof(UART_RESPONSE_OK));
 800139a:	2103      	movs	r1, #3
 800139c:	4825      	ldr	r0, [pc, #148]	; (8001434 <UartCheckReceived+0x6b4>)
 800139e:	f00a fdd1 	bl	800bf44 <CDC_Transmit_FS>
					}
			  	  }
			  	  if(USB_RX_BYTES_RECEIVED == UART_SENTENCE_HEAD_BYTES+UART_SENTENCE_TAIL_BYTES+(uint8_t)sizeof(UART_SET_TIME))
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <UartCheckReceived+0x6a8>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <UartCheckReceived+0x694>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <UartCheckReceived+0x6ac>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	440b      	add	r3, r1
 80013b4:	3308      	adds	r3, #8
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d125      	bne.n	8001406 <UartCheckReceived+0x686>
			  	  {
			  		  SET_TIME_FLAG = 1;
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <UartCheckReceived+0x6bc>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
			  		  for(int i = 0; i<sizeof(UART_SET_TIME); i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	e012      	b.n	80013ec <UartCheckReceived+0x66c>
			  			  if(USB_RX_BUFF[i+UART_SENTENCE_HEAD_BYTES] !=  UART_SET_TIME[i])
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <UartCheckReceived+0x694>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a11      	ldr	r2, [pc, #68]	; (8001418 <UartCheckReceived+0x698>)
 80013d2:	5cd2      	ldrb	r2, [r2, r3]
 80013d4:	491a      	ldr	r1, [pc, #104]	; (8001440 <UartCheckReceived+0x6c0>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	440b      	add	r3, r1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d002      	beq.n	80013e6 <UartCheckReceived+0x666>
			  				SET_TIME_FLAG = 0;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <UartCheckReceived+0x6bc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
			  		  for(int i = 0; i<sizeof(UART_SET_TIME); i++)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	d9e9      	bls.n	80013c6 <UartCheckReceived+0x646>
			  		  if(SET_TIME_FLAG == 1)
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <UartCheckReceived+0x6bc>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d105      	bne.n	8001406 <UartCheckReceived+0x686>
			  			  CDC_Transmit_FS(UART_SET_TIME_RESPONSE, sizeof(UART_SET_TIME_RESPONSE));
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <UartCheckReceived+0x6c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2104      	movs	r1, #4
 8001400:	4618      	mov	r0, r3
 8001402:	f00a fd9f 	bl	800bf44 <CDC_Transmit_FS>
			  	  }
		  	  }
		  USB_RX_BYTES_RECEIVED = 0;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <UartCheckReceived+0x6a8>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	}
}
 800140c:	bf00      	nop
 800140e:	3730      	adds	r7, #48	; 0x30
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000074 	.word	0x20000074
 8001418:	200016a4 	.word	0x200016a4
 800141c:	2000002c 	.word	0x2000002c
 8001420:	2000169f 	.word	0x2000169f
 8001424:	2000003c 	.word	0x2000003c
 8001428:	200016e4 	.word	0x200016e4
 800142c:	20000073 	.word	0x20000073
 8001430:	20000044 	.word	0x20000044
 8001434:	20000068 	.word	0x20000068
 8001438:	20000050 	.word	0x20000050
 800143c:	200016a0 	.word	0x200016a0
 8001440:	2000005c 	.word	0x2000005c
 8001444:	20000064 	.word	0x20000064

08001448 <irCallback>:
//		  	  }
//		  UART_BytesReceived = 0;
//	}
//}
void irCallback(uint16_t addr, uint16_t comm)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	80fb      	strh	r3, [r7, #6]
 8001454:	4613      	mov	r3, r2
 8001456:	80bb      	strh	r3, [r7, #4]
	if(GET_IR_FLAG)
 8001458:	4b31      	ldr	r3, [pc, #196]	; (8001520 <irCallback+0xd8>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d023      	beq.n	80014a8 <irCallback+0x60>
	{
		char irAsci[30] = {' '};
 8001460:	2320      	movs	r3, #32
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	831a      	strh	r2, [r3, #24]
		sprintf(irAsci, "ADR: %d, COM: %d", (int)addr, (int)comm);
 8001478:	88fa      	ldrh	r2, [r7, #6]
 800147a:	88bb      	ldrh	r3, [r7, #4]
 800147c:	f107 0008 	add.w	r0, r7, #8
 8001480:	4928      	ldr	r1, [pc, #160]	; (8001524 <irCallback+0xdc>)
 8001482:	f00b f9f3 	bl	800c86c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)irAsci, strlen(irAsci), 100);
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fea0 	bl	80001d0 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f107 0108 	add.w	r1, r7, #8
 8001498:	2364      	movs	r3, #100	; 0x64
 800149a:	4823      	ldr	r0, [pc, #140]	; (8001528 <irCallback+0xe0>)
 800149c:	f005 fe8d 	bl	80071ba <HAL_UART_Transmit>
		GET_IR_FLAG = 0;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <irCallback+0xd8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
			}
		}
	}


}
 80014a6:	e037      	b.n	8001518 <irCallback+0xd0>
		for(uint8_t i = 0; i < MAX_IR_CODES; i++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ae:	e02f      	b.n	8001510 <irCallback+0xc8>
			if(IR_CODES_FLAGS[i][0] == addr && IR_CODES_FLAGS[i][1] == comm)
 80014b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014b4:	4a1d      	ldr	r2, [pc, #116]	; (800152c <irCallback+0xe4>)
 80014b6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	88fa      	ldrh	r2, [r7, #6]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d121      	bne.n	8001506 <irCallback+0xbe>
 80014c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014c6:	4a19      	ldr	r2, [pc, #100]	; (800152c <irCallback+0xe4>)
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	88ba      	ldrh	r2, [r7, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d117      	bne.n	8001506 <irCallback+0xbe>
				if(ACTIVE_EFFECT_NB == i && ACTIVE_EFFECT_TYPE == 2)
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <irCallback+0xe8>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80014de:	429a      	cmp	r2, r3
 80014e0:	d10a      	bne.n	80014f8 <irCallback+0xb0>
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <irCallback+0xec>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d106      	bne.n	80014f8 <irCallback+0xb0>
					ACTIVE_EFFECT_NB = 0;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <irCallback+0xe8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
					ACTIVE_EFFECT_TYPE = 0;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <irCallback+0xec>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e006      	b.n	8001506 <irCallback+0xbe>
					ACTIVE_EFFECT_NB = i;
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <irCallback+0xe8>)
 80014fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fe:	7013      	strb	r3, [r2, #0]
					ACTIVE_EFFECT_TYPE = 2;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <irCallback+0xec>)
 8001502:	2202      	movs	r2, #2
 8001504:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < MAX_IR_CODES; i++)
 8001506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800150a:	3301      	adds	r3, #1
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001514:	2b13      	cmp	r3, #19
 8001516:	d9cb      	bls.n	80014b0 <irCallback+0x68>
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000169e 	.word	0x2000169e
 8001524:	0800d1e0 	.word	0x0800d1e0
 8001528:	200015c8 	.word	0x200015c8
 800152c:	200016e8 	.word	0x200016e8
 8001530:	20001525 	.word	0x20001525
 8001534:	20001524 	.word	0x20001524

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f001 fb2b 	bl	8002b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 f87d 	bl	8001640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001546:	f000 f9ef 	bl	8001928 <MX_GPIO_Init>
  MX_DMA_Init();
 800154a:	f000 f9cd 	bl	80018e8 <MX_DMA_Init>
  MX_TIM1_Init();
 800154e:	f000 f8e1 	bl	8001714 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001552:	f000 f92f 	bl	80017b4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001556:	f000 f99d 	bl	8001894 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800155a:	f00a fc1b 	bl	800bd94 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

//  irSetup(&htim3, &huart1);

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) UART_CpltBuffer, UART_BUFF_SIZE);
 800155e:	2232      	movs	r2, #50	; 0x32
 8001560:	492d      	ldr	r1, [pc, #180]	; (8001618 <main+0xe0>)
 8001562:	482e      	ldr	r0, [pc, #184]	; (800161c <main+0xe4>)
 8001564:	f005 febb 	bl	80072de <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <main+0xe8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <main+0xe8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0208 	bic.w	r2, r2, #8
 8001576:	601a      	str	r2, [r3, #0]
  irSetup(&htim3, &huart2);
 8001578:	4928      	ldr	r1, [pc, #160]	; (800161c <main+0xe4>)
 800157a:	482a      	ldr	r0, [pc, #168]	; (8001624 <main+0xec>)
 800157c:	f7ff f802 	bl	8000584 <irSetup>
  //readMem();
//  HAL_UART_Transmit(&huart1, &IR_CODES_FLAGS[0][0], sizeof(IR_CODES_FLAGS[0][0]), 100);
//  HAL_UART_Transmit(&huart1, &IR_CODES_FLAGS[0][1], sizeof(IR_CODES_FLAGS[0][1]), 100);
  //HAL_TIM_Base_Start_IT(&htim3);
//  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
  for(uint8_t i = 0; i < WS2812_BUFFER_COUNT; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	e01d      	b.n	80015c2 <main+0x8a>
	{
	  ws2812b.item[i].channel = i;
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4a27      	ldr	r2, [pc, #156]	; (8001628 <main+0xf0>)
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4413      	add	r3, r2
 800158e:	330c      	adds	r3, #12
 8001590:	79fa      	ldrb	r2, [r7, #7]
 8001592:	701a      	strb	r2, [r3, #0]
	  ws2812b.item[i].frameBufferPointer = &frameBufferArray[i][0];
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800159c:	fb01 f202 	mul.w	r2, r1, r2
 80015a0:	4922      	ldr	r1, [pc, #136]	; (800162c <main+0xf4>)
 80015a2:	440a      	add	r2, r1
 80015a4:	4920      	ldr	r1, [pc, #128]	; (8001628 <main+0xf0>)
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	440b      	add	r3, r1
 80015aa:	601a      	str	r2, [r3, #0]
	  ws2812b.item[i].frameBufferSize = WS2812B_NUMBER_OF_LEDS*3;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <main+0xf0>)
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	4413      	add	r3, r2
 80015b4:	3304      	adds	r3, #4
 80015b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ba:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < WS2812_BUFFER_COUNT; i++)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	3301      	adds	r3, #1
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d9de      	bls.n	8001586 <main+0x4e>
	}
  ws2812b_init();
 80015c8:	f001 fa9a 	bl	8002b00 <ws2812b_init>


  ELE_INPUT_MACROS[1][0] = 0xFF;
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <main+0xf8>)
 80015ce:	22ff      	movs	r2, #255	; 0xff
 80015d0:	719a      	strb	r2, [r3, #6]
  ELE_INPUT_MACROS[1][1] = 0xFF;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <main+0xf8>)
 80015d4:	22ff      	movs	r2, #255	; 0xff
 80015d6:	71da      	strb	r2, [r3, #7]
  ELE_INPUT_MACROS[1][2] = 1;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <main+0xf8>)
 80015da:	2201      	movs	r2, #1
 80015dc:	721a      	strb	r2, [r3, #8]
  ELE_INPUT_MACROS[1][3] = 40;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <main+0xf8>)
 80015e0:	2228      	movs	r2, #40	; 0x28
 80015e2:	725a      	strb	r2, [r3, #9]
  IR_CODES_FLAGS[1][0] = 48;
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <main+0xfc>)
 80015e6:	2230      	movs	r2, #48	; 0x30
 80015e8:	709a      	strb	r2, [r3, #2]
  IR_CODES_FLAGS[1][1] = 64;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <main+0xfc>)
 80015ec:	2240      	movs	r2, #64	; 0x40
 80015ee:	70da      	strb	r2, [r3, #3]
  IR_CODES_MACROS[1][0] = 0xFF;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <main+0x100>)
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	719a      	strb	r2, [r3, #6]
  IR_CODES_MACROS[1][1] = 0xFF;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <main+0x100>)
 80015f8:	22ff      	movs	r2, #255	; 0xff
 80015fa:	71da      	strb	r2, [r3, #7]
  IR_CODES_MACROS[1][2] = 1;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <main+0x100>)
 80015fe:	2201      	movs	r2, #1
 8001600:	721a      	strb	r2, [r3, #8]
  IR_CODES_MACROS[1][3] = 40;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <main+0x100>)
 8001604:	2228      	movs	r2, #40	; 0x28
 8001606:	725a      	strb	r2, [r3, #9]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //irHandle(irCallback);
	  UartCheckReceived();
 8001608:	f7ff fbba 	bl	8000d80 <UartCheckReceived>
	  irHandle(irCallback);
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <main+0x104>)
 800160e:	f7fe ffd1 	bl	80005b4 <irHandle>
	  effectsLoop();
 8001612:	f7ff f901 	bl	8000818 <effectsLoop>
	  UartCheckReceived();
 8001616:	e7f7      	b.n	8001608 <main+0xd0>
 8001618:	2000166c 	.word	0x2000166c
 800161c:	200015c8 	.word	0x200015c8
 8001620:	2000160c 	.word	0x2000160c
 8001624:	20001580 	.word	0x20001580
 8001628:	20001890 	.word	0x20001890
 800162c:	20000264 	.word	0x20000264
 8001630:	20001788 	.word	0x20001788
 8001634:	200016e8 	.word	0x200016e8
 8001638:	20001710 	.word	0x20001710
 800163c:	08001449 	.word	0x08001449

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b094      	sub	sp, #80	; 0x50
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 0320 	add.w	r3, r7, #32
 800164a:	2230      	movs	r2, #48	; 0x30
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f00b f904 	bl	800c85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <SystemClock_Config+0xcc>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	4a27      	ldr	r2, [pc, #156]	; (800170c <SystemClock_Config+0xcc>)
 800166e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001672:	6413      	str	r3, [r2, #64]	; 0x40
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <SystemClock_Config+0xcc>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <SystemClock_Config+0xd0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <SystemClock_Config+0xd0>)
 800168a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <SystemClock_Config+0xd0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a6:	2302      	movs	r3, #2
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016b0:	2304      	movs	r3, #4
 80016b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016b4:	23a8      	movs	r3, #168	; 0xa8
 80016b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016bc:	2307      	movs	r3, #7
 80016be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fcdd 	bl	8005084 <HAL_RCC_OscConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016d0:	f000 f98a 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d4:	230f      	movs	r3, #15
 80016d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d8:	2302      	movs	r3, #2
 80016da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2105      	movs	r1, #5
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 ff3e 	bl	8005574 <HAL_RCC_ClockConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016fe:	f000 f973 	bl	80019e8 <Error_Handler>
  }
}
 8001702:	bf00      	nop
 8001704:	3750      	adds	r7, #80	; 0x50
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40007000 	.word	0x40007000

08001714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	463b      	mov	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_TIM1_Init+0x98>)
 8001732:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <MX_TIM1_Init+0x9c>)
 8001734:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MX_TIM1_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_TIM1_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_TIM1_Init+0x98>)
 8001744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001748:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_TIM1_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_TIM1_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_TIM1_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <MX_TIM1_Init+0x98>)
 800175e:	f004 f929 	bl	80059b4 <HAL_TIM_Base_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001768:	f000 f93e 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4619      	mov	r1, r3
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <MX_TIM1_Init+0x98>)
 800177a:	f004 fedd 	bl	8006538 <HAL_TIM_ConfigClockSource>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001784:	f000 f930 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_TIM1_Init+0x98>)
 8001796:	f005 fc33 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017a0:	f000 f922 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20001538 	.word	0x20001538
 80017b0:	40010000 	.word	0x40010000

080017b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ba:	f107 0318 	add.w	r3, r7, #24
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017d2:	463b      	mov	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <MX_TIM3_Init+0xd8>)
 80017e0:	4a2b      	ldr	r2, [pc, #172]	; (8001890 <MX_TIM3_Init+0xdc>)
 80017e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <MX_TIM3_Init+0xd8>)
 80017e6:	2254      	movs	r2, #84	; 0x54
 80017e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <MX_TIM3_Init+0xd8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <MX_TIM3_Init+0xd8>)
 80017f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <MX_TIM3_Init+0xd8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <MX_TIM3_Init+0xd8>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_TIM3_Init+0xd8>)
 8001806:	f004 f8d5 	bl	80059b4 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001810:	f000 f8ea 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800181a:	f107 0318 	add.w	r3, r7, #24
 800181e:	4619      	mov	r1, r3
 8001820:	481a      	ldr	r0, [pc, #104]	; (800188c <MX_TIM3_Init+0xd8>)
 8001822:	f004 fe89 	bl	8006538 <HAL_TIM_ConfigClockSource>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800182c:	f000 f8dc 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001830:	4816      	ldr	r0, [pc, #88]	; (800188c <MX_TIM3_Init+0xd8>)
 8001832:	f004 fa99 	bl	8005d68 <HAL_TIM_IC_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800183c:	f000 f8d4 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <MX_TIM3_Init+0xd8>)
 8001850:	f005 fbd6 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800185a:	f000 f8c5 	bl	80019e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800185e:	2302      	movs	r3, #2
 8001860:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001862:	2301      	movs	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800186a:	230f      	movs	r3, #15
 800186c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM3_Init+0xd8>)
 8001876:	f004 fd01 	bl	800627c <HAL_TIM_IC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001880:	f000 f8b2 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20001580 	.word	0x20001580
 8001890:	40000400 	.word	0x40000400

08001894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_USART2_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018cc:	f005 fc28 	bl	8007120 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f000 f887 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200015c8 	.word	0x200015c8
 80018e4:	40004400 	.word	0x40004400

080018e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_DMA_Init+0x3c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <MX_DMA_Init+0x3c>)
 80018f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_DMA_Init+0x3c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2010      	movs	r0, #16
 8001910:	f001 fab3 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001914:	2010      	movs	r0, #16
 8001916:	f001 facc 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <MX_GPIO_Init+0xb8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <MX_GPIO_Init+0xb8>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <MX_GPIO_Init+0xb8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <MX_GPIO_Init+0xb8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <MX_GPIO_Init+0xb8>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <MX_GPIO_Init+0xb8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <MX_GPIO_Init+0xb8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <MX_GPIO_Init+0xb8>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <MX_GPIO_Init+0xb8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_GPIO_Init+0xb8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <MX_GPIO_Init+0xb8>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_GPIO_Init+0xb8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ae:	2301      	movs	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4808      	ldr	r0, [pc, #32]	; (80019e4 <MX_GPIO_Init+0xbc>)
 80019c4:	f001 ff2c 	bl	8003820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2100      	movs	r1, #0
 80019cc:	2006      	movs	r0, #6
 80019ce:	f001 fa54 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019d2:	2006      	movs	r0, #6
 80019d4:	f001 fa6d 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <Error_Handler+0x8>

080019f2 <purgeSaved>:
uint8_t IR_CODES_MACROS[MAX_IR_CODES][BYTES_PER_EFFECT]  	= {0};
uint8_t ELE_INPUT_MACROS[MAX_ELE_INPUTS][BYTES_PER_EFFECT] 	= {0};
uint8_t TIME_FLAGS[MAX_TIME_MACROS][BYTES_PER_TIME_FLAG]	= {0};
uint8_t TIME_MACROS[MAX_TIME_MACROS][BYTES_PER_EFFECT] 		= {0};

void purgeSaved(int range){
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < range; i++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e009      	b.n	8001a14 <purgeSaved+0x22>
	{
		*(__IO uint8_t *) (BKPSRAM_BASE +i) = 0;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8001a06:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < range; i++)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3301      	adds	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf1      	blt.n	8001a00 <purgeSaved+0xe>
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <save2DArr>:

void save2DArr(uint8_t* array, int rows, int cols, int* startId){
 8001a2a:	b480      	push	{r7}
 8001a2c:	b087      	sub	sp, #28
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	603b      	str	r3, [r7, #0]

	for(int i = 0; i<rows; i++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e022      	b.n	8001a84 <save2DArr+0x5a>
		{
			for(int j = 0; j<cols; j++){
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	e018      	b.n	8001a76 <save2DArr+0x4c>
				*(__IO uint8_t *) (BKPSRAM_BASE+*startId) = *(array + i * cols + j);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4413      	add	r3, r2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	441a      	add	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8001a5e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001a62:	7812      	ldrb	r2, [r2, #0]
 8001a64:	701a      	strb	r2, [r3, #0]
				*startId+=1;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	601a      	str	r2, [r3, #0]
			for(int j = 0; j<cols; j++){
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	3301      	adds	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbe2      	blt.n	8001a44 <save2DArr+0x1a>
	for(int i = 0; i<rows; i++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbd8      	blt.n	8001a3e <save2DArr+0x14>
			}
		}
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <read2DArr>:

void read2DArr(uint8_t* array, int rows, int cols, int* startId){
 8001a9a:	b480      	push	{r7}
 8001a9c:	b087      	sub	sp, #28
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	603b      	str	r3, [r7, #0]

	for(int i = 0; i<rows; i++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e024      	b.n	8001af8 <read2DArr+0x5e>
		{
			for(int j = 0; j<cols; j++){
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e01a      	b.n	8001aea <read2DArr+0x50>
				*(array + i * cols + j) = (*(__IO uint8_t *) (BKPSRAM_BASE + *startId));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8001abc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	fb02 f303 	mul.w	r3, r2, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	780a      	ldrb	r2, [r1, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]
				*startId+=1;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	601a      	str	r2, [r3, #0]
			for(int j = 0; j<cols; j++){
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbe0      	blt.n	8001ab4 <read2DArr+0x1a>
	for(int i = 0; i<rows; i++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbd6      	blt.n	8001aae <read2DArr+0x14>
			}
		}
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <saveMem>:

void saveMem(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	//SET 6 FIRTS BYTES TO STARTING ADDRESSES OF INDIVIDUAL DATA
	uint8_t hbyte = 0,lbyte = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	71fb      	strb	r3, [r7, #7]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	71bb      	strb	r3, [r7, #6]

	hbyte = (IR_ADDR>>8) & 0xFF;
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <saveMem+0xd0>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	71fb      	strb	r3, [r7, #7]
	lbyte = IR_ADDR & 0xFF;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <saveMem+0xd0>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	71bb      	strb	r3, [r7, #6]
	*(__IO uint8_t *) (BKPSRAM_BASE) = hbyte;
 8001b2e:	4a2d      	ldr	r2, [pc, #180]	; (8001be4 <saveMem+0xd4>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	7013      	strb	r3, [r2, #0]
	*(__IO uint8_t *) (BKPSRAM_BASE+1) = lbyte;
 8001b34:	4a2c      	ldr	r2, [pc, #176]	; (8001be8 <saveMem+0xd8>)
 8001b36:	79bb      	ldrb	r3, [r7, #6]
 8001b38:	7013      	strb	r3, [r2, #0]
	hbyte = 0,lbyte = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	71bb      	strb	r3, [r7, #6]

	hbyte = (ELE_INPUT_ADDR>>8) & 0xFF;
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <saveMem+0xdc>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	71fb      	strb	r3, [r7, #7]
	lbyte = ELE_INPUT_ADDR & 0xFF;
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <saveMem+0xdc>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	71bb      	strb	r3, [r7, #6]
	*(__IO uint8_t *) (BKPSRAM_BASE+2) = hbyte;
 8001b52:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <saveMem+0xe0>)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	7013      	strb	r3, [r2, #0]
	*(__IO uint8_t *) (BKPSRAM_BASE+3) = lbyte;
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <saveMem+0xe4>)
 8001b5a:	79bb      	ldrb	r3, [r7, #6]
 8001b5c:	7013      	strb	r3, [r2, #0]
	hbyte = 0,lbyte = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	2300      	movs	r3, #0
 8001b64:	71bb      	strb	r3, [r7, #6]

	hbyte = (TIME_ADDR>>8) & 0xFF;
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <saveMem+0xe8>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	71fb      	strb	r3, [r7, #7]
	lbyte = TIME_ADDR & 0xFF;
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <saveMem+0xe8>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	71bb      	strb	r3, [r7, #6]
	*(__IO uint8_t *) (BKPSRAM_BASE+4) = hbyte;
 8001b76:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <saveMem+0xec>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	7013      	strb	r3, [r2, #0]
	*(__IO uint8_t *) (BKPSRAM_BASE+5) = lbyte;
 8001b7c:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <saveMem+0xf0>)
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	7013      	strb	r3, [r2, #0]
	hbyte = 0,lbyte = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	71fb      	strb	r3, [r7, #7]
 8001b86:	2300      	movs	r3, #0
 8001b88:	71bb      	strb	r3, [r7, #6]

	//SAVE IR ARRAYs
	int currAddr = IR_ADDR;
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <saveMem+0xd0>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	603b      	str	r3, [r7, #0]
	save2DArr(&IR_CODES_FLAGS[0][0], MAX_IR_CODES, BYTES_PER_IR_CODE, &currAddr);
 8001b90:	463b      	mov	r3, r7
 8001b92:	2202      	movs	r2, #2
 8001b94:	2114      	movs	r1, #20
 8001b96:	481b      	ldr	r0, [pc, #108]	; (8001c04 <saveMem+0xf4>)
 8001b98:	f7ff ff47 	bl	8001a2a <save2DArr>
	save2DArr(&IR_CODES_MACROS[0][0], MAX_IR_CODES, BYTES_PER_EFFECT, &currAddr);
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2206      	movs	r2, #6
 8001ba0:	2114      	movs	r1, #20
 8001ba2:	4819      	ldr	r0, [pc, #100]	; (8001c08 <saveMem+0xf8>)
 8001ba4:	f7ff ff41 	bl	8001a2a <save2DArr>

	currAddr = ELE_INPUT_ADDR;
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <saveMem+0xdc>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	603b      	str	r3, [r7, #0]
	save2DArr(&ELE_INPUT_MACROS[0][0], MAX_ELE_INPUTS, BYTES_PER_EFFECT, &currAddr);
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2206      	movs	r2, #6
 8001bb2:	210a      	movs	r1, #10
 8001bb4:	4815      	ldr	r0, [pc, #84]	; (8001c0c <saveMem+0xfc>)
 8001bb6:	f7ff ff38 	bl	8001a2a <save2DArr>

	currAddr = TIME_ADDR;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <saveMem+0xe8>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	603b      	str	r3, [r7, #0]
	save2DArr(&TIME_FLAGS[0][0], MAX_IR_CODES, BYTES_PER_TIME_FLAG, &currAddr);
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	2114      	movs	r1, #20
 8001bc6:	4812      	ldr	r0, [pc, #72]	; (8001c10 <saveMem+0x100>)
 8001bc8:	f7ff ff2f 	bl	8001a2a <save2DArr>
	save2DArr(&TIME_MACROS[0][0], MAX_IR_CODES, BYTES_PER_EFFECT, &currAddr);
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2206      	movs	r2, #6
 8001bd0:	2114      	movs	r1, #20
 8001bd2:	4810      	ldr	r0, [pc, #64]	; (8001c14 <saveMem+0x104>)
 8001bd4:	f7ff ff29 	bl	8001a2a <save2DArr>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000076 	.word	0x20000076
 8001be4:	40024000 	.word	0x40024000
 8001be8:	40024001 	.word	0x40024001
 8001bec:	20000078 	.word	0x20000078
 8001bf0:	40024002 	.word	0x40024002
 8001bf4:	40024003 	.word	0x40024003
 8001bf8:	2000007a 	.word	0x2000007a
 8001bfc:	40024004 	.word	0x40024004
 8001c00:	40024005 	.word	0x40024005
 8001c04:	200016e8 	.word	0x200016e8
 8001c08:	20001710 	.word	0x20001710
 8001c0c:	20001788 	.word	0x20001788
 8001c10:	200017c4 	.word	0x200017c4
 8001c14:	20001814 	.word	0x20001814

08001c18 <readMem>:


void readMem(){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
	//READ ADDRESES
	uint8_t hbyte = 0,lbyte = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	2300      	movs	r3, #0
 8001c24:	71bb      	strb	r3, [r7, #6]

	hbyte = (*(__IO uint8_t *) (BKPSRAM_BASE));
 8001c26:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <readMem+0xdc>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
	lbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+1));
 8001c2c:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <readMem+0xe0>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	71bb      	strb	r3, [r7, #6]
	IR_ADDR = ((uint16_t) hbyte << 8) | lbyte;
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <readMem+0xe4>)
 8001c44:	801a      	strh	r2, [r3, #0]
	hbyte = 0,lbyte = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	71bb      	strb	r3, [r7, #6]

	hbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+2));
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <readMem+0xe8>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
	lbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+3));
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <readMem+0xec>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	71bb      	strb	r3, [r7, #6]
	ELE_INPUT_ADDR = ((uint16_t) hbyte << 8) | lbyte;
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <readMem+0xf0>)
 8001c6c:	801a      	strh	r2, [r3, #0]
	hbyte = 0,lbyte = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	2300      	movs	r3, #0
 8001c74:	71bb      	strb	r3, [r7, #6]

	hbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+4));
 8001c76:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <readMem+0xf4>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
	lbyte = (*(__IO uint8_t *) (BKPSRAM_BASE+5));
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <readMem+0xf8>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	71bb      	strb	r3, [r7, #6]
	TIME_ADDR = ((uint16_t) hbyte << 8) | lbyte;
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <readMem+0xfc>)
 8001c94:	801a      	strh	r2, [r3, #0]
	hbyte = 0,lbyte = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71bb      	strb	r3, [r7, #6]
	//READ ARRAYS
	int currAddr = IR_ADDR;
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <readMem+0xe4>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	603b      	str	r3, [r7, #0]
	read2DArr(&IR_CODES_FLAGS[0][0], MAX_IR_CODES, BYTES_PER_IR_CODE, &currAddr);
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	2114      	movs	r1, #20
 8001caa:	481b      	ldr	r0, [pc, #108]	; (8001d18 <readMem+0x100>)
 8001cac:	f7ff fef5 	bl	8001a9a <read2DArr>
	read2DArr(&IR_CODES_MACROS[0][0], MAX_IR_CODES, BYTES_PER_EFFECT, &currAddr);
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2206      	movs	r2, #6
 8001cb4:	2114      	movs	r1, #20
 8001cb6:	4819      	ldr	r0, [pc, #100]	; (8001d1c <readMem+0x104>)
 8001cb8:	f7ff feef 	bl	8001a9a <read2DArr>

	currAddr = ELE_INPUT_ADDR;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <readMem+0xf0>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	603b      	str	r3, [r7, #0]
	read2DArr(&ELE_INPUT_MACROS[0][0], MAX_ELE_INPUTS, BYTES_PER_EFFECT, &currAddr);
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2206      	movs	r2, #6
 8001cc6:	210a      	movs	r1, #10
 8001cc8:	4815      	ldr	r0, [pc, #84]	; (8001d20 <readMem+0x108>)
 8001cca:	f7ff fee6 	bl	8001a9a <read2DArr>

	currAddr = TIME_ADDR;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <readMem+0xfc>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	603b      	str	r3, [r7, #0]
	read2DArr(&TIME_FLAGS[0][0], MAX_IR_CODES, BYTES_PER_TIME_FLAG, &currAddr);
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	2114      	movs	r1, #20
 8001cda:	4812      	ldr	r0, [pc, #72]	; (8001d24 <readMem+0x10c>)
 8001cdc:	f7ff fedd 	bl	8001a9a <read2DArr>
	read2DArr(&TIME_MACROS[0][0], MAX_IR_CODES, BYTES_PER_EFFECT, &currAddr);
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2206      	movs	r2, #6
 8001ce4:	2114      	movs	r1, #20
 8001ce6:	4810      	ldr	r0, [pc, #64]	; (8001d28 <readMem+0x110>)
 8001ce8:	f7ff fed7 	bl	8001a9a <read2DArr>

}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40024000 	.word	0x40024000
 8001cf8:	40024001 	.word	0x40024001
 8001cfc:	20000076 	.word	0x20000076
 8001d00:	40024002 	.word	0x40024002
 8001d04:	40024003 	.word	0x40024003
 8001d08:	20000078 	.word	0x20000078
 8001d0c:	40024004 	.word	0x40024004
 8001d10:	40024005 	.word	0x40024005
 8001d14:	2000007a 	.word	0x2000007a
 8001d18:	200016e8 	.word	0x200016e8
 8001d1c:	20001710 	.word	0x20001710
 8001d20:	20001788 	.word	0x20001788
 8001d24:	200017c4 	.word	0x200017c4
 8001d28:	20001814 	.word	0x20001814

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <HAL_TIM_Base_MspInit+0xbc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10e      	bne.n	8001dbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_TIM_Base_MspInit+0xc0>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <HAL_TIM_Base_MspInit+0xc0>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <HAL_TIM_Base_MspInit+0xc0>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dba:	e038      	b.n	8001e2e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_TIM_Base_MspInit+0xc4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d133      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <HAL_TIM_Base_MspInit+0xc0>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_TIM_Base_MspInit+0xc0>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_TIM_Base_MspInit+0xc0>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_TIM_Base_MspInit+0xc0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <HAL_TIM_Base_MspInit+0xc0>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_TIM_Base_MspInit+0xc0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dfe:	2340      	movs	r3, #64	; 0x40
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	480a      	ldr	r0, [pc, #40]	; (8001e44 <HAL_TIM_Base_MspInit+0xc8>)
 8001e1a:	f001 fd01 	bl	8003820 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	201d      	movs	r0, #29
 8001e24:	f001 f829 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e28:	201d      	movs	r0, #29
 8001e2a:	f001 f842 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	; 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40020000 	.word	0x40020000

08001e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <HAL_UART_MspInit+0xf0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d161      	bne.n	8001f2e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_UART_MspInit+0xf4>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a32      	ldr	r2, [pc, #200]	; (8001f3c <HAL_UART_MspInit+0xf4>)
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_UART_MspInit+0xf4>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <HAL_UART_MspInit+0xf4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a2b      	ldr	r2, [pc, #172]	; (8001f3c <HAL_UART_MspInit+0xf4>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_UART_MspInit+0xf4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ea2:	2360      	movs	r3, #96	; 0x60
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4820      	ldr	r0, [pc, #128]	; (8001f40 <HAL_UART_MspInit+0xf8>)
 8001ebe:	f001 fcaf 	bl	8003820 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001ec4:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_UART_MspInit+0x100>)
 8001ec6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ece:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f02:	4810      	ldr	r0, [pc, #64]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001f04:	f000 fff0 	bl	8002ee8 <HAL_DMA_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001f0e:	f7ff fd6b 	bl	80019e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_UART_MspInit+0xfc>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2026      	movs	r0, #38	; 0x26
 8001f24:	f000 ffa9 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f28:	2026      	movs	r0, #38	; 0x26
 8001f2a:	f000 ffc2 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3728      	adds	r7, #40	; 0x28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40004400 	.word	0x40004400
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	2000160c 	.word	0x2000160c
 8001f48:	40026088 	.word	0x40026088

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <NMI_Handler+0x4>

08001f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <HardFault_Handler+0x4>

08001f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <MemManage_Handler+0x4>

08001f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f98:	f000 fe50 	bl	8002c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f001 fdd7 	bl	8003b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA1_Stream5_IRQHandler+0x10>)
 8001fb6:	f001 f9c9 	bl	800334c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000160c 	.word	0x2000160c

08001fc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM3_IRQHandler+0x10>)
 8001fca:	f004 f84f 	bl	800606c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20001580 	.word	0x20001580

08001fd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <USART2_IRQHandler+0x10>)
 8001fde:	f005 f9e3 	bl	80073a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200015c8 	.word	0x200015c8

08001fec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <OTG_FS_IRQHandler+0x10>)
 8001ff2:	f001 ff19 	bl	8003e28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20002ec8 	.word	0x20002ec8

08002000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d207      	bcs.n	8002040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002030:	f00a fbdc 	bl	800c7ec <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	220c      	movs	r2, #12
 8002038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	e009      	b.n	8002054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <_sbrk+0x64>)
 8002050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20020000 	.word	0x20020000
 8002060:	00000400 	.word	0x00000400
 8002064:	2000188c 	.word	0x2000188c
 8002068:	20003448 	.word	0x20003448

0800206c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <SystemInit+0x20>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <SystemInit+0x20>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <ws2812b_gpio_init+0x90>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a20      	ldr	r2, [pc, #128]	; (8002120 <ws2812b_gpio_init+0x90>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <ws2812b_gpio_init+0x90>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 80020b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4619      	mov	r1, r3
 80020ca:	4816      	ldr	r0, [pc, #88]	; (8002124 <ws2812b_gpio_init+0x94>)
 80020cc:	f001 fba8 	bl	8003820 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <ws2812b_gpio_init+0x90>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <ws2812b_gpio_init+0x90>)
 80020da:	f043 0308 	orr.w	r3, r3, #8
 80020de:	6313      	str	r3, [r2, #48]	; 0x30
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <ws2812b_gpio_init+0x90>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]

		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 80020f8:	2302      	movs	r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	4619      	mov	r1, r3
 8002102:	4809      	ldr	r0, [pc, #36]	; (8002128 <ws2812b_gpio_init+0x98>)
 8002104:	f001 fb8c 	bl	8003820 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 8002108:	2301      	movs	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	4619      	mov	r1, r3
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <ws2812b_gpio_init+0x98>)
 8002114:	f001 fb84 	bl	8003820 <HAL_GPIO_Init>
	#endif
}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	40020800 	.word	0x40020800
 8002128:	40020400 	.word	0x40020400

0800212c <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b52      	ldr	r3, [pc, #328]	; (8002280 <TIM1_init+0x154>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a51      	ldr	r2, [pc, #324]	; (8002280 <TIM1_init+0x154>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <TIM1_init+0x154>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 800214e:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <TIM1_init+0x158>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	4a4c      	ldr	r2, [pc, #304]	; (8002288 <TIM1_init+0x15c>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	4a4b      	ldr	r2, [pc, #300]	; (800228c <TIM1_init+0x160>)
 800215e:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 8002160:	4b48      	ldr	r3, [pc, #288]	; (8002284 <TIM1_init+0x158>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <TIM1_init+0x164>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0adb      	lsrs	r3, r3, #11
 800216c:	4a49      	ldr	r2, [pc, #292]	; (8002294 <TIM1_init+0x168>)
 800216e:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 8002170:	4b46      	ldr	r3, [pc, #280]	; (800228c <TIM1_init+0x160>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	461a      	mov	r2, r3
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <TIM1_init+0x16c>)
 8002180:	fba3 2302 	umull	r2, r3, r3, r2
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 8002188:	4b40      	ldr	r3, [pc, #256]	; (800228c <TIM1_init+0x160>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	461a      	mov	r2, r3
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <TIM1_init+0x170>)
 8002198:	fba3 2302 	umull	r2, r3, r3, r2
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 80021a0:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <TIM1_init+0x174>)
 80021a2:	4a40      	ldr	r2, [pc, #256]	; (80022a4 <TIM1_init+0x178>)
 80021a4:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <TIM1_init+0x160>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a3d      	ldr	r2, [pc, #244]	; (80022a0 <TIM1_init+0x174>)
 80021ac:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <TIM1_init+0x174>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <TIM1_init+0x174>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <TIM1_init+0x174>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80021c0:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <TIM1_init+0x174>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 80021c6:	4836      	ldr	r0, [pc, #216]	; (80022a0 <TIM1_init+0x174>)
 80021c8:	f003 fcac 	bl	8005b24 <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	2019      	movs	r0, #25
 80021d2:	f000 fe52 	bl	8002e7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021d6:	2019      	movs	r0, #25
 80021d8:	f000 fe6b 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <TIM1_init+0x17c>)
 80021de:	2260      	movs	r2, #96	; 0x60
 80021e0:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80021e2:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <TIM1_init+0x17c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 80021e8:	4a2f      	ldr	r2, [pc, #188]	; (80022a8 <TIM1_init+0x17c>)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80021ee:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <TIM1_init+0x17c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 80021f4:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <TIM1_init+0x17c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 80021fa:	2200      	movs	r2, #0
 80021fc:	492a      	ldr	r1, [pc, #168]	; (80022a8 <TIM1_init+0x17c>)
 80021fe:	4828      	ldr	r0, [pc, #160]	; (80022a0 <TIM1_init+0x174>)
 8002200:	f004 f8d8 	bl	80063b4 <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <TIM1_init+0x180>)
 8002206:	2260      	movs	r2, #96	; 0x60
 8002208:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <TIM1_init+0x180>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 8002210:	4a26      	ldr	r2, [pc, #152]	; (80022ac <TIM1_init+0x180>)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <TIM1_init+0x180>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <TIM1_init+0x180>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <TIM1_init+0x180>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <TIM1_init+0x180>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 800222e:	2204      	movs	r2, #4
 8002230:	491e      	ldr	r1, [pc, #120]	; (80022ac <TIM1_init+0x180>)
 8002232:	481b      	ldr	r0, [pc, #108]	; (80022a0 <TIM1_init+0x174>)
 8002234:	f004 f8be 	bl	80063b4 <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 8002238:	4819      	ldr	r0, [pc, #100]	; (80022a0 <TIM1_init+0x174>)
 800223a:	f003 fc0b 	bl	8005a54 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 800223e:	2100      	movs	r1, #0
 8002240:	4817      	ldr	r0, [pc, #92]	; (80022a0 <TIM1_init+0x174>)
 8002242:	f003 fcc9 	bl	8005bd8 <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <TIM1_init+0x174>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10f      	bne.n	8002276 <TIM1_init+0x14a>
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <TIM1_init+0x174>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	f240 4344 	movw	r3, #1092	; 0x444
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d107      	bne.n	8002276 <TIM1_init+0x14a>
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <TIM1_init+0x174>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <TIM1_init+0x174>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]

}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	2000007c 	.word	0x2000007c
 8002288:	014f8b59 	.word	0x014f8b59
 800228c:	20001a7c 	.word	0x20001a7c
 8002290:	1b4e81b5 	.word	0x1b4e81b5
 8002294:	20001a80 	.word	0x20001a80
 8002298:	38e38e39 	.word	0x38e38e39
 800229c:	88888889 	.word	0x88888889
 80022a0:	200019fc 	.word	0x200019fc
 80022a4:	40010000 	.word	0x40010000
 80022a8:	20001a44 	.word	0x20001a44
 80022ac:	20001a60 	.word	0x20001a60

080022b0 <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b65      	ldr	r3, [pc, #404]	; (8002450 <DMA2_init+0x1a0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a64      	ldr	r2, [pc, #400]	; (8002450 <DMA2_init+0x1a0>)
 80022c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b62      	ldr	r3, [pc, #392]	; (8002450 <DMA2_init+0x1a0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022d2:	4b60      	ldr	r3, [pc, #384]	; (8002454 <DMA2_init+0x1a4>)
 80022d4:	2240      	movs	r2, #64	; 0x40
 80022d6:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 80022d8:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <DMA2_init+0x1a4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 80022de:	4b5d      	ldr	r3, [pc, #372]	; (8002454 <DMA2_init+0x1a4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022e4:	4b5b      	ldr	r3, [pc, #364]	; (8002454 <DMA2_init+0x1a4>)
 80022e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022ea:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022ec:	4b59      	ldr	r3, [pc, #356]	; (8002454 <DMA2_init+0x1a4>)
 80022ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022f2:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 80022f4:	4b57      	ldr	r3, [pc, #348]	; (8002454 <DMA2_init+0x1a4>)
 80022f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022fa:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80022fc:	4b55      	ldr	r3, [pc, #340]	; (8002454 <DMA2_init+0x1a4>)
 80022fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002302:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <DMA2_init+0x1a4>)
 8002306:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800230a:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800230c:	4b51      	ldr	r3, [pc, #324]	; (8002454 <DMA2_init+0x1a4>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002312:	4b50      	ldr	r3, [pc, #320]	; (8002454 <DMA2_init+0x1a4>)
 8002314:	2203      	movs	r2, #3
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 8002318:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <DMA2_init+0x1a4>)
 800231a:	2200      	movs	r2, #0
 800231c:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800231e:	4b4d      	ldr	r3, [pc, #308]	; (8002454 <DMA2_init+0x1a4>)
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 8002324:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <DMA2_init+0x1a4>)
 8002326:	4a4c      	ldr	r2, [pc, #304]	; (8002458 <DMA2_init+0x1a8>)
 8002328:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 800232a:	484a      	ldr	r0, [pc, #296]	; (8002454 <DMA2_init+0x1a4>)
 800232c:	f000 fe8a 	bl	8003044 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 8002330:	4848      	ldr	r0, [pc, #288]	; (8002454 <DMA2_init+0x1a4>)
 8002332:	f000 fdd9 	bl	8002ee8 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 8002336:	4949      	ldr	r1, [pc, #292]	; (800245c <DMA2_init+0x1ac>)
 8002338:	2330      	movs	r3, #48	; 0x30
 800233a:	4a49      	ldr	r2, [pc, #292]	; (8002460 <DMA2_init+0x1b0>)
 800233c:	4845      	ldr	r0, [pc, #276]	; (8002454 <DMA2_init+0x1a4>)
 800233e:	f000 fedf 	bl	8003100 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002342:	4b48      	ldr	r3, [pc, #288]	; (8002464 <DMA2_init+0x1b4>)
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002348:	4b46      	ldr	r3, [pc, #280]	; (8002464 <DMA2_init+0x1b4>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 800234e:	4b45      	ldr	r3, [pc, #276]	; (8002464 <DMA2_init+0x1b4>)
 8002350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002354:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <DMA2_init+0x1b4>)
 8002358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800235c:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800235e:	4b41      	ldr	r3, [pc, #260]	; (8002464 <DMA2_init+0x1b4>)
 8002360:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002364:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 8002366:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <DMA2_init+0x1b4>)
 8002368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800236c:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <DMA2_init+0x1b4>)
 8002370:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002374:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <DMA2_init+0x1b4>)
 8002378:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800237c:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800237e:	4b39      	ldr	r3, [pc, #228]	; (8002464 <DMA2_init+0x1b4>)
 8002380:	2200      	movs	r2, #0
 8002382:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002384:	4b37      	ldr	r3, [pc, #220]	; (8002464 <DMA2_init+0x1b4>)
 8002386:	2203      	movs	r2, #3
 8002388:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 800238a:	4b36      	ldr	r3, [pc, #216]	; (8002464 <DMA2_init+0x1b4>)
 800238c:	2200      	movs	r2, #0
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002390:	4b34      	ldr	r3, [pc, #208]	; (8002464 <DMA2_init+0x1b4>)
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC1.Instance = DMA2_Stream1;
 8002396:	4b33      	ldr	r3, [pc, #204]	; (8002464 <DMA2_init+0x1b4>)
 8002398:	4a33      	ldr	r2, [pc, #204]	; (8002468 <DMA2_init+0x1b8>)
 800239a:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 800239c:	4831      	ldr	r0, [pc, #196]	; (8002464 <DMA2_init+0x1b4>)
 800239e:	f000 fe51 	bl	8003044 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 80023a2:	4830      	ldr	r0, [pc, #192]	; (8002464 <DMA2_init+0x1b4>)
 80023a4:	f000 fda0 	bl	8002ee8 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 80023a8:	4930      	ldr	r1, [pc, #192]	; (800246c <DMA2_init+0x1bc>)
 80023aa:	2330      	movs	r3, #48	; 0x30
 80023ac:	4a30      	ldr	r2, [pc, #192]	; (8002470 <DMA2_init+0x1c0>)
 80023ae:	482d      	ldr	r0, [pc, #180]	; (8002464 <DMA2_init+0x1b4>)
 80023b0:	f000 fea6 	bl	8003100 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023b4:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <DMA2_init+0x1c4>)
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <DMA2_init+0x1c4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <DMA2_init+0x1c4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023c6:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <DMA2_init+0x1c4>)
 80023c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023cc:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023ce:	4b29      	ldr	r3, [pc, #164]	; (8002474 <DMA2_init+0x1c4>)
 80023d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023d4:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 80023d6:	4b27      	ldr	r3, [pc, #156]	; (8002474 <DMA2_init+0x1c4>)
 80023d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023dc:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023de:	4b25      	ldr	r3, [pc, #148]	; (8002474 <DMA2_init+0x1c4>)
 80023e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023e4:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <DMA2_init+0x1c4>)
 80023e8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80023ec:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ee:	4b21      	ldr	r3, [pc, #132]	; (8002474 <DMA2_init+0x1c4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <DMA2_init+0x1c4>)
 80023f6:	2203      	movs	r2, #3
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <DMA2_init+0x1c4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <DMA2_init+0x1c4>)
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC2.Instance = DMA2_Stream2;
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <DMA2_init+0x1c4>)
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <DMA2_init+0x1c8>)
 800240a:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 800240c:	4819      	ldr	r0, [pc, #100]	; (8002474 <DMA2_init+0x1c4>)
 800240e:	f000 fe19 	bl	8003044 <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <DMA2_init+0x1c4>)
 8002414:	4a19      	ldr	r2, [pc, #100]	; (800247c <DMA2_init+0x1cc>)
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <DMA2_init+0x1c4>)
 800241a:	4a19      	ldr	r2, [pc, #100]	; (8002480 <DMA2_init+0x1d0>)
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <DMA2_init+0x1c4>)
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <DMA2_init+0x1d4>)
 8002422:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_DMA_Init(&dmaCC2);
 8002424:	4813      	ldr	r0, [pc, #76]	; (8002474 <DMA2_init+0x1c4>)
 8002426:	f000 fd5f 	bl	8002ee8 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	203a      	movs	r0, #58	; 0x3a
 8002430:	f000 fd23 	bl	8002e7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002434:	203a      	movs	r0, #58	; 0x3a
 8002436:	f000 fd3c 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 800243a:	4913      	ldr	r1, [pc, #76]	; (8002488 <DMA2_init+0x1d8>)
 800243c:	2330      	movs	r3, #48	; 0x30
 800243e:	4a08      	ldr	r2, [pc, #32]	; (8002460 <DMA2_init+0x1b0>)
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <DMA2_init+0x1c4>)
 8002442:	f000 fe98 	bl	8003176 <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	20001a84 	.word	0x20001a84
 8002458:	40026488 	.word	0x40026488
 800245c:	20000080 	.word	0x20000080
 8002460:	40020818 	.word	0x40020818
 8002464:	20001ae4 	.word	0x20001ae4
 8002468:	40026428 	.word	0x40026428
 800246c:	2000199c 	.word	0x2000199c
 8002470:	4002081a 	.word	0x4002081a
 8002474:	20001b44 	.word	0x20001b44
 8002478:	40026440 	.word	0x40026440
 800247c:	08002789 	.word	0x08002789
 8002480:	08002729 	.word	0x08002729
 8002484:	08002709 	.word	0x08002709
 8002488:	20000084 	.word	0x20000084

0800248c <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af02      	add	r7, sp, #8
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	1c58      	adds	r0, r3, #1
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	6088      	str	r0, [r1, #8]
 80024a4:	4413      	add	r3, r2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	1c58      	adds	r0, r3, #1
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	6088      	str	r0, [r1, #8]
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	1c58      	adds	r0, r3, #1
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	6088      	str	r0, [r1, #8]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d102      	bne.n	80024e4 <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7b18      	ldrb	r0, [r3, #12]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b299      	uxth	r1, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	b2dc      	uxtb	r4, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4623      	mov	r3, r4
 80024fc:	f000 fa36 	bl	800296c <ws2812b_set_pixel>
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd90      	pop	{r4, r7, pc}

08002508 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	// transmission complete flag
	ws2812b.transferComplete = 0;
 800250e:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <WS2812_sendbuf+0x1d0>)
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

	uint32_t i;

	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	e019      	b.n	8002550 <WS2812_sendbuf+0x48>
	{
		ws2812b.item[i].frameBufferCounter = 0;
 800251c:	4a6e      	ldr	r2, [pc, #440]	; (80026d8 <WS2812_sendbuf+0x1d0>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4413      	add	r3, r2
 8002524:	3308      	adds	r3, #8
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	4a6a      	ldr	r2, [pc, #424]	; (80026d8 <WS2812_sendbuf+0x1d0>)
 8002530:	4413      	add	r3, r2
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ffa9 	bl	800248c <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	4a66      	ldr	r2, [pc, #408]	; (80026d8 <WS2812_sendbuf+0x1d0>)
 8002540:	4413      	add	r3, r2
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ffa1 	bl	800248c <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3301      	adds	r3, #1
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	d9e2      	bls.n	800251c <WS2812_sendbuf+0x14>
	}

	// clear all DMA flags
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8002556:	4b61      	ldr	r3, [pc, #388]	; (80026dc <WS2812_sendbuf+0x1d4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <WS2812_sendbuf+0x1d8>)
 800255e:	429a      	cmp	r2, r3
 8002560:	d904      	bls.n	800256c <WS2812_sendbuf+0x64>
 8002562:	4b60      	ldr	r3, [pc, #384]	; (80026e4 <WS2812_sendbuf+0x1dc>)
 8002564:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	e019      	b.n	80025a0 <WS2812_sendbuf+0x98>
 800256c:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <WS2812_sendbuf+0x1d4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <WS2812_sendbuf+0x1e0>)
 8002574:	429a      	cmp	r2, r3
 8002576:	d904      	bls.n	8002582 <WS2812_sendbuf+0x7a>
 8002578:	4a5a      	ldr	r2, [pc, #360]	; (80026e4 <WS2812_sendbuf+0x1dc>)
 800257a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800257e:	6093      	str	r3, [r2, #8]
 8002580:	e00e      	b.n	80025a0 <WS2812_sendbuf+0x98>
 8002582:	4b56      	ldr	r3, [pc, #344]	; (80026dc <WS2812_sendbuf+0x1d4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4b58      	ldr	r3, [pc, #352]	; (80026ec <WS2812_sendbuf+0x1e4>)
 800258a:	429a      	cmp	r2, r3
 800258c:	d904      	bls.n	8002598 <WS2812_sendbuf+0x90>
 800258e:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <WS2812_sendbuf+0x1e8>)
 8002590:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002594:	60d3      	str	r3, [r2, #12]
 8002596:	e003      	b.n	80025a0 <WS2812_sendbuf+0x98>
 8002598:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <WS2812_sendbuf+0x1e8>)
 800259a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800259e:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 80025a0:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <WS2812_sendbuf+0x1ec>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b4e      	ldr	r3, [pc, #312]	; (80026e0 <WS2812_sendbuf+0x1d8>)
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d904      	bls.n	80025b6 <WS2812_sendbuf+0xae>
 80025ac:	4b4d      	ldr	r3, [pc, #308]	; (80026e4 <WS2812_sendbuf+0x1dc>)
 80025ae:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80025b2:	60da      	str	r2, [r3, #12]
 80025b4:	e019      	b.n	80025ea <WS2812_sendbuf+0xe2>
 80025b6:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <WS2812_sendbuf+0x1ec>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <WS2812_sendbuf+0x1e0>)
 80025be:	429a      	cmp	r2, r3
 80025c0:	d904      	bls.n	80025cc <WS2812_sendbuf+0xc4>
 80025c2:	4a48      	ldr	r2, [pc, #288]	; (80026e4 <WS2812_sendbuf+0x1dc>)
 80025c4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80025c8:	6093      	str	r3, [r2, #8]
 80025ca:	e00e      	b.n	80025ea <WS2812_sendbuf+0xe2>
 80025cc:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <WS2812_sendbuf+0x1ec>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b46      	ldr	r3, [pc, #280]	; (80026ec <WS2812_sendbuf+0x1e4>)
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d904      	bls.n	80025e2 <WS2812_sendbuf+0xda>
 80025d8:	4a45      	ldr	r2, [pc, #276]	; (80026f0 <WS2812_sendbuf+0x1e8>)
 80025da:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80025de:	60d3      	str	r3, [r2, #12]
 80025e0:	e003      	b.n	80025ea <WS2812_sendbuf+0xe2>
 80025e2:	4a43      	ldr	r2, [pc, #268]	; (80026f0 <WS2812_sendbuf+0x1e8>)
 80025e4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80025e8:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <WS2812_sendbuf+0x1f0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <WS2812_sendbuf+0x1d8>)
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d904      	bls.n	8002600 <WS2812_sendbuf+0xf8>
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <WS2812_sendbuf+0x1dc>)
 80025f8:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	e019      	b.n	8002634 <WS2812_sendbuf+0x12c>
 8002600:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <WS2812_sendbuf+0x1f0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <WS2812_sendbuf+0x1e0>)
 8002608:	429a      	cmp	r2, r3
 800260a:	d904      	bls.n	8002616 <WS2812_sendbuf+0x10e>
 800260c:	4a35      	ldr	r2, [pc, #212]	; (80026e4 <WS2812_sendbuf+0x1dc>)
 800260e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002612:	6093      	str	r3, [r2, #8]
 8002614:	e00e      	b.n	8002634 <WS2812_sendbuf+0x12c>
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <WS2812_sendbuf+0x1f0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	4b33      	ldr	r3, [pc, #204]	; (80026ec <WS2812_sendbuf+0x1e4>)
 800261e:	429a      	cmp	r2, r3
 8002620:	d904      	bls.n	800262c <WS2812_sendbuf+0x124>
 8002622:	4a33      	ldr	r2, [pc, #204]	; (80026f0 <WS2812_sendbuf+0x1e8>)
 8002624:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002628:	60d3      	str	r3, [r2, #12]
 800262a:	e003      	b.n	8002634 <WS2812_sendbuf+0x12c>
 800262c:	4a30      	ldr	r2, [pc, #192]	; (80026f0 <WS2812_sendbuf+0x1e8>)
 800262e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002632:	6093      	str	r3, [r2, #8]



	// configure the number of bytes to be transferred by the DMA controller
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 8002634:	4b29      	ldr	r3, [pc, #164]	; (80026dc <WS2812_sendbuf+0x1d4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2230      	movs	r2, #48	; 0x30
 800263a:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 800263c:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <WS2812_sendbuf+0x1ec>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2230      	movs	r2, #48	; 0x30
 8002642:	605a      	str	r2, [r3, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <WS2812_sendbuf+0x1f0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2230      	movs	r2, #48	; 0x30
 800264a:	605a      	str	r2, [r3, #4]

	// clear all TIM2 flags
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <WS2812_sendbuf+0x1f4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 021f 	mvn.w	r2, #31
 8002654:	611a      	str	r2, [r3, #16]

	// enable DMA channels
	__HAL_DMA_ENABLE(&dmaUpdate);
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <WS2812_sendbuf+0x1d4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <WS2812_sendbuf+0x1d4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <WS2812_sendbuf+0x1ec>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <WS2812_sendbuf+0x1ec>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <WS2812_sendbuf+0x1f0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <WS2812_sendbuf+0x1f0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <WS2812_sendbuf+0x1f4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <WS2812_sendbuf+0x1f4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002694:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <WS2812_sendbuf+0x1f4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <WS2812_sendbuf+0x1f4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <WS2812_sendbuf+0x1f4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <WS2812_sendbuf+0x1f4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026b4:	60da      	str	r2, [r3, #12]

	TIM1->CNT = tim_period-1;
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <WS2812_sendbuf+0x1f8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <WS2812_sendbuf+0x1fc>)
 80026bc:	3b01      	subs	r3, #1
 80026be:	6253      	str	r3, [r2, #36]	; 0x24

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <WS2812_sendbuf+0x1f4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <WS2812_sendbuf+0x1f4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20001890 	.word	0x20001890
 80026dc:	20001a84 	.word	0x20001a84
 80026e0:	40026458 	.word	0x40026458
 80026e4:	40026400 	.word	0x40026400
 80026e8:	400260b8 	.word	0x400260b8
 80026ec:	40026058 	.word	0x40026058
 80026f0:	40026000 	.word	0x40026000
 80026f4:	20001ae4 	.word	0x20001ae4
 80026f8:	20001b44 	.word	0x20001b44
 80026fc:	200019fc 	.word	0x200019fc
 8002700:	20001a7c 	.word	0x20001a7c
 8002704:	40010000 	.word	0x40010000

08002708 <DMA_TransferError>:


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
	i++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3301      	adds	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af02      	add	r7, sp, #8
 800272e:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <DMA_TransferHalfHandler+0x5c>)
 8002732:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d108      	bne.n	800274c <DMA_TransferHalfHandler+0x24>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 800273a:	2300      	movs	r3, #0
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2300      	movs	r3, #0
 8002740:	2200      	movs	r2, #0
 8002742:	2100      	movs	r1, #0
 8002744:	2000      	movs	r0, #0
 8002746:	f000 f911 	bl	800296c <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 800274a:	e017      	b.n	800277c <DMA_TransferHalfHandler+0x54>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e00a      	b.n	8002768 <DMA_TransferHalfHandler+0x40>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <DMA_TransferHalfHandler+0x5c>)
 8002758:	4413      	add	r3, r2
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fe95 	bl	800248c <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3301      	adds	r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	d9f1      	bls.n	8002752 <DMA_TransferHalfHandler+0x2a>
		ws2812b.repeatCounter++;
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <DMA_TransferHalfHandler+0x5c>)
 8002770:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002774:	3301      	adds	r3, #1
 8002776:	4a03      	ldr	r2, [pc, #12]	; (8002784 <DMA_TransferHalfHandler+0x5c>)
 8002778:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20001890 	.word	0x20001890

08002788 <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <DMA_TransferCompleteHandler+0x110>)
 8002792:	2201      	movs	r2, #1
 8002794:	619a      	str	r2, [r3, #24]
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <DMA_TransferCompleteHandler+0x114>)
 8002798:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800279c:	2b64      	cmp	r3, #100	; 0x64
 800279e:	d15b      	bne.n	8002858 <DMA_TransferCompleteHandler+0xd0>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 80027a0:	4b3e      	ldr	r3, [pc, #248]	; (800289c <DMA_TransferCompleteHandler+0x114>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 80027a8:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <DMA_TransferCompleteHandler+0x118>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a3c      	ldr	r2, [pc, #240]	; (80028a0 <DMA_TransferCompleteHandler+0x118>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 80027b4:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <DMA_TransferCompleteHandler+0x11c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <DMA_TransferCompleteHandler+0x11c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 80027c4:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <DMA_TransferCompleteHandler+0x120>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <DMA_TransferCompleteHandler+0x120>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 80027d4:	4b35      	ldr	r3, [pc, #212]	; (80028ac <DMA_TransferCompleteHandler+0x124>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b34      	ldr	r3, [pc, #208]	; (80028ac <DMA_TransferCompleteHandler+0x124>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 80027e4:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <DMA_TransferCompleteHandler+0x128>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <DMA_TransferCompleteHandler+0x128>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f2:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <DMA_TransferCompleteHandler+0x128>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <DMA_TransferCompleteHandler+0x128>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002802:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <DMA_TransferCompleteHandler+0x128>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <DMA_TransferCompleteHandler+0x128>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002812:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <DMA_TransferCompleteHandler+0x118>)
 8002816:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <DMA_TransferCompleteHandler+0x12c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 800281c:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <DMA_TransferCompleteHandler+0x118>)
 800281e:	2200      	movs	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <DMA_TransferCompleteHandler+0x118>)
 8002824:	2201      	movs	r2, #1
 8002826:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <DMA_TransferCompleteHandler+0x128>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0201 	mvn.w	r2, #1
 8002830:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <DMA_TransferCompleteHandler+0x128>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <DMA_TransferCompleteHandler+0x128>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <DMA_TransferCompleteHandler+0x118>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <DMA_TransferCompleteHandler+0x118>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 800284e:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <DMA_TransferCompleteHandler+0x130>)
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <DMA_TransferCompleteHandler+0x134>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6193      	str	r3, [r2, #24]
 8002856:	e017      	b.n	8002888 <DMA_TransferCompleteHandler+0x100>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e00a      	b.n	8002874 <DMA_TransferCompleteHandler+0xec>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <DMA_TransferCompleteHandler+0x114>)
 8002864:	4413      	add	r3, r2
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fe0f 	bl	800248c <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3301      	adds	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	d9f1      	bls.n	800285e <DMA_TransferCompleteHandler+0xd6>
		}

		ws2812b.repeatCounter++;
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <DMA_TransferCompleteHandler+0x114>)
 800287c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002880:	3301      	adds	r3, #1
 8002882:	4a06      	ldr	r2, [pc, #24]	; (800289c <DMA_TransferCompleteHandler+0x114>)
 8002884:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	}



	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <DMA_TransferCompleteHandler+0x110>)
 800288a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800288e:	619a      	str	r2, [r3, #24]
	#endif

}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40020400 	.word	0x40020400
 800289c:	20001890 	.word	0x20001890
 80028a0:	40010000 	.word	0x40010000
 80028a4:	20001a84 	.word	0x20001a84
 80028a8:	20001ae4 	.word	0x20001ae4
 80028ac:	20001b44 	.word	0x20001b44
 80028b0:	200019fc 	.word	0x200019fc
 80028b4:	20001a80 	.word	0x20001a80
 80028b8:	40020800 	.word	0x40020800
 80028bc:	20000084 	.word	0x20000084

080028c0 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <DMA2_Stream2_IRQHandler+0x1c>)
 80028c6:	2202      	movs	r2, #2
 80028c8:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <DMA2_Stream2_IRQHandler+0x20>)
 80028cc:	f000 fd3e 	bl	800334c <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 80028d0:	4b02      	ldr	r3, [pc, #8]	; (80028dc <DMA2_Stream2_IRQHandler+0x1c>)
 80028d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028d6:	619a      	str	r2, [r3, #24]
	#endif
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40020400 	.word	0x40020400
 80028e0:	20001b44 	.word	0x20001b44

080028e4 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 80028ee:	4805      	ldr	r0, [pc, #20]	; (8002904 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80028f0:	f003 fbbc 	bl	800606c <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 80028f4:	4b02      	ldr	r3, [pc, #8]	; (8002900 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80028f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028fa:	619a      	str	r2, [r3, #24]
	#endif
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40020400 	.word	0x40020400
 8002904:	200019fc 	.word	0x200019fc

08002908 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002912:	2200      	movs	r2, #0
 8002914:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    TIM1->CR1 = 0; // disable timer
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002938:	2201      	movs	r2, #1
 800293a:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 800293c:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0201 	mvn.w	r2, #1
 8002944:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20001890 	.word	0x20001890
 8002960:	40010000 	.word	0x40010000
 8002964:	200019fc 	.word	0x200019fc
 8002968:	20001a7c 	.word	0x20001a7c

0800296c <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 800296c:	b490      	push	{r4, r7}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	4604      	mov	r4, r0
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4623      	mov	r3, r4
 800297c:	71fb      	strb	r3, [r7, #7]
 800297e:	4603      	mov	r3, r0
 8002980:	80bb      	strh	r3, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	71bb      	strb	r3, [r7, #6]
 8002986:	4613      	mov	r3, r2
 8002988:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 800298a:	79bb      	ldrb	r3, [r7, #6]
 800298c:	4a5a      	ldr	r2, [pc, #360]	; (8002af8 <ws2812b_set_pixel+0x18c>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <ws2812b_set_pixel+0x18c>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 800299a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800299e:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <ws2812b_set_pixel+0x18c>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint32_t calcCol = (column*24);
 80029a6:	88ba      	ldrh	r2, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	61bb      	str	r3, [r7, #24]
	uint32_t invRed = ~red;
 80029b2:	79bb      	ldrb	r3, [r7, #6]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	617b      	str	r3, [r7, #20]
	uint32_t invGreen = ~green;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	613b      	str	r3, [r7, #16]
	uint32_t invBlue = ~blue;
 80029be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80029c2:	43db      	mvns	r3, r3
 80029c4:	60fb      	str	r3, [r7, #12]



	uint8_t i;
	uint32_t calcClearRow = ~((0x01<<row) << 0);
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	2201      	movs	r2, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	77fb      	strb	r3, [r7, #31]
 80029d6:	e085      	b.n	8002ae4 <ws2812b_set_pixel+0x178>
	{
		// clear the data for pixel

		ws2812bDmaBitBuffer[(calcCol+i)] &= calcClearRow;
 80029d8:	7ffa      	ldrb	r2, [r7, #31]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4413      	add	r3, r2
 80029de:	4a47      	ldr	r2, [pc, #284]	; (8002afc <ws2812b_set_pixel+0x190>)
 80029e0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	7ff8      	ldrb	r0, [r7, #31]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4403      	add	r3, r0
 80029ee:	400a      	ands	r2, r1
 80029f0:	b291      	uxth	r1, r2
 80029f2:	4a42      	ldr	r2, [pc, #264]	; (8002afc <ws2812b_set_pixel+0x190>)
 80029f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+8+i)] &= calcClearRow;
 80029f8:	7ffa      	ldrb	r2, [r7, #31]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4413      	add	r3, r2
 80029fe:	3308      	adds	r3, #8
 8002a00:	4a3e      	ldr	r2, [pc, #248]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002a02:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	7ff8      	ldrb	r0, [r7, #31]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4403      	add	r3, r0
 8002a10:	3308      	adds	r3, #8
 8002a12:	400a      	ands	r2, r1
 8002a14:	b291      	uxth	r1, r2
 8002a16:	4a39      	ldr	r2, [pc, #228]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002a18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+16+i)] &= calcClearRow;
 8002a1c:	7ffa      	ldrb	r2, [r7, #31]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	3310      	adds	r3, #16
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002a26:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	7ff8      	ldrb	r0, [r7, #31]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4403      	add	r3, r0
 8002a34:	3310      	adds	r3, #16
 8002a36:	400a      	ands	r2, r1
 8002a38:	b291      	uxth	r1, r2
 8002a3a:	4a30      	ldr	r2, [pc, #192]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002a3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// write new data for pixel
		ws2812bDmaBitBuffer[(calcCol+i)] |= (((((invGreen)<<i) & 0x80)>>7)<<(row+0));
 8002a40:	7ffa      	ldrb	r2, [r7, #31]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4413      	add	r3, r2
 8002a46:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002a48:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002a4c:	7ffb      	ldrb	r3, [r7, #31]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	09db      	lsrs	r3, r3, #7
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	7ff8      	ldrb	r0, [r7, #31]
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4403      	add	r3, r0
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	b291      	uxth	r1, r2
 8002a6c:	4a23      	ldr	r2, [pc, #140]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002a6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+8+i)] |= (((((invRed)<<i) & 0x80)>>7)<<(row+0));
 8002a72:	7ffa      	ldrb	r2, [r7, #31]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	3308      	adds	r3, #8
 8002a7a:	4a20      	ldr	r2, [pc, #128]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002a7c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002a80:	7ffb      	ldrb	r3, [r7, #31]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	09db      	lsrs	r3, r3, #7
 8002a8a:	f003 0201 	and.w	r2, r3, #1
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	7ff8      	ldrb	r0, [r7, #31]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4403      	add	r3, r0
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	b291      	uxth	r1, r2
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002aa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+16+i)] |= (((((invBlue)<<i) & 0x80)>>7)<<(row+0));
 8002aa8:	7ffa      	ldrb	r2, [r7, #31]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4413      	add	r3, r2
 8002aae:	3310      	adds	r3, #16
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002ab2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	09db      	lsrs	r3, r3, #7
 8002ac0:	f003 0201 	and.w	r2, r3, #1
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	7ff8      	ldrb	r0, [r7, #31]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4403      	add	r3, r0
 8002ad2:	3310      	adds	r3, #16
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	b291      	uxth	r1, r2
 8002ad8:	4a08      	ldr	r2, [pc, #32]	; (8002afc <ws2812b_set_pixel+0x190>)
 8002ada:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 8; i++)
 8002ade:	7ffb      	ldrb	r3, [r7, #31]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	7ffb      	ldrb	r3, [r7, #31]
 8002ae6:	2b07      	cmp	r3, #7
 8002ae8:	f67f af76 	bls.w	80029d8 <ws2812b_set_pixel+0x6c>
	}

}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc90      	pop	{r4, r7}
 8002af6:	4770      	bx	lr
 8002af8:	0800d254 	.word	0x0800d254
 8002afc:	2000199c 	.word	0x2000199c

08002b00 <ws2812b_init>:


void ws2812b_init()
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 8002b04:	f7ff fac4 	bl	8002090 <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 8002b08:	f7ff fbd2 	bl	80022b0 <DMA2_init>
	TIM1_init();
 8002b0c:	f7ff fb0e 	bl	800212c <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 8002b10:	4b02      	ldr	r3, [pc, #8]	; (8002b1c <ws2812b_init+0x1c>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20001890 	.word	0x20001890

08002b20 <ws2812b_handle>:


void ws2812b_handle()
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <ws2812b_handle+0x20>)
 8002b26:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <ws2812b_handle+0x1a>
		ws2812b.startTransfer = 0;
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <ws2812b_handle+0x20>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		WS2812_sendbuf();
 8002b36:	f7ff fce7 	bl	8002508 <WS2812_sendbuf>
	}

}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20001890 	.word	0x20001890

08002b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b48:	480d      	ldr	r0, [pc, #52]	; (8002b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b4a:	490e      	ldr	r1, [pc, #56]	; (8002b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b50:	e002      	b.n	8002b58 <LoopCopyDataInit>

08002b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b56:	3304      	adds	r3, #4

08002b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b5c:	d3f9      	bcc.n	8002b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b60:	4c0b      	ldr	r4, [pc, #44]	; (8002b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b64:	e001      	b.n	8002b6a <LoopFillZerobss>

08002b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b68:	3204      	adds	r2, #4

08002b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b6c:	d3fb      	bcc.n	8002b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b6e:	f7ff fa7d 	bl	800206c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b72:	f009 fe41 	bl	800c7f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b76:	f7fe fcdf 	bl	8001538 <main>
  bx  lr    
 8002b7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b84:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002b88:	0800d400 	.word	0x0800d400
  ldr r2, =_sbss
 8002b8c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002b90:	20003444 	.word	0x20003444

08002b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC_IRQHandler>
	...

08002b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <HAL_Init+0x40>)
 8002ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_Init+0x40>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_Init+0x40>)
 8002bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_Init+0x40>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_Init+0x40>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f000 f94f 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bc6:	200f      	movs	r0, #15
 8002bc8:	f000 f808 	bl	8002bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bcc:	f7ff f8ae 	bl	8001d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023c00 	.word	0x40023c00

08002bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_InitTick+0x54>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_InitTick+0x58>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f967 	bl	8002ece <HAL_SYSTICK_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00e      	b.n	8002c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d80a      	bhi.n	8002c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c10:	2200      	movs	r2, #0
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f000 f92f 	bl	8002e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c1c:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <HAL_InitTick+0x5c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	2000007c 	.word	0x2000007c
 8002c34:	2000008c 	.word	0x2000008c
 8002c38:	20000088 	.word	0x20000088

08002c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_IncTick+0x20>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_IncTick+0x24>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_IncTick+0x24>)
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2000008c 	.word	0x2000008c
 8002c60:	20001ba4 	.word	0x20001ba4

08002c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return uwTick;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_GetTick+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20001ba4 	.word	0x20001ba4

08002c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff ffee 	bl	8002c64 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d005      	beq.n	8002ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_Delay+0x44>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ca2:	bf00      	nop
 8002ca4:	f7ff ffde 	bl	8002c64 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d8f7      	bhi.n	8002ca4 <HAL_Delay+0x28>
  {
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000008c 	.word	0x2000008c

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f7ff ff8e 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff29 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff3e 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff8e 	bl	8002db8 <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5d 	bl	8002d64 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff31 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa2 	bl	8002e20 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff feb6 	bl	8002c64 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e099      	b.n	8003038 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f24:	e00f      	b.n	8002f46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f26:	f7ff fe9d 	bl	8002c64 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d908      	bls.n	8002f46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e078      	b.n	8003038 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e8      	bne.n	8002f26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4b38      	ldr	r3, [pc, #224]	; (8003040 <HAL_DMA_Init+0x158>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0307 	bic.w	r3, r3, #7
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d117      	bne.n	800300a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fb9b 	bl	8003728 <DMA_CheckFifoParam>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003006:	2301      	movs	r3, #1
 8003008:	e016      	b.n	8003038 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fb52 	bl	80036bc <DMA_CalcBaseAndBitshift>
 8003018:	4603      	mov	r3, r0
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	223f      	movs	r2, #63	; 0x3f
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	f010803f 	.word	0xf010803f

08003044 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e050      	b.n	80030f8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d101      	bne.n	8003066 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	e048      	b.n	80030f8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2221      	movs	r2, #33	; 0x21
 80030a4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fb08 	bl	80036bc <DMA_CalcBaseAndBitshift>
 80030ac:	4603      	mov	r3, r0
 80030ae:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	223f      	movs	r2, #63	; 0x3f
 80030da:	409a      	lsls	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_DMA_Start+0x20>
 800311c:	2302      	movs	r3, #2
 800311e:	e026      	b.n	800316e <HAL_DMA_Start+0x6e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d115      	bne.n	8003160 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fa89 	bl	8003660 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0201 	orr.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e005      	b.n	800316c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003168:	2302      	movs	r3, #2
 800316a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800316c:	7dfb      	ldrb	r3, [r7, #23]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_DMA_Start_IT+0x26>
 8003198:	2302      	movs	r3, #2
 800319a:	e040      	b.n	800321e <HAL_DMA_Start_IT+0xa8>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d12f      	bne.n	8003210 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fa4b 	bl	8003660 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	223f      	movs	r2, #63	; 0x3f
 80031d0:	409a      	lsls	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0216 	orr.w	r2, r2, #22
 80031e4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0208 	orr.w	r2, r2, #8
 80031fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e005      	b.n	800321c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003218:	2302      	movs	r3, #2
 800321a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff fd16 	bl	8002c64 <HAL_GetTick>
 8003238:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d008      	beq.n	8003258 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2280      	movs	r2, #128	; 0x80
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e052      	b.n	80032fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0216 	bic.w	r2, r2, #22
 8003266:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003276:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <HAL_DMA_Abort+0x62>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0208 	bic.w	r2, r2, #8
 8003296:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a8:	e013      	b.n	80032d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032aa:	f7ff fcdb 	bl	8002c64 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b05      	cmp	r3, #5
 80032b6:	d90c      	bls.n	80032d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2203      	movs	r2, #3
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e015      	b.n	80032fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e4      	bne.n	80032aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	223f      	movs	r2, #63	; 0x3f
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d004      	beq.n	8003324 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e00c      	b.n	800333e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2205      	movs	r2, #5
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003358:	4b8e      	ldr	r3, [pc, #568]	; (8003594 <HAL_DMA_IRQHandler+0x248>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a8e      	ldr	r2, [pc, #568]	; (8003598 <HAL_DMA_IRQHandler+0x24c>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0a9b      	lsrs	r3, r3, #10
 8003364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003376:	2208      	movs	r2, #8
 8003378:	409a      	lsls	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01a      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0204 	bic.w	r2, r2, #4
 800339e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2208      	movs	r2, #8
 80033a6:	409a      	lsls	r2, r3
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	2201      	movs	r2, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d012      	beq.n	80033ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	2201      	movs	r2, #1
 80033dc:	409a      	lsls	r2, r3
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0202 	orr.w	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f2:	2204      	movs	r2, #4
 80033f4:	409a      	lsls	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d012      	beq.n	8003424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	2204      	movs	r2, #4
 8003412:	409a      	lsls	r2, r3
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f043 0204 	orr.w	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	2210      	movs	r2, #16
 800342a:	409a      	lsls	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d043      	beq.n	80034bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d03c      	beq.n	80034bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	2210      	movs	r2, #16
 8003448:	409a      	lsls	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d018      	beq.n	800348e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d108      	bne.n	800347c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d024      	beq.n	80034bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
 800347a:	e01f      	b.n	80034bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01b      	beq.n	80034bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
 800348c:	e016      	b.n	80034bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d107      	bne.n	80034ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0208 	bic.w	r2, r2, #8
 80034aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	2220      	movs	r2, #32
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 808f 	beq.w	80035ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8087 	beq.w	80035ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	2220      	movs	r2, #32
 80034e4:	409a      	lsls	r2, r3
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d136      	bne.n	8003564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0216 	bic.w	r2, r2, #22
 8003504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d103      	bne.n	8003526 <HAL_DMA_IRQHandler+0x1da>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0208 	bic.w	r2, r2, #8
 8003534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	223f      	movs	r2, #63	; 0x3f
 800353c:	409a      	lsls	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003556:	2b00      	cmp	r3, #0
 8003558:	d07e      	beq.n	8003658 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
        }
        return;
 8003562:	e079      	b.n	8003658 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01d      	beq.n	80035ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10d      	bne.n	800359c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	2b00      	cmp	r3, #0
 8003586:	d031      	beq.n	80035ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
 8003590:	e02c      	b.n	80035ec <HAL_DMA_IRQHandler+0x2a0>
 8003592:	bf00      	nop
 8003594:	2000007c 	.word	0x2000007c
 8003598:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d023      	beq.n	80035ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
 80035ac:	e01e      	b.n	80035ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10f      	bne.n	80035dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0210 	bic.w	r2, r2, #16
 80035ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d032      	beq.n	800365a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d022      	beq.n	8003646 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2205      	movs	r2, #5
 8003604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	3301      	adds	r3, #1
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	429a      	cmp	r2, r3
 8003622:	d307      	bcc.n	8003634 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f2      	bne.n	8003618 <HAL_DMA_IRQHandler+0x2cc>
 8003632:	e000      	b.n	8003636 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003634:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
 8003656:	e000      	b.n	800365a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003658:	bf00      	nop
    }
  }
}
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800367c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	d108      	bne.n	80036a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800369e:	e007      	b.n	80036b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	60da      	str	r2, [r3, #12]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	3b10      	subs	r3, #16
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <DMA_CalcBaseAndBitshift+0x64>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036d6:	4a13      	ldr	r2, [pc, #76]	; (8003724 <DMA_CalcBaseAndBitshift+0x68>)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d909      	bls.n	80036fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036f2:	f023 0303 	bic.w	r3, r3, #3
 80036f6:	1d1a      	adds	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	659a      	str	r2, [r3, #88]	; 0x58
 80036fc:	e007      	b.n	800370e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	aaaaaaab 	.word	0xaaaaaaab
 8003724:	0800d354 	.word	0x0800d354

08003728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11f      	bne.n	8003782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d856      	bhi.n	80037f6 <DMA_CheckFifoParam+0xce>
 8003748:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <DMA_CheckFifoParam+0x28>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003761 	.word	0x08003761
 8003754:	08003773 	.word	0x08003773
 8003758:	08003761 	.word	0x08003761
 800375c:	080037f7 	.word	0x080037f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d046      	beq.n	80037fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003770:	e043      	b.n	80037fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800377a:	d140      	bne.n	80037fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e03d      	b.n	80037fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378a:	d121      	bne.n	80037d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d837      	bhi.n	8003802 <DMA_CheckFifoParam+0xda>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <DMA_CheckFifoParam+0x70>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037af 	.word	0x080037af
 80037a0:	080037a9 	.word	0x080037a9
 80037a4:	080037c1 	.word	0x080037c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      break;
 80037ac:	e030      	b.n	8003810 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d025      	beq.n	8003806 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037be:	e022      	b.n	8003806 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037c8:	d11f      	bne.n	800380a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ce:	e01c      	b.n	800380a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d903      	bls.n	80037de <DMA_CheckFifoParam+0xb6>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d003      	beq.n	80037e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037dc:	e018      	b.n	8003810 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
      break;
 80037e2:	e015      	b.n	8003810 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00e      	beq.n	800380e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      break;
 80037f4:	e00b      	b.n	800380e <DMA_CheckFifoParam+0xe6>
      break;
 80037f6:	bf00      	nop
 80037f8:	e00a      	b.n	8003810 <DMA_CheckFifoParam+0xe8>
      break;
 80037fa:	bf00      	nop
 80037fc:	e008      	b.n	8003810 <DMA_CheckFifoParam+0xe8>
      break;
 80037fe:	bf00      	nop
 8003800:	e006      	b.n	8003810 <DMA_CheckFifoParam+0xe8>
      break;
 8003802:	bf00      	nop
 8003804:	e004      	b.n	8003810 <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <DMA_CheckFifoParam+0xe8>
      break;   
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
    }
  } 
  
  return status; 
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	; 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	e16b      	b.n	8003b14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800383c:	2201      	movs	r2, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	f040 815a 	bne.w	8003b0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d005      	beq.n	8003872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386e:	2b02      	cmp	r3, #2
 8003870:	d130      	bne.n	80038d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	2203      	movs	r2, #3
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038a8:	2201      	movs	r2, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 0201 	and.w	r2, r3, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d017      	beq.n	8003910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d123      	bne.n	8003964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	08da      	lsrs	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3208      	adds	r2, #8
 8003924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	220f      	movs	r2, #15
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	08da      	lsrs	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3208      	adds	r2, #8
 800395e:	69b9      	ldr	r1, [r7, #24]
 8003960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80b4 	beq.w	8003b0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b60      	ldr	r3, [pc, #384]	; (8003b2c <HAL_GPIO_Init+0x30c>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4a5f      	ldr	r2, [pc, #380]	; (8003b2c <HAL_GPIO_Init+0x30c>)
 80039b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b4:	6453      	str	r3, [r2, #68]	; 0x44
 80039b6:	4b5d      	ldr	r3, [pc, #372]	; (8003b2c <HAL_GPIO_Init+0x30c>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039c2:	4a5b      	ldr	r2, [pc, #364]	; (8003b30 <HAL_GPIO_Init+0x310>)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	3302      	adds	r3, #2
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	220f      	movs	r2, #15
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a52      	ldr	r2, [pc, #328]	; (8003b34 <HAL_GPIO_Init+0x314>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02b      	beq.n	8003a46 <HAL_GPIO_Init+0x226>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a51      	ldr	r2, [pc, #324]	; (8003b38 <HAL_GPIO_Init+0x318>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d025      	beq.n	8003a42 <HAL_GPIO_Init+0x222>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a50      	ldr	r2, [pc, #320]	; (8003b3c <HAL_GPIO_Init+0x31c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <HAL_GPIO_Init+0x21e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4f      	ldr	r2, [pc, #316]	; (8003b40 <HAL_GPIO_Init+0x320>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d019      	beq.n	8003a3a <HAL_GPIO_Init+0x21a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4e      	ldr	r2, [pc, #312]	; (8003b44 <HAL_GPIO_Init+0x324>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_GPIO_Init+0x216>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4d      	ldr	r2, [pc, #308]	; (8003b48 <HAL_GPIO_Init+0x328>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00d      	beq.n	8003a32 <HAL_GPIO_Init+0x212>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4c      	ldr	r2, [pc, #304]	; (8003b4c <HAL_GPIO_Init+0x32c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <HAL_GPIO_Init+0x20e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4b      	ldr	r2, [pc, #300]	; (8003b50 <HAL_GPIO_Init+0x330>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_GPIO_Init+0x20a>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e00e      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	e00c      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a2e:	2306      	movs	r3, #6
 8003a30:	e00a      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a32:	2305      	movs	r3, #5
 8003a34:	e008      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a36:	2304      	movs	r3, #4
 8003a38:	e006      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e004      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e002      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a46:	2300      	movs	r3, #0
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	f002 0203 	and.w	r2, r2, #3
 8003a4e:	0092      	lsls	r2, r2, #2
 8003a50:	4093      	lsls	r3, r2
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a58:	4935      	ldr	r1, [pc, #212]	; (8003b30 <HAL_GPIO_Init+0x310>)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3302      	adds	r3, #2
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a66:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <HAL_GPIO_Init+0x334>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a8a:	4a32      	ldr	r2, [pc, #200]	; (8003b54 <HAL_GPIO_Init+0x334>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a90:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_GPIO_Init+0x334>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab4:	4a27      	ldr	r2, [pc, #156]	; (8003b54 <HAL_GPIO_Init+0x334>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aba:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <HAL_GPIO_Init+0x334>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ade:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <HAL_GPIO_Init+0x334>)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_GPIO_Init+0x334>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b08:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <HAL_GPIO_Init+0x334>)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b0f      	cmp	r3, #15
 8003b18:	f67f ae90 	bls.w	800383c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40013800 	.word	0x40013800
 8003b34:	40020000 	.word	0x40020000
 8003b38:	40020400 	.word	0x40020400
 8003b3c:	40020800 	.word	0x40020800
 8003b40:	40020c00 	.word	0x40020c00
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40021400 	.word	0x40021400
 8003b4c:	40021800 	.word	0x40021800
 8003b50:	40021c00 	.word	0x40021c00
 8003b54:	40013c00 	.word	0x40013c00

08003b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b6e:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc fff8 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40013c00 	.word	0x40013c00

08003b88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8a:	b08f      	sub	sp, #60	; 0x3c
 8003b8c:	af0a      	add	r7, sp, #40	; 0x28
 8003b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e10f      	b.n	8003dba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f008 fb05 	bl	800c1c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 fdf6 	bl	80087ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	687e      	ldr	r6, [r7, #4]
 8003be6:	466d      	mov	r5, sp
 8003be8:	f106 0410 	add.w	r4, r6, #16
 8003bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bfc:	1d33      	adds	r3, r6, #4
 8003bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c00:	6838      	ldr	r0, [r7, #0]
 8003c02:	f004 fccd 	bl	80085a0 <USB_CoreInit>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0d0      	b.n	8003dba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 fde4 	bl	80087ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]
 8003c28:	e04a      	b.n	8003cc0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	333d      	adds	r3, #61	; 0x3d
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	333c      	adds	r3, #60	; 0x3c
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	b298      	uxth	r0, r3
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	3344      	adds	r3, #68	; 0x44
 8003c66:	4602      	mov	r2, r0
 8003c68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c6a:	7bfa      	ldrb	r2, [r7, #15]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3340      	adds	r3, #64	; 0x40
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c7e:	7bfa      	ldrb	r2, [r7, #15]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3348      	adds	r3, #72	; 0x48
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c92:	7bfa      	ldrb	r2, [r7, #15]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	334c      	adds	r3, #76	; 0x4c
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3354      	adds	r3, #84	; 0x54
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	7bfa      	ldrb	r2, [r7, #15]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d3af      	bcc.n	8003c2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]
 8003cce:	e044      	b.n	8003d5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003cf8:	7bfa      	ldrb	r2, [r7, #15]
 8003cfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	3301      	adds	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3b5      	bcc.n	8003cd0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	687e      	ldr	r6, [r7, #4]
 8003d6c:	466d      	mov	r5, sp
 8003d6e:	f106 0410 	add.w	r4, r6, #16
 8003d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d82:	1d33      	adds	r3, r6, #4
 8003d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d86:	6838      	ldr	r0, [r7, #0]
 8003d88:	f004 fd7c 	bl	8008884 <USB_DevInit>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e00d      	b.n	8003dba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f005 fecb 	bl	8009b4e <USB_DevDisconnect>

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dc2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_PCD_Start+0x1c>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e020      	b.n	8003e20 <HAL_PCD_Start+0x5e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d109      	bne.n	8003e02 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d005      	beq.n	8003e02 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f004 fcce 	bl	80087a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f005 fe7b 	bl	8009b0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b08d      	sub	sp, #52	; 0x34
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f005 ff39 	bl	8009cb6 <USB_GetMode>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 848a 	bne.w	8004760 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f005 fe9d 	bl	8009b90 <USB_ReadInterrupts>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8480 	beq.w	800475e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f005 fe8a 	bl	8009b90 <USB_ReadInterrupts>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d107      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f002 0202 	and.w	r2, r2, #2
 8003e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f005 fe78 	bl	8009b90 <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d161      	bne.n	8003f6e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0210 	bic.w	r2, r2, #16
 8003eb8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 020f 	and.w	r2, r3, #15
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	0c5b      	lsrs	r3, r3, #17
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d124      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d035      	beq.n	8003f5e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	6a38      	ldr	r0, [r7, #32]
 8003f06:	f005 fcaf 	bl	8009868 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f16:	441a      	add	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	6a1a      	ldr	r2, [r3, #32]
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f28:	441a      	add	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	621a      	str	r2, [r3, #32]
 8003f2e:	e016      	b.n	8003f5e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	0c5b      	lsrs	r3, r3, #17
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	2b06      	cmp	r3, #6
 8003f3a:	d110      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f42:	2208      	movs	r2, #8
 8003f44:	4619      	mov	r1, r3
 8003f46:	6a38      	ldr	r0, [r7, #32]
 8003f48:	f005 fc8e 	bl	8009868 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f58:	441a      	add	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0210 	orr.w	r2, r2, #16
 8003f6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f005 fe0c 	bl	8009b90 <USB_ReadInterrupts>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f82:	f040 80a7 	bne.w	80040d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f005 fe11 	bl	8009bb6 <USB_ReadDevAllOutEpInterrupt>
 8003f94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003f96:	e099      	b.n	80040cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 808e 	beq.w	80040c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f005 fe35 	bl	8009c1e <USB_ReadDevOutEPInterrupt>
 8003fb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00c      	beq.n	8003fda <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2301      	movs	r3, #1
 8003fd0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fec3 	bl	8004d60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00c      	beq.n	8003ffe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 ff99 	bl	8004f30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	461a      	mov	r2, r3
 8004016:	2310      	movs	r3, #16
 8004018:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d030      	beq.n	8004086 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b80      	cmp	r3, #128	; 0x80
 800402e:	d109      	bne.n	8004044 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004042:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	78db      	ldrb	r3, [r3, #3]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d108      	bne.n	8004074 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f008 f9ae 	bl	800c3d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004080:	461a      	mov	r2, r3
 8004082:	2302      	movs	r3, #2
 8004084:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	461a      	mov	r2, r3
 800409e:	2320      	movs	r3, #32
 80040a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	3301      	adds	r3, #1
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f47f af62 	bne.w	8003f98 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f005 fd59 	bl	8009b90 <USB_ReadInterrupts>
 80040de:	4603      	mov	r3, r0
 80040e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e8:	f040 80db 	bne.w	80042a2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f005 fd7a 	bl	8009bea <USB_ReadDevAllInEpInterrupt>
 80040f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80040fc:	e0cd      	b.n	800429a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80c2 	beq.w	800428e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f005 fda0 	bl	8009c5a <USB_ReadDevInEPInterrupt>
 800411a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d057      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	2201      	movs	r2, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43db      	mvns	r3, r3
 8004140:	69f9      	ldr	r1, [r7, #28]
 8004142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004146:	4013      	ands	r3, r2
 8004148:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004156:	461a      	mov	r2, r3
 8004158:	2301      	movs	r3, #1
 800415a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d132      	bne.n	80041ca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	334c      	adds	r3, #76	; 0x4c
 8004174:	6819      	ldr	r1, [r3, #0]
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4403      	add	r3, r0
 8004184:	3348      	adds	r3, #72	; 0x48
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4419      	add	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4403      	add	r3, r0
 8004198:	334c      	adds	r3, #76	; 0x4c
 800419a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <HAL_PCD_IRQHandler+0x3a2>
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	3354      	adds	r3, #84	; 0x54
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041c2:	461a      	mov	r2, r3
 80041c4:	2101      	movs	r1, #1
 80041c6:	f005 fda7 	bl	8009d18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	4619      	mov	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f008 f878 	bl	800c2c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ec:	461a      	mov	r2, r3
 80041ee:	2308      	movs	r3, #8
 80041f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004208:	461a      	mov	r2, r3
 800420a:	2310      	movs	r3, #16
 800420c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	461a      	mov	r2, r3
 8004226:	2340      	movs	r3, #64	; 0x40
 8004228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d023      	beq.n	800427c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004236:	6a38      	ldr	r0, [r7, #32]
 8004238:	f004 fc88 	bl	8008b4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	3338      	adds	r3, #56	; 0x38
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	78db      	ldrb	r3, [r3, #3]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d108      	bne.n	800426a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2200      	movs	r2, #0
 800425c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	b2db      	uxtb	r3, r3
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f008 f8c5 	bl	800c3f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004276:	461a      	mov	r2, r3
 8004278:	2302      	movs	r3, #2
 800427a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fcdb 	bl	8004c44 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	3301      	adds	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	2b00      	cmp	r3, #0
 800429e:	f47f af2e 	bne.w	80040fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f005 fc72 	bl	8009b90 <USB_ReadInterrupts>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b6:	d122      	bne.n	80042fe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d108      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042de:	2100      	movs	r1, #0
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fec3 	bl	800506c <HAL_PCDEx_LPM_Callback>
 80042e6:	e002      	b.n	80042ee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f008 f863 	bl	800c3b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f005 fc44 	bl	8009b90 <USB_ReadInterrupts>
 8004308:	4603      	mov	r3, r0
 800430a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004312:	d112      	bne.n	800433a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b01      	cmp	r3, #1
 8004322:	d102      	bne.n	800432a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f008 f81f 	bl	800c368 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004338:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f005 fc26 	bl	8009b90 <USB_ReadInterrupts>
 8004344:	4603      	mov	r3, r0
 8004346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434e:	f040 80b7 	bne.w	80044c0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2110      	movs	r1, #16
 800436c:	4618      	mov	r0, r3
 800436e:	f004 fbed 	bl	8008b4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004372:	2300      	movs	r3, #0
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	e046      	b.n	8004406 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	461a      	mov	r2, r3
 8004386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800438a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	461a      	mov	r2, r3
 80043ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	3301      	adds	r3, #1
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440c:	429a      	cmp	r2, r3
 800440e:	d3b3      	bcc.n	8004378 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800441e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004422:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800443c:	f043 030b 	orr.w	r3, r3, #11
 8004440:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004452:	f043 030b 	orr.w	r3, r3, #11
 8004456:	6453      	str	r3, [r2, #68]	; 0x44
 8004458:	e015      	b.n	8004486 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800446c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004470:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004480:	f043 030b 	orr.w	r3, r3, #11
 8004484:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004494:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004498:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044aa:	461a      	mov	r2, r3
 80044ac:	f005 fc34 	bl	8009d18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80044be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f005 fb63 	bl	8009b90 <USB_ReadInterrupts>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d4:	d124      	bne.n	8004520 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f005 fbf9 	bl	8009cd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f004 fbae 	bl	8008c46 <USB_GetDevSpeed>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681c      	ldr	r4, [r3, #0]
 80044f6:	f001 fa29 	bl	800594c <HAL_RCC_GetHCLKFreq>
 80044fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004500:	b2db      	uxtb	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	4620      	mov	r0, r4
 8004506:	f004 f8ad 	bl	8008664 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f007 ff03 	bl	800c316 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800451e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f005 fb33 	bl	8009b90 <USB_ReadInterrupts>
 800452a:	4603      	mov	r3, r0
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b08      	cmp	r3, #8
 8004532:	d10a      	bne.n	800454a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f007 fee0 	bl	800c2fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f002 0208 	and.w	r2, r2, #8
 8004548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f005 fb1e 	bl	8009b90 <USB_ReadInterrupts>
 8004554:	4603      	mov	r3, r0
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b80      	cmp	r3, #128	; 0x80
 800455c:	d122      	bne.n	80045a4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800456a:	2301      	movs	r3, #1
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
 800456e:	e014      	b.n	800459a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	b2db      	uxtb	r3, r3
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fb27 	bl	8004be2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	3301      	adds	r3, #1
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d3e5      	bcc.n	8004570 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f005 faf1 	bl	8009b90 <USB_ReadInterrupts>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b8:	d13b      	bne.n	8004632 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045ba:	2301      	movs	r3, #1
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
 80045be:	e02b      	b.n	8004618 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	3340      	adds	r3, #64	; 0x40
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d115      	bne.n	8004612 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da12      	bge.n	8004612 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	333f      	adds	r3, #63	; 0x3f
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004608:	b2db      	uxtb	r3, r3
 800460a:	4619      	mov	r1, r3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fae8 	bl	8004be2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	3301      	adds	r3, #1
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461e:	429a      	cmp	r2, r3
 8004620:	d3ce      	bcc.n	80045c0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f005 faaa 	bl	8009b90 <USB_ReadInterrupts>
 800463c:	4603      	mov	r3, r0
 800463e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004646:	d155      	bne.n	80046f4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004648:	2301      	movs	r3, #1
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	e045      	b.n	80046da <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d12e      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004676:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004678:	2b00      	cmp	r3, #0
 800467a:	da2b      	bge.n	80046d4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004688:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800468c:	429a      	cmp	r2, r3
 800468e:	d121      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046d0:	6053      	str	r3, [r2, #4]
            break;
 80046d2:	e007      	b.n	80046e4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	3301      	adds	r3, #1
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d3b4      	bcc.n	800464e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80046f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f005 fa49 	bl	8009b90 <USB_ReadInterrupts>
 80046fe:	4603      	mov	r3, r0
 8004700:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d10a      	bne.n	8004720 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f007 fe84 	bl	800c418 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800471e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f005 fa33 	bl	8009b90 <USB_ReadInterrupts>
 800472a:	4603      	mov	r3, r0
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b04      	cmp	r3, #4
 8004732:	d115      	bne.n	8004760 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f007 fe74 	bl	800c434 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	430a      	orrs	r2, r1
 800475a:	605a      	str	r2, [r3, #4]
 800475c:	e000      	b.n	8004760 <HAL_PCD_IRQHandler+0x938>
      return;
 800475e:	bf00      	nop
    }
  }
}
 8004760:	3734      	adds	r7, #52	; 0x34
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}

08004766 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_PCD_SetAddress+0x1a>
 800477c:	2302      	movs	r3, #2
 800477e:	e013      	b.n	80047a8 <HAL_PCD_SetAddress+0x42>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f005 f991 	bl	8009ac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	70fb      	strb	r3, [r7, #3]
 80047c2:	460b      	mov	r3, r1
 80047c4:	803b      	strh	r3, [r7, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da0f      	bge.n	80047f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	f003 020f 	and.w	r2, r3, #15
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	3338      	adds	r3, #56	; 0x38
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	3304      	adds	r3, #4
 80047ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	705a      	strb	r2, [r3, #1]
 80047f4:	e00f      	b.n	8004816 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	f003 020f 	and.w	r2, r3, #15
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4413      	add	r3, r2
 800480c:	3304      	adds	r3, #4
 800480e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004822:	883a      	ldrh	r2, [r7, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	78ba      	ldrb	r2, [r7, #2]
 800482c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d004      	beq.n	8004840 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004840:	78bb      	ldrb	r3, [r7, #2]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d102      	bne.n	800484c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_PCD_EP_Open+0xaa>
 8004856:	2302      	movs	r3, #2
 8004858:	e00e      	b.n	8004878 <HAL_PCD_EP_Open+0xc8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	4618      	mov	r0, r3
 800486a:	f004 fa11 	bl	8008c90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004876:	7afb      	ldrb	r3, [r7, #11]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800488c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	da0f      	bge.n	80048b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 020f 	and.w	r2, r3, #15
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	3338      	adds	r3, #56	; 0x38
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4413      	add	r3, r2
 80048a8:	3304      	adds	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	705a      	strb	r2, [r3, #1]
 80048b2:	e00f      	b.n	80048d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f003 020f 	and.w	r2, r3, #15
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	3304      	adds	r3, #4
 80048cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_PCD_EP_Close+0x6e>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e00e      	b.n	800490c <HAL_PCD_EP_Close+0x8c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f004 fa4f 	bl	8008da0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	460b      	mov	r3, r1
 8004922:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004924:	7afb      	ldrb	r3, [r7, #11]
 8004926:	f003 020f 	and.w	r2, r3, #15
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	3304      	adds	r3, #4
 800493c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2200      	movs	r2, #0
 8004954:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004956:	7afb      	ldrb	r3, [r7, #11]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	b2da      	uxtb	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d102      	bne.n	8004970 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004970:	7afb      	ldrb	r3, [r7, #11]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	2b00      	cmp	r3, #0
 8004978:	d109      	bne.n	800498e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	6979      	ldr	r1, [r7, #20]
 8004988:	f004 fd2e 	bl	80093e8 <USB_EP0StartXfer>
 800498c:	e008      	b.n	80049a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	6979      	ldr	r1, [r7, #20]
 800499c:	f004 fadc 	bl	8008f58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	f003 020f 	and.w	r2, r3, #15
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80049cc:	681b      	ldr	r3, [r3, #0]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	460b      	mov	r3, r1
 80049e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ea:	7afb      	ldrb	r3, [r7, #11]
 80049ec:	f003 020f 	and.w	r2, r3, #15
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	3338      	adds	r3, #56	; 0x38
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	3304      	adds	r3, #4
 8004a00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2201      	movs	r2, #1
 8004a18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a1a:	7afb      	ldrb	r3, [r7, #11]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d102      	bne.n	8004a34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a34:	7afb      	ldrb	r3, [r7, #11]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6979      	ldr	r1, [r7, #20]
 8004a4c:	f004 fccc 	bl	80093e8 <USB_EP0StartXfer>
 8004a50:	e008      	b.n	8004a64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6979      	ldr	r1, [r7, #20]
 8004a60:	f004 fa7a 	bl	8008f58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d901      	bls.n	8004a8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e050      	b.n	8004b2e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	da0f      	bge.n	8004ab4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	f003 020f 	and.w	r2, r3, #15
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	3338      	adds	r3, #56	; 0x38
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	705a      	strb	r2, [r3, #1]
 8004ab2:	e00d      	b.n	8004ad0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_PCD_EP_SetStall+0x82>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e01e      	b.n	8004b2e <HAL_PCD_EP_SetStall+0xc0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f004 ff0a 	bl	8009918 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	b2d9      	uxtb	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f005 f8fa 	bl	8009d18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d901      	bls.n	8004b54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e042      	b.n	8004bda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	da0f      	bge.n	8004b7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	3338      	adds	r3, #56	; 0x38
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	3304      	adds	r3, #4
 8004b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	705a      	strb	r2, [r3, #1]
 8004b7a:	e00f      	b.n	8004b9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	4613      	mov	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	3304      	adds	r3, #4
 8004b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_PCD_EP_ClrStall+0x86>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e00e      	b.n	8004bda <HAL_PCD_EP_ClrStall+0xa4>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68f9      	ldr	r1, [r7, #12]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 ff12 	bl	80099f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da0c      	bge.n	8004c10 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	f003 020f 	and.w	r2, r3, #15
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	3338      	adds	r3, #56	; 0x38
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e00c      	b.n	8004c2a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	4613      	mov	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4413      	add	r3, r2
 8004c26:	3304      	adds	r3, #4
 8004c28:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f004 fd31 	bl	8009698 <USB_EPStopXfer>
 8004c36:	4603      	mov	r3, r0
 8004c38:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	3338      	adds	r3, #56	; 0x38
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	4413      	add	r3, r2
 8004c68:	3304      	adds	r3, #4
 8004c6a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d901      	bls.n	8004c7c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e06c      	b.n	8004d56 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	699a      	ldr	r2, [r3, #24]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d902      	bls.n	8004c98 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3303      	adds	r3, #3
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ca0:	e02b      	b.n	8004cfa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d902      	bls.n	8004cbe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3303      	adds	r3, #3
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6919      	ldr	r1, [r3, #16]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	4603      	mov	r3, r0
 8004cdc:	6978      	ldr	r0, [r7, #20]
 8004cde:	f004 fd85 	bl	80097ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a1a      	ldr	r2, [r3, #32]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	441a      	add	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d809      	bhi.n	8004d24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d203      	bcs.n	8004d24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1be      	bne.n	8004ca2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d811      	bhi.n	8004d54 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	2201      	movs	r2, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	6939      	ldr	r1, [r7, #16]
 8004d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d50:	4013      	ands	r3, r2
 8004d52:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	333c      	adds	r3, #60	; 0x3c
 8004d78:	3304      	adds	r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d17b      	bne.n	8004e8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4a61      	ldr	r2, [pc, #388]	; (8004f28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	f240 80b9 	bls.w	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80b3 	beq.w	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc8:	6093      	str	r3, [r2, #8]
 8004dca:	e0a7      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	461a      	mov	r2, r3
 8004de4:	2320      	movs	r3, #32
 8004de6:	6093      	str	r3, [r2, #8]
 8004de8:	e098      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 8093 	bne.w	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	4a4b      	ldr	r2, [pc, #300]	; (8004f28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d90f      	bls.n	8004e1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	461a      	mov	r2, r3
 8004e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1a:	6093      	str	r3, [r2, #8]
 8004e1c:	e07e      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	3304      	adds	r3, #4
 8004e32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	0159      	lsls	r1, r3, #5
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	440b      	add	r3, r1
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d114      	bne.n	8004e80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	f004 ff54 	bl	8009d18 <USB_EP0_OutStart>
 8004e70:	e006      	b.n	8004e80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	441a      	add	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f007 fa02 	bl	800c290 <HAL_PCD_DataOutStageCallback>
 8004e8c:	e046      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d124      	bne.n	8004ee0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eac:	461a      	mov	r2, r3
 8004eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb2:	6093      	str	r3, [r2, #8]
 8004eb4:	e032      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2320      	movs	r3, #32
 8004ed0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f007 f9d9 	bl	800c290 <HAL_PCD_DataOutStageCallback>
 8004ede:	e01d      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d114      	bne.n	8004f10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d108      	bne.n	8004f10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f004 ff04 	bl	8009d18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f007 f9ba 	bl	800c290 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3720      	adds	r7, #32
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	4f54300a 	.word	0x4f54300a
 8004f2c:	4f54310a 	.word	0x4f54310a

08004f30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	333c      	adds	r3, #60	; 0x3c
 8004f48:	3304      	adds	r3, #4
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d90e      	bls.n	8004f84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f007 f971 	bl	800c26c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d90c      	bls.n	8004fac <PCD_EP_OutSetupPacket_int+0x7c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d108      	bne.n	8004fac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	f004 feb6 	bl	8009d18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	4f54300a 	.word	0x4f54300a

08004fbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d107      	bne.n	8004fea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fda:	883b      	ldrh	r3, [r7, #0]
 8004fdc:	0419      	lsls	r1, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fe8:	e028      	b.n	800503c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	73fb      	strb	r3, [r7, #15]
 8004ffc:	e00d      	b.n	800501a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	3340      	adds	r3, #64	; 0x40
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	4413      	add	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	3301      	adds	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	3b01      	subs	r3, #1
 8005020:	429a      	cmp	r2, r3
 8005022:	d3ec      	bcc.n	8004ffe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005024:	883b      	ldrh	r3, [r7, #0]
 8005026:	0418      	lsls	r0, r3, #16
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6819      	ldr	r1, [r3, #0]
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	3b01      	subs	r3, #1
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4302      	orrs	r2, r0
 8005034:	3340      	adds	r3, #64	; 0x40
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	887a      	ldrh	r2, [r7, #2]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e267      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d075      	beq.n	800518e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050a2:	4b88      	ldr	r3, [pc, #544]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d00c      	beq.n	80050c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ae:	4b85      	ldr	r3, [pc, #532]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d112      	bne.n	80050e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ba:	4b82      	ldr	r3, [pc, #520]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c8:	4b7e      	ldr	r3, [pc, #504]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d05b      	beq.n	800518c <HAL_RCC_OscConfig+0x108>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d157      	bne.n	800518c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e242      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e8:	d106      	bne.n	80050f8 <HAL_RCC_OscConfig+0x74>
 80050ea:	4b76      	ldr	r3, [pc, #472]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a75      	ldr	r2, [pc, #468]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e01d      	b.n	8005134 <HAL_RCC_OscConfig+0xb0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x98>
 8005102:	4b70      	ldr	r3, [pc, #448]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6f      	ldr	r2, [pc, #444]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b6d      	ldr	r3, [pc, #436]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a6c      	ldr	r2, [pc, #432]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e00b      	b.n	8005134 <HAL_RCC_OscConfig+0xb0>
 800511c:	4b69      	ldr	r3, [pc, #420]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a68      	ldr	r2, [pc, #416]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b66      	ldr	r3, [pc, #408]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a65      	ldr	r2, [pc, #404]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 800512e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fd fd92 	bl	8002c64 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd fd8e 	bl	8002c64 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e207      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005156:	4b5b      	ldr	r3, [pc, #364]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0xc0>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fd fd7e 	bl	8002c64 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800516c:	f7fd fd7a 	bl	8002c64 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	; 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e1f3      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517e:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0xe8>
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d063      	beq.n	8005262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800519a:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a6:	4b47      	ldr	r3, [pc, #284]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d11c      	bne.n	80051ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051b2:	4b44      	ldr	r3, [pc, #272]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d116      	bne.n	80051ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051be:	4b41      	ldr	r3, [pc, #260]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_RCC_OscConfig+0x152>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e1c7      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d6:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4937      	ldr	r1, [pc, #220]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	e03a      	b.n	8005262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d020      	beq.n	8005236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f4:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <HAL_RCC_OscConfig+0x244>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fa:	f7fd fd33 	bl	8002c64 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005202:	f7fd fd2f 	bl	8002c64 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e1a8      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005214:	4b2b      	ldr	r3, [pc, #172]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005220:	4b28      	ldr	r3, [pc, #160]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4925      	ldr	r1, [pc, #148]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]
 8005234:	e015      	b.n	8005262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005236:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <HAL_RCC_OscConfig+0x244>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fd fd12 	bl	8002c64 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005244:	f7fd fd0e 	bl	8002c64 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e187      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005256:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d036      	beq.n	80052dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d016      	beq.n	80052a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005276:	4b15      	ldr	r3, [pc, #84]	; (80052cc <HAL_RCC_OscConfig+0x248>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fd fcf2 	bl	8002c64 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005284:	f7fd fcee 	bl	8002c64 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e167      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0x200>
 80052a2:	e01b      	b.n	80052dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <HAL_RCC_OscConfig+0x248>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052aa:	f7fd fcdb 	bl	8002c64 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b0:	e00e      	b.n	80052d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b2:	f7fd fcd7 	bl	8002c64 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d907      	bls.n	80052d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e150      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
 80052c4:	40023800 	.word	0x40023800
 80052c8:	42470000 	.word	0x42470000
 80052cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d0:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80052d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ea      	bne.n	80052b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8097 	beq.w	8005418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ea:	2300      	movs	r3, #0
 80052ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ee:	4b81      	ldr	r3, [pc, #516]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10f      	bne.n	800531a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	4b7d      	ldr	r3, [pc, #500]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	4a7c      	ldr	r2, [pc, #496]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005308:	6413      	str	r3, [r2, #64]	; 0x40
 800530a:	4b7a      	ldr	r3, [pc, #488]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005316:	2301      	movs	r3, #1
 8005318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531a:	4b77      	ldr	r3, [pc, #476]	; (80054f8 <HAL_RCC_OscConfig+0x474>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d118      	bne.n	8005358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005326:	4b74      	ldr	r3, [pc, #464]	; (80054f8 <HAL_RCC_OscConfig+0x474>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a73      	ldr	r2, [pc, #460]	; (80054f8 <HAL_RCC_OscConfig+0x474>)
 800532c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005332:	f7fd fc97 	bl	8002c64 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533a:	f7fd fc93 	bl	8002c64 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e10c      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534c:	4b6a      	ldr	r3, [pc, #424]	; (80054f8 <HAL_RCC_OscConfig+0x474>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d106      	bne.n	800536e <HAL_RCC_OscConfig+0x2ea>
 8005360:	4b64      	ldr	r3, [pc, #400]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a63      	ldr	r2, [pc, #396]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	e01c      	b.n	80053a8 <HAL_RCC_OscConfig+0x324>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b05      	cmp	r3, #5
 8005374:	d10c      	bne.n	8005390 <HAL_RCC_OscConfig+0x30c>
 8005376:	4b5f      	ldr	r3, [pc, #380]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	4a5e      	ldr	r2, [pc, #376]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 800537c:	f043 0304 	orr.w	r3, r3, #4
 8005380:	6713      	str	r3, [r2, #112]	; 0x70
 8005382:	4b5c      	ldr	r3, [pc, #368]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	4a5b      	ldr	r2, [pc, #364]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	6713      	str	r3, [r2, #112]	; 0x70
 800538e:	e00b      	b.n	80053a8 <HAL_RCC_OscConfig+0x324>
 8005390:	4b58      	ldr	r3, [pc, #352]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a57      	ldr	r2, [pc, #348]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
 800539c:	4b55      	ldr	r3, [pc, #340]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	4a54      	ldr	r2, [pc, #336]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80053a2:	f023 0304 	bic.w	r3, r3, #4
 80053a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d015      	beq.n	80053dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b0:	f7fd fc58 	bl	8002c64 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fd fc54 	bl	8002c64 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0cb      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ce:	4b49      	ldr	r3, [pc, #292]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0ee      	beq.n	80053b8 <HAL_RCC_OscConfig+0x334>
 80053da:	e014      	b.n	8005406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053dc:	f7fd fc42 	bl	8002c64 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e4:	f7fd fc3e 	bl	8002c64 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0b5      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fa:	4b3e      	ldr	r3, [pc, #248]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1ee      	bne.n	80053e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d105      	bne.n	8005418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540c:	4b39      	ldr	r3, [pc, #228]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	4a38      	ldr	r2, [pc, #224]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80a1 	beq.w	8005564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005422:	4b34      	ldr	r3, [pc, #208]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	2b08      	cmp	r3, #8
 800542c:	d05c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d141      	bne.n	80054ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005436:	4b31      	ldr	r3, [pc, #196]	; (80054fc <HAL_RCC_OscConfig+0x478>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fd fc12 	bl	8002c64 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005444:	f7fd fc0e 	bl	8002c64 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e087      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005456:	4b27      	ldr	r3, [pc, #156]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	019b      	lsls	r3, r3, #6
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	3b01      	subs	r3, #1
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	061b      	lsls	r3, r3, #24
 8005486:	491b      	ldr	r1, [pc, #108]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <HAL_RCC_OscConfig+0x478>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005492:	f7fd fbe7 	bl	8002c64 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800549a:	f7fd fbe3 	bl	8002c64 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e05c      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x416>
 80054b8:	e054      	b.n	8005564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ba:	4b10      	ldr	r3, [pc, #64]	; (80054fc <HAL_RCC_OscConfig+0x478>)
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fd fbd0 	bl	8002c64 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fd fbcc 	bl	8002c64 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e045      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x444>
 80054e6:	e03d      	b.n	8005564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e038      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40007000 	.word	0x40007000
 80054fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005500:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <HAL_RCC_OscConfig+0x4ec>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d028      	beq.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d121      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d11a      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005530:	4013      	ands	r3, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005538:	4293      	cmp	r3, r2
 800553a:	d111      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	3b01      	subs	r3, #1
 800554a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d107      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40023800 	.word	0x40023800

08005574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0cc      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005588:	4b68      	ldr	r3, [pc, #416]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d90c      	bls.n	80055b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005596:	4b65      	ldr	r3, [pc, #404]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b63      	ldr	r3, [pc, #396]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0b8      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c8:	4b59      	ldr	r3, [pc, #356]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	4a58      	ldr	r2, [pc, #352]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055e0:	4b53      	ldr	r3, [pc, #332]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4a52      	ldr	r2, [pc, #328]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ec:	4b50      	ldr	r3, [pc, #320]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	494d      	ldr	r1, [pc, #308]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d044      	beq.n	8005694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d107      	bne.n	8005622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	4b47      	ldr	r3, [pc, #284]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d119      	bne.n	8005652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e07f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d003      	beq.n	8005632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562e:	2b03      	cmp	r3, #3
 8005630:	d107      	bne.n	8005642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005632:	4b3f      	ldr	r3, [pc, #252]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e06f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005642:	4b3b      	ldr	r3, [pc, #236]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e067      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005652:	4b37      	ldr	r3, [pc, #220]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 0203 	bic.w	r2, r3, #3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	4934      	ldr	r1, [pc, #208]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	4313      	orrs	r3, r2
 8005662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005664:	f7fd fafe 	bl	8002c64 <HAL_GetTick>
 8005668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566a:	e00a      	b.n	8005682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800566c:	f7fd fafa 	bl	8002c64 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	; 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e04f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005682:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 020c 	and.w	r2, r3, #12
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	429a      	cmp	r2, r3
 8005692:	d1eb      	bne.n	800566c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005694:	4b25      	ldr	r3, [pc, #148]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d20c      	bcs.n	80056bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a2:	4b22      	ldr	r3, [pc, #136]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056aa:	4b20      	ldr	r3, [pc, #128]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e032      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c8:	4b19      	ldr	r3, [pc, #100]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4916      	ldr	r1, [pc, #88]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056e6:	4b12      	ldr	r3, [pc, #72]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	490e      	ldr	r1, [pc, #56]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056fa:	f000 f821 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80056fe:	4602      	mov	r2, r0
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	490a      	ldr	r1, [pc, #40]	; (8005734 <HAL_RCC_ClockConfig+0x1c0>)
 800570c:	5ccb      	ldrb	r3, [r1, r3]
 800570e:	fa22 f303 	lsr.w	r3, r2, r3
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <HAL_RCC_ClockConfig+0x1c4>)
 8005714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005716:	4b09      	ldr	r3, [pc, #36]	; (800573c <HAL_RCC_ClockConfig+0x1c8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fd fa5e 	bl	8002bdc <HAL_InitTick>

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40023c00 	.word	0x40023c00
 8005730:	40023800 	.word	0x40023800
 8005734:	0800d23c 	.word	0x0800d23c
 8005738:	2000007c 	.word	0x2000007c
 800573c:	20000088 	.word	0x20000088

08005740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005744:	b094      	sub	sp, #80	; 0x50
 8005746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	647b      	str	r3, [r7, #68]	; 0x44
 800574c:	2300      	movs	r3, #0
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005750:	2300      	movs	r3, #0
 8005752:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005758:	4b79      	ldr	r3, [pc, #484]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	2b08      	cmp	r3, #8
 8005762:	d00d      	beq.n	8005780 <HAL_RCC_GetSysClockFreq+0x40>
 8005764:	2b08      	cmp	r3, #8
 8005766:	f200 80e1 	bhi.w	800592c <HAL_RCC_GetSysClockFreq+0x1ec>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x34>
 800576e:	2b04      	cmp	r3, #4
 8005770:	d003      	beq.n	800577a <HAL_RCC_GetSysClockFreq+0x3a>
 8005772:	e0db      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005774:	4b73      	ldr	r3, [pc, #460]	; (8005944 <HAL_RCC_GetSysClockFreq+0x204>)
 8005776:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005778:	e0db      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800577a:	4b73      	ldr	r3, [pc, #460]	; (8005948 <HAL_RCC_GetSysClockFreq+0x208>)
 800577c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800577e:	e0d8      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005780:	4b6f      	ldr	r3, [pc, #444]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005788:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800578a:	4b6d      	ldr	r3, [pc, #436]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d063      	beq.n	800585e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005796:	4b6a      	ldr	r3, [pc, #424]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	099b      	lsrs	r3, r3, #6
 800579c:	2200      	movs	r2, #0
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
 80057a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
 80057ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057b2:	4622      	mov	r2, r4
 80057b4:	462b      	mov	r3, r5
 80057b6:	f04f 0000 	mov.w	r0, #0
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	0159      	lsls	r1, r3, #5
 80057c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c4:	0150      	lsls	r0, r2, #5
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4621      	mov	r1, r4
 80057cc:	1a51      	subs	r1, r2, r1
 80057ce:	6139      	str	r1, [r7, #16]
 80057d0:	4629      	mov	r1, r5
 80057d2:	eb63 0301 	sbc.w	r3, r3, r1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057e4:	4659      	mov	r1, fp
 80057e6:	018b      	lsls	r3, r1, #6
 80057e8:	4651      	mov	r1, sl
 80057ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057ee:	4651      	mov	r1, sl
 80057f0:	018a      	lsls	r2, r1, #6
 80057f2:	4651      	mov	r1, sl
 80057f4:	ebb2 0801 	subs.w	r8, r2, r1
 80057f8:	4659      	mov	r1, fp
 80057fa:	eb63 0901 	sbc.w	r9, r3, r1
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800580a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800580e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005812:	4690      	mov	r8, r2
 8005814:	4699      	mov	r9, r3
 8005816:	4623      	mov	r3, r4
 8005818:	eb18 0303 	adds.w	r3, r8, r3
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	462b      	mov	r3, r5
 8005820:	eb49 0303 	adc.w	r3, r9, r3
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005832:	4629      	mov	r1, r5
 8005834:	024b      	lsls	r3, r1, #9
 8005836:	4621      	mov	r1, r4
 8005838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800583c:	4621      	mov	r1, r4
 800583e:	024a      	lsls	r2, r1, #9
 8005840:	4610      	mov	r0, r2
 8005842:	4619      	mov	r1, r3
 8005844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005846:	2200      	movs	r2, #0
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
 800584a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800584c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005850:	f7fa fd16 	bl	8000280 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4613      	mov	r3, r2
 800585a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800585c:	e058      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800585e:	4b38      	ldr	r3, [pc, #224]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	099b      	lsrs	r3, r3, #6
 8005864:	2200      	movs	r2, #0
 8005866:	4618      	mov	r0, r3
 8005868:	4611      	mov	r1, r2
 800586a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	2300      	movs	r3, #0
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
 8005874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	f04f 0000 	mov.w	r0, #0
 8005880:	f04f 0100 	mov.w	r1, #0
 8005884:	0159      	lsls	r1, r3, #5
 8005886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800588a:	0150      	lsls	r0, r2, #5
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4641      	mov	r1, r8
 8005892:	ebb2 0a01 	subs.w	sl, r2, r1
 8005896:	4649      	mov	r1, r9
 8005898:	eb63 0b01 	sbc.w	fp, r3, r1
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058b0:	ebb2 040a 	subs.w	r4, r2, sl
 80058b4:	eb63 050b 	sbc.w	r5, r3, fp
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	00eb      	lsls	r3, r5, #3
 80058c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058c6:	00e2      	lsls	r2, r4, #3
 80058c8:	4614      	mov	r4, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	4643      	mov	r3, r8
 80058ce:	18e3      	adds	r3, r4, r3
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	464b      	mov	r3, r9
 80058d4:	eb45 0303 	adc.w	r3, r5, r3
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058e6:	4629      	mov	r1, r5
 80058e8:	028b      	lsls	r3, r1, #10
 80058ea:	4621      	mov	r1, r4
 80058ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058f0:	4621      	mov	r1, r4
 80058f2:	028a      	lsls	r2, r1, #10
 80058f4:	4610      	mov	r0, r2
 80058f6:	4619      	mov	r1, r3
 80058f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058fa:	2200      	movs	r2, #0
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	61fa      	str	r2, [r7, #28]
 8005900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005904:	f7fa fcbc 	bl	8000280 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4613      	mov	r3, r2
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	3301      	adds	r3, #1
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800592a:	e002      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetSysClockFreq+0x204>)
 800592e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005934:	4618      	mov	r0, r3
 8005936:	3750      	adds	r7, #80	; 0x50
 8005938:	46bd      	mov	sp, r7
 800593a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800
 8005944:	00f42400 	.word	0x00f42400
 8005948:	007a1200 	.word	0x007a1200

0800594c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <HAL_RCC_GetHCLKFreq+0x14>)
 8005952:	681b      	ldr	r3, [r3, #0]
}
 8005954:	4618      	mov	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	2000007c 	.word	0x2000007c

08005964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005968:	f7ff fff0 	bl	800594c <HAL_RCC_GetHCLKFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	0a9b      	lsrs	r3, r3, #10
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	4903      	ldr	r1, [pc, #12]	; (8005988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40023800 	.word	0x40023800
 8005988:	0800d24c 	.word	0x0800d24c

0800598c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005990:	f7ff ffdc 	bl	800594c <HAL_RCC_GetHCLKFreq>
 8005994:	4602      	mov	r2, r0
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	0b5b      	lsrs	r3, r3, #13
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	4903      	ldr	r1, [pc, #12]	; (80059b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059a2:	5ccb      	ldrb	r3, [r1, r3]
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40023800 	.word	0x40023800
 80059b0:	0800d24c 	.word	0x0800d24c

080059b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e041      	b.n	8005a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fc f9ce 	bl	8001d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f000 feca 	bl	800678c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d001      	beq.n	8005a6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e046      	b.n	8005afa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a23      	ldr	r2, [pc, #140]	; (8005b08 <HAL_TIM_Base_Start+0xb4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d022      	beq.n	8005ac4 <HAL_TIM_Base_Start+0x70>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a86:	d01d      	beq.n	8005ac4 <HAL_TIM_Base_Start+0x70>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <HAL_TIM_Base_Start+0xb8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d018      	beq.n	8005ac4 <HAL_TIM_Base_Start+0x70>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <HAL_TIM_Base_Start+0xbc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <HAL_TIM_Base_Start+0x70>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <HAL_TIM_Base_Start+0xc0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_TIM_Base_Start+0x70>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <HAL_TIM_Base_Start+0xc4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d009      	beq.n	8005ac4 <HAL_TIM_Base_Start+0x70>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <HAL_TIM_Base_Start+0xc8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_TIM_Base_Start+0x70>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_TIM_Base_Start+0xcc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d111      	bne.n	8005ae8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b06      	cmp	r3, #6
 8005ad4:	d010      	beq.n	8005af8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae6:	e007      	b.n	8005af8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800
 8005b14:	40000c00 	.word	0x40000c00
 8005b18:	40010400 	.word	0x40010400
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40001800 	.word	0x40001800

08005b24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e041      	b.n	8005bba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f839 	bl	8005bc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4619      	mov	r1, r3
 8005b62:	4610      	mov	r0, r2
 8005b64:	f000 fe12 	bl	800678c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <HAL_TIM_PWM_Start+0x24>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e022      	b.n	8005c42 <HAL_TIM_PWM_Start+0x6a>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d109      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x3e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	e015      	b.n	8005c42 <HAL_TIM_PWM_Start+0x6a>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x58>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e008      	b.n	8005c42 <HAL_TIM_PWM_Start+0x6a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e07c      	b.n	8005d44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0x82>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c58:	e013      	b.n	8005c82 <HAL_TIM_PWM_Start+0xaa>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x92>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c68:	e00b      	b.n	8005c82 <HAL_TIM_PWM_Start+0xaa>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d104      	bne.n	8005c7a <HAL_TIM_PWM_Start+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c78:	e003      	b.n	8005c82 <HAL_TIM_PWM_Start+0xaa>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2201      	movs	r2, #1
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 f992 	bl	8006fb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2d      	ldr	r2, [pc, #180]	; (8005d4c <HAL_TIM_PWM_Start+0x174>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIM_PWM_Start+0xcc>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	; (8005d50 <HAL_TIM_PWM_Start+0x178>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIM_PWM_Start+0xd0>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <HAL_TIM_PWM_Start+0xd2>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <HAL_TIM_PWM_Start+0x174>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d022      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd0:	d01d      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <HAL_TIM_PWM_Start+0x17c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d018      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	; (8005d58 <HAL_TIM_PWM_Start+0x180>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <HAL_TIM_PWM_Start+0x184>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00e      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <HAL_TIM_PWM_Start+0x178>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d009      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <HAL_TIM_PWM_Start+0x188>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d004      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <HAL_TIM_PWM_Start+0x18c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d111      	bne.n	8005d32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b06      	cmp	r3, #6
 8005d1e:	d010      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d30:	e007      	b.n	8005d42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0201 	orr.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40001800 	.word	0x40001800

08005d68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e041      	b.n	8005dfe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f839 	bl	8005e06 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4619      	mov	r1, r3
 8005da6:	4610      	mov	r0, r2
 8005da8:	f000 fcf0 	bl	800678c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <HAL_TIM_IC_Start_IT+0x1e>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	e013      	b.n	8005e62 <HAL_TIM_IC_Start_IT+0x46>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_IC_Start_IT+0x2e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	e00b      	b.n	8005e62 <HAL_TIM_IC_Start_IT+0x46>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_IC_Start_IT+0x3e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	e003      	b.n	8005e62 <HAL_TIM_IC_Start_IT+0x46>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <HAL_TIM_IC_Start_IT+0x58>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	e013      	b.n	8005e9c <HAL_TIM_IC_Start_IT+0x80>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d104      	bne.n	8005e84 <HAL_TIM_IC_Start_IT+0x68>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e00b      	b.n	8005e9c <HAL_TIM_IC_Start_IT+0x80>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d104      	bne.n	8005e94 <HAL_TIM_IC_Start_IT+0x78>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e003      	b.n	8005e9c <HAL_TIM_IC_Start_IT+0x80>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d102      	bne.n	8005eaa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ea4:	7b7b      	ldrb	r3, [r7, #13]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d001      	beq.n	8005eae <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e0cc      	b.n	8006048 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_IC_Start_IT+0xa2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ebc:	e013      	b.n	8005ee6 <HAL_TIM_IC_Start_IT+0xca>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d104      	bne.n	8005ece <HAL_TIM_IC_Start_IT+0xb2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ecc:	e00b      	b.n	8005ee6 <HAL_TIM_IC_Start_IT+0xca>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d104      	bne.n	8005ede <HAL_TIM_IC_Start_IT+0xc2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005edc:	e003      	b.n	8005ee6 <HAL_TIM_IC_Start_IT+0xca>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_IC_Start_IT+0xda>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef4:	e013      	b.n	8005f1e <HAL_TIM_IC_Start_IT+0x102>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_IC_Start_IT+0xea>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f04:	e00b      	b.n	8005f1e <HAL_TIM_IC_Start_IT+0x102>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d104      	bne.n	8005f16 <HAL_TIM_IC_Start_IT+0xfa>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f14:	e003      	b.n	8005f1e <HAL_TIM_IC_Start_IT+0x102>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b0c      	cmp	r3, #12
 8005f22:	d841      	bhi.n	8005fa8 <HAL_TIM_IC_Start_IT+0x18c>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <HAL_TIM_IC_Start_IT+0x110>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f61 	.word	0x08005f61
 8005f30:	08005fa9 	.word	0x08005fa9
 8005f34:	08005fa9 	.word	0x08005fa9
 8005f38:	08005fa9 	.word	0x08005fa9
 8005f3c:	08005f73 	.word	0x08005f73
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005fa9 	.word	0x08005fa9
 8005f48:	08005fa9 	.word	0x08005fa9
 8005f4c:	08005f85 	.word	0x08005f85
 8005f50:	08005fa9 	.word	0x08005fa9
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005fa9 	.word	0x08005fa9
 8005f5c:	08005f97 	.word	0x08005f97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0202 	orr.w	r2, r2, #2
 8005f6e:	60da      	str	r2, [r3, #12]
      break;
 8005f70:	e01d      	b.n	8005fae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0204 	orr.w	r2, r2, #4
 8005f80:	60da      	str	r2, [r3, #12]
      break;
 8005f82:	e014      	b.n	8005fae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0208 	orr.w	r2, r2, #8
 8005f92:	60da      	str	r2, [r3, #12]
      break;
 8005f94:	e00b      	b.n	8005fae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0210 	orr.w	r2, r2, #16
 8005fa4:	60da      	str	r2, [r3, #12]
      break;
 8005fa6:	e002      	b.n	8005fae <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      break;
 8005fac:	bf00      	nop
  }

  if (status == HAL_OK)
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d148      	bne.n	8006046 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fff9 	bl	8006fb4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a22      	ldr	r2, [pc, #136]	; (8006050 <HAL_TIM_IC_Start_IT+0x234>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d022      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x1f6>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d01d      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x1f6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <HAL_TIM_IC_Start_IT+0x238>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d018      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x1f6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1c      	ldr	r2, [pc, #112]	; (8006058 <HAL_TIM_IC_Start_IT+0x23c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x1f6>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1b      	ldr	r2, [pc, #108]	; (800605c <HAL_TIM_IC_Start_IT+0x240>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x1f6>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <HAL_TIM_IC_Start_IT+0x244>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x1f6>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a18      	ldr	r2, [pc, #96]	; (8006064 <HAL_TIM_IC_Start_IT+0x248>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x1f6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a16      	ldr	r2, [pc, #88]	; (8006068 <HAL_TIM_IC_Start_IT+0x24c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d111      	bne.n	8006036 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b06      	cmp	r3, #6
 8006022:	d010      	beq.n	8006046 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006034:	e007      	b.n	8006046 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40010000 	.word	0x40010000
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40010400 	.word	0x40010400
 8006064:	40014000 	.word	0x40014000
 8006068:	40001800 	.word	0x40001800

0800606c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b02      	cmp	r3, #2
 8006080:	d122      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d11b      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0202 	mvn.w	r2, #2
 8006098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fa fd7c 	bl	8000bac <HAL_TIM_IC_CaptureCallback>
 80060b4:	e005      	b.n	80060c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fb4a 	bl	8006750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fb51 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d122      	bne.n	800611c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d11b      	bne.n	800611c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0204 	mvn.w	r2, #4
 80060ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fa fd52 	bl	8000bac <HAL_TIM_IC_CaptureCallback>
 8006108:	e005      	b.n	8006116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fb20 	bl	8006750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fb27 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b08      	cmp	r3, #8
 8006128:	d122      	bne.n	8006170 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b08      	cmp	r3, #8
 8006136:	d11b      	bne.n	8006170 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0208 	mvn.w	r2, #8
 8006140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2204      	movs	r2, #4
 8006146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fa fd28 	bl	8000bac <HAL_TIM_IC_CaptureCallback>
 800615c:	e005      	b.n	800616a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 faf6 	bl	8006750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fafd 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b10      	cmp	r3, #16
 800617c:	d122      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b10      	cmp	r3, #16
 800618a:	d11b      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0210 	mvn.w	r2, #16
 8006194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2208      	movs	r2, #8
 800619a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fa fcfe 	bl	8000bac <HAL_TIM_IC_CaptureCallback>
 80061b0:	e005      	b.n	80061be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 facc 	bl	8006750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fad3 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d10e      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d107      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0201 	mvn.w	r2, #1
 80061e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fc fb8c 	bl	8002908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fa:	2b80      	cmp	r3, #128	; 0x80
 80061fc:	d10e      	bne.n	800621c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	2b80      	cmp	r3, #128	; 0x80
 800620a:	d107      	bne.n	800621c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 ff78 	bl	800710c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	d10e      	bne.n	8006248 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d107      	bne.n	8006248 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa98 	bl	8006778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b20      	cmp	r3, #32
 8006254:	d10e      	bne.n	8006274 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b20      	cmp	r3, #32
 8006262:	d107      	bne.n	8006274 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0220 	mvn.w	r2, #32
 800626c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 ff42 	bl	80070f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006296:	2302      	movs	r3, #2
 8006298:	e088      	b.n	80063ac <HAL_TIM_IC_ConfigChannel+0x130>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11b      	bne.n	80062e0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6819      	ldr	r1, [r3, #0]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f000 fcb8 	bl	8006c2c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 020c 	bic.w	r2, r2, #12
 80062ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6999      	ldr	r1, [r3, #24]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	619a      	str	r2, [r3, #24]
 80062de:	e060      	b.n	80063a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d11c      	bne.n	8006320 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6819      	ldr	r1, [r3, #0]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f000 fd3c 	bl	8006d72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006308:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6999      	ldr	r1, [r3, #24]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	021a      	lsls	r2, r3, #8
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	619a      	str	r2, [r3, #24]
 800631e:	e040      	b.n	80063a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b08      	cmp	r3, #8
 8006324:	d11b      	bne.n	800635e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6819      	ldr	r1, [r3, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f000 fd89 	bl	8006e4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 020c 	bic.w	r2, r2, #12
 8006348:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69d9      	ldr	r1, [r3, #28]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	61da      	str	r2, [r3, #28]
 800635c:	e021      	b.n	80063a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b0c      	cmp	r3, #12
 8006362:	d11c      	bne.n	800639e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	6819      	ldr	r1, [r3, #0]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f000 fda6 	bl	8006ec4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69da      	ldr	r2, [r3, #28]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006386:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69d9      	ldr	r1, [r3, #28]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	021a      	lsls	r2, r3, #8
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	61da      	str	r2, [r3, #28]
 800639c:	e001      	b.n	80063a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e0ae      	b.n	8006530 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b0c      	cmp	r3, #12
 80063de:	f200 809f 	bhi.w	8006520 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	0800641d 	.word	0x0800641d
 80063ec:	08006521 	.word	0x08006521
 80063f0:	08006521 	.word	0x08006521
 80063f4:	08006521 	.word	0x08006521
 80063f8:	0800645d 	.word	0x0800645d
 80063fc:	08006521 	.word	0x08006521
 8006400:	08006521 	.word	0x08006521
 8006404:	08006521 	.word	0x08006521
 8006408:	0800649f 	.word	0x0800649f
 800640c:	08006521 	.word	0x08006521
 8006410:	08006521 	.word	0x08006521
 8006414:	08006521 	.word	0x08006521
 8006418:	080064df 	.word	0x080064df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fa52 	bl	80068cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0208 	orr.w	r2, r2, #8
 8006436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0204 	bic.w	r2, r2, #4
 8006446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6999      	ldr	r1, [r3, #24]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	619a      	str	r2, [r3, #24]
      break;
 800645a:	e064      	b.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	4618      	mov	r0, r3
 8006464:	f000 faa2 	bl	80069ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6999      	ldr	r1, [r3, #24]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	021a      	lsls	r2, r3, #8
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	619a      	str	r2, [r3, #24]
      break;
 800649c:	e043      	b.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 faf7 	bl	8006a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0208 	orr.w	r2, r2, #8
 80064b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0204 	bic.w	r2, r2, #4
 80064c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69d9      	ldr	r1, [r3, #28]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	61da      	str	r2, [r3, #28]
      break;
 80064dc:	e023      	b.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fb4b 	bl	8006b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69da      	ldr	r2, [r3, #28]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69d9      	ldr	r1, [r3, #28]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	021a      	lsls	r2, r3, #8
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	61da      	str	r2, [r3, #28]
      break;
 800651e:	e002      	b.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
      break;
 8006524:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_TIM_ConfigClockSource+0x1c>
 8006550:	2302      	movs	r3, #2
 8006552:	e0b4      	b.n	80066be <HAL_TIM_ConfigClockSource+0x186>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800657a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658c:	d03e      	beq.n	800660c <HAL_TIM_ConfigClockSource+0xd4>
 800658e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006592:	f200 8087 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x16c>
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	f000 8086 	beq.w	80066aa <HAL_TIM_ConfigClockSource+0x172>
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d87f      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x16c>
 80065a4:	2b70      	cmp	r3, #112	; 0x70
 80065a6:	d01a      	beq.n	80065de <HAL_TIM_ConfigClockSource+0xa6>
 80065a8:	2b70      	cmp	r3, #112	; 0x70
 80065aa:	d87b      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x16c>
 80065ac:	2b60      	cmp	r3, #96	; 0x60
 80065ae:	d050      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0x11a>
 80065b0:	2b60      	cmp	r3, #96	; 0x60
 80065b2:	d877      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x16c>
 80065b4:	2b50      	cmp	r3, #80	; 0x50
 80065b6:	d03c      	beq.n	8006632 <HAL_TIM_ConfigClockSource+0xfa>
 80065b8:	2b50      	cmp	r3, #80	; 0x50
 80065ba:	d873      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x16c>
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d058      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x13a>
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d86f      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x16c>
 80065c4:	2b30      	cmp	r3, #48	; 0x30
 80065c6:	d064      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x15a>
 80065c8:	2b30      	cmp	r3, #48	; 0x30
 80065ca:	d86b      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x16c>
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d060      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x15a>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d867      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x16c>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d05c      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x15a>
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d05a      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x15a>
 80065dc:	e062      	b.n	80066a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	6899      	ldr	r1, [r3, #8]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f000 fcc1 	bl	8006f74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	609a      	str	r2, [r3, #8]
      break;
 800660a:	e04f      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6899      	ldr	r1, [r3, #8]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f000 fcaa 	bl	8006f74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800662e:	609a      	str	r2, [r3, #8]
      break;
 8006630:	e03c      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	6859      	ldr	r1, [r3, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	461a      	mov	r2, r3
 8006640:	f000 fb68 	bl	8006d14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2150      	movs	r1, #80	; 0x50
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fc77 	bl	8006f3e <TIM_ITRx_SetConfig>
      break;
 8006650:	e02c      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	461a      	mov	r2, r3
 8006660:	f000 fbc4 	bl	8006dec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2160      	movs	r1, #96	; 0x60
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fc67 	bl	8006f3e <TIM_ITRx_SetConfig>
      break;
 8006670:	e01c      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	461a      	mov	r2, r3
 8006680:	f000 fb48 	bl	8006d14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2140      	movs	r1, #64	; 0x40
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fc57 	bl	8006f3e <TIM_ITRx_SetConfig>
      break;
 8006690:	e00c      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f000 fc4e 	bl	8006f3e <TIM_ITRx_SetConfig>
      break;
 80066a2:	e003      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	73fb      	strb	r3, [r7, #15]
      break;
 80066a8:	e000      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b0c      	cmp	r3, #12
 80066da:	d831      	bhi.n	8006740 <HAL_TIM_ReadCapturedValue+0x78>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006719 	.word	0x08006719
 80066e8:	08006741 	.word	0x08006741
 80066ec:	08006741 	.word	0x08006741
 80066f0:	08006741 	.word	0x08006741
 80066f4:	08006723 	.word	0x08006723
 80066f8:	08006741 	.word	0x08006741
 80066fc:	08006741 	.word	0x08006741
 8006700:	08006741 	.word	0x08006741
 8006704:	0800672d 	.word	0x0800672d
 8006708:	08006741 	.word	0x08006741
 800670c:	08006741 	.word	0x08006741
 8006710:	08006741 	.word	0x08006741
 8006714:	08006737 	.word	0x08006737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671e:	60fb      	str	r3, [r7, #12]

      break;
 8006720:	e00f      	b.n	8006742 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	60fb      	str	r3, [r7, #12]

      break;
 800672a:	e00a      	b.n	8006742 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	60fb      	str	r3, [r7, #12]

      break;
 8006734:	e005      	b.n	8006742 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	60fb      	str	r3, [r7, #12]

      break;
 800673e:	e000      	b.n	8006742 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006740:	bf00      	nop
  }

  return tmpreg;
 8006742:	68fb      	ldr	r3, [r7, #12]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a40      	ldr	r2, [pc, #256]	; (80068a0 <TIM_Base_SetConfig+0x114>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d013      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067aa:	d00f      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a3d      	ldr	r2, [pc, #244]	; (80068a4 <TIM_Base_SetConfig+0x118>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a3c      	ldr	r2, [pc, #240]	; (80068a8 <TIM_Base_SetConfig+0x11c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a3b      	ldr	r2, [pc, #236]	; (80068ac <TIM_Base_SetConfig+0x120>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a3a      	ldr	r2, [pc, #232]	; (80068b0 <TIM_Base_SetConfig+0x124>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d108      	bne.n	80067de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a2f      	ldr	r2, [pc, #188]	; (80068a0 <TIM_Base_SetConfig+0x114>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d02b      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ec:	d027      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2c      	ldr	r2, [pc, #176]	; (80068a4 <TIM_Base_SetConfig+0x118>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d023      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2b      	ldr	r2, [pc, #172]	; (80068a8 <TIM_Base_SetConfig+0x11c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d01f      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2a      	ldr	r2, [pc, #168]	; (80068ac <TIM_Base_SetConfig+0x120>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d01b      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a29      	ldr	r2, [pc, #164]	; (80068b0 <TIM_Base_SetConfig+0x124>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d017      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a28      	ldr	r2, [pc, #160]	; (80068b4 <TIM_Base_SetConfig+0x128>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d013      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a27      	ldr	r2, [pc, #156]	; (80068b8 <TIM_Base_SetConfig+0x12c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00f      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a26      	ldr	r2, [pc, #152]	; (80068bc <TIM_Base_SetConfig+0x130>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00b      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a25      	ldr	r2, [pc, #148]	; (80068c0 <TIM_Base_SetConfig+0x134>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d007      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a24      	ldr	r2, [pc, #144]	; (80068c4 <TIM_Base_SetConfig+0x138>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a23      	ldr	r2, [pc, #140]	; (80068c8 <TIM_Base_SetConfig+0x13c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d108      	bne.n	8006850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <TIM_Base_SetConfig+0x114>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_Base_SetConfig+0xf8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a0c      	ldr	r2, [pc, #48]	; (80068b0 <TIM_Base_SetConfig+0x124>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d103      	bne.n	800688c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	615a      	str	r2, [r3, #20]
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40000400 	.word	0x40000400
 80068a8:	40000800 	.word	0x40000800
 80068ac:	40000c00 	.word	0x40000c00
 80068b0:	40010400 	.word	0x40010400
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40014400 	.word	0x40014400
 80068bc:	40014800 	.word	0x40014800
 80068c0:	40001800 	.word	0x40001800
 80068c4:	40001c00 	.word	0x40001c00
 80068c8:	40002000 	.word	0x40002000

080068cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f023 0201 	bic.w	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0303 	bic.w	r3, r3, #3
 8006902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 0302 	bic.w	r3, r3, #2
 8006914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <TIM_OC1_SetConfig+0xd8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_OC1_SetConfig+0x64>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <TIM_OC1_SetConfig+0xdc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d10c      	bne.n	800694a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0308 	bic.w	r3, r3, #8
 8006936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f023 0304 	bic.w	r3, r3, #4
 8006948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <TIM_OC1_SetConfig+0xd8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC1_SetConfig+0x8e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <TIM_OC1_SetConfig+0xdc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d111      	bne.n	800697e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40010400 	.word	0x40010400

080069ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f023 0210 	bic.w	r2, r3, #16
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f023 0320 	bic.w	r3, r3, #32
 80069f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a22      	ldr	r2, [pc, #136]	; (8006a90 <TIM_OC2_SetConfig+0xe4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC2_SetConfig+0x68>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a21      	ldr	r2, [pc, #132]	; (8006a94 <TIM_OC2_SetConfig+0xe8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d10d      	bne.n	8006a30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a17      	ldr	r2, [pc, #92]	; (8006a90 <TIM_OC2_SetConfig+0xe4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_OC2_SetConfig+0x94>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <TIM_OC2_SetConfig+0xe8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d113      	bne.n	8006a68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40010400 	.word	0x40010400

08006a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a21      	ldr	r2, [pc, #132]	; (8006b78 <TIM_OC3_SetConfig+0xe0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC3_SetConfig+0x66>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a20      	ldr	r2, [pc, #128]	; (8006b7c <TIM_OC3_SetConfig+0xe4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d10d      	bne.n	8006b1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a16      	ldr	r2, [pc, #88]	; (8006b78 <TIM_OC3_SetConfig+0xe0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_OC3_SetConfig+0x92>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <TIM_OC3_SetConfig+0xe4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d113      	bne.n	8006b52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	621a      	str	r2, [r3, #32]
}
 8006b6c:	bf00      	nop
 8006b6e:	371c      	adds	r7, #28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40010400 	.word	0x40010400

08006b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	031b      	lsls	r3, r3, #12
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <TIM_OC4_SetConfig+0xa4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_OC4_SetConfig+0x68>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a11      	ldr	r2, [pc, #68]	; (8006c28 <TIM_OC4_SetConfig+0xa8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d109      	bne.n	8006bfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	019b      	lsls	r3, r3, #6
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40010400 	.word	0x40010400

08006c2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f023 0201 	bic.w	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4a28      	ldr	r2, [pc, #160]	; (8006cf8 <TIM_TI1_SetConfig+0xcc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d01b      	beq.n	8006c92 <TIM_TI1_SetConfig+0x66>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c60:	d017      	beq.n	8006c92 <TIM_TI1_SetConfig+0x66>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a25      	ldr	r2, [pc, #148]	; (8006cfc <TIM_TI1_SetConfig+0xd0>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <TIM_TI1_SetConfig+0x66>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4a24      	ldr	r2, [pc, #144]	; (8006d00 <TIM_TI1_SetConfig+0xd4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00f      	beq.n	8006c92 <TIM_TI1_SetConfig+0x66>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a23      	ldr	r2, [pc, #140]	; (8006d04 <TIM_TI1_SetConfig+0xd8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <TIM_TI1_SetConfig+0x66>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4a22      	ldr	r2, [pc, #136]	; (8006d08 <TIM_TI1_SetConfig+0xdc>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <TIM_TI1_SetConfig+0x66>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4a21      	ldr	r2, [pc, #132]	; (8006d0c <TIM_TI1_SetConfig+0xe0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_TI1_SetConfig+0x66>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4a20      	ldr	r2, [pc, #128]	; (8006d10 <TIM_TI1_SetConfig+0xe4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d101      	bne.n	8006c96 <TIM_TI1_SetConfig+0x6a>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <TIM_TI1_SetConfig+0x6c>
 8006c96:	2300      	movs	r3, #0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f023 0303 	bic.w	r3, r3, #3
 8006ca2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e003      	b.n	8006cb6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f023 030a 	bic.w	r3, r3, #10
 8006cd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f003 030a 	and.w	r3, r3, #10
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	621a      	str	r2, [r3, #32]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40010000 	.word	0x40010000
 8006cfc:	40000400 	.word	0x40000400
 8006d00:	40000800 	.word	0x40000800
 8006d04:	40000c00 	.word	0x40000c00
 8006d08:	40010400 	.word	0x40010400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40001800 	.word	0x40001800

08006d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f023 0201 	bic.w	r2, r3, #1
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 030a 	bic.w	r3, r3, #10
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f023 0210 	bic.w	r2, r3, #16
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	031b      	lsls	r3, r3, #12
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	621a      	str	r2, [r3, #32]
}
 8006de0:	bf00      	nop
 8006de2:	371c      	adds	r7, #28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	f023 0210 	bic.w	r2, r3, #16
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	031b      	lsls	r3, r3, #12
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	621a      	str	r2, [r3, #32]
}
 8006e40:	bf00      	nop
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f023 0303 	bic.w	r3, r3, #3
 8006e78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	621a      	str	r2, [r3, #32]
}
 8006eb8:	bf00      	nop
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	031b      	lsls	r3, r3, #12
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006f16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	031b      	lsls	r3, r3, #12
 8006f1c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	621a      	str	r2, [r3, #32]
}
 8006f32:	bf00      	nop
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f043 0307 	orr.w	r3, r3, #7
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	609a      	str	r2, [r3, #8]
}
 8006f68:	bf00      	nop
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	021a      	lsls	r2, r3, #8
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	609a      	str	r2, [r3, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	371c      	adds	r7, #28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a1a      	ldr	r2, [r3, #32]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	401a      	ands	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a1a      	ldr	r2, [r3, #32]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fec:	431a      	orrs	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
	...

08007000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007014:	2302      	movs	r3, #2
 8007016:	e05a      	b.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a21      	ldr	r2, [pc, #132]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d022      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007064:	d01d      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1d      	ldr	r2, [pc, #116]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1b      	ldr	r2, [pc, #108]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a18      	ldr	r2, [pc, #96]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a17      	ldr	r2, [pc, #92]	; (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d10c      	bne.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40010000 	.word	0x40010000
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800
 80070e8:	40000c00 	.word	0x40000c00
 80070ec:	40010400 	.word	0x40010400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	40001800 	.word	0x40001800

080070f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e03f      	b.n	80071b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fa fe7e 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2224      	movs	r2, #36	; 0x24
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 ffa7 	bl	80080b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b08a      	sub	sp, #40	; 0x28
 80071be:	af02      	add	r7, sp, #8
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	603b      	str	r3, [r7, #0]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d17c      	bne.n	80072d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_UART_Transmit+0x2c>
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e075      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_UART_Transmit+0x3e>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e06e      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2221      	movs	r2, #33	; 0x21
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800720e:	f7fb fd29 	bl	8002c64 <HAL_GetTick>
 8007212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	88fa      	ldrh	r2, [r7, #6]
 800721e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007228:	d108      	bne.n	800723c <HAL_UART_Transmit+0x82>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e003      	b.n	8007244 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800724c:	e02a      	b.n	80072a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2200      	movs	r2, #0
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fc5f 	bl	8007b1c <UART_WaitOnFlagUntilTimeout>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e036      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10b      	bne.n	8007286 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800727c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	3302      	adds	r3, #2
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	e007      	b.n	8007296 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	3301      	adds	r3, #1
 8007294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1cf      	bne.n	800724e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2200      	movs	r2, #0
 80072b6:	2140      	movs	r1, #64	; 0x40
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 fc2f 	bl	8007b1c <UART_WaitOnFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e006      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e000      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072d4:	2302      	movs	r3, #2
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b08c      	sub	sp, #48	; 0x30
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	4613      	mov	r3, r2
 80072ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d152      	bne.n	800739e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e04b      	b.n	80073a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007312:	2302      	movs	r3, #2
 8007314:	e044      	b.n	80073a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	461a      	mov	r2, r3
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 fc64 	bl	8007bf8 <UART_Start_Receive_DMA>
 8007330:	4603      	mov	r3, r0
 8007332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800733a:	2b00      	cmp	r3, #0
 800733c:	d12c      	bne.n	8007398 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	2b01      	cmp	r3, #1
 8007344:	d125      	bne.n	8007392 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007346:	2300      	movs	r3, #0
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	617b      	str	r3, [r7, #20]
   return(result);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f043 0310 	orr.w	r3, r3, #16
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	330c      	adds	r3, #12
 800737a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737c:	627a      	str	r2, [r7, #36]	; 0x24
 800737e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6a39      	ldr	r1, [r7, #32]
 8007382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	61fb      	str	r3, [r7, #28]
   return(result);
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e5      	bne.n	800735c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007390:	e002      	b.n	8007398 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800739c:	e000      	b.n	80073a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800739e:	2302      	movs	r3, #2
  }
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3730      	adds	r7, #48	; 0x30
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b0ba      	sub	sp, #232	; 0xe8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80073e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10f      	bne.n	800740e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d009      	beq.n	800740e <HAL_UART_IRQHandler+0x66>
 80073fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fd9b 	bl	8007f42 <UART_Receive_IT>
      return;
 800740c:	e256      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800740e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80de 	beq.w	80075d4 <HAL_UART_IRQHandler+0x22c>
 8007418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007428:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80d1 	beq.w	80075d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <HAL_UART_IRQHandler+0xae>
 800743e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f043 0201 	orr.w	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <HAL_UART_IRQHandler+0xd2>
 8007462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f043 0202 	orr.w	r2, r3, #2
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800747a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <HAL_UART_IRQHandler+0xf6>
 8007486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f043 0204 	orr.w	r2, r3, #4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800749e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d011      	beq.n	80074ce <HAL_UART_IRQHandler+0x126>
 80074aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d105      	bne.n	80074c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f043 0208 	orr.w	r2, r3, #8
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 81ed 	beq.w	80078b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <HAL_UART_IRQHandler+0x14e>
 80074e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fd26 	bl	8007f42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	bf0c      	ite	eq
 8007504:	2301      	moveq	r3, #1
 8007506:	2300      	movne	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <HAL_UART_IRQHandler+0x17a>
 800751a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800751e:	2b00      	cmp	r3, #0
 8007520:	d04f      	beq.n	80075c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fc2e 	bl	8007d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b40      	cmp	r3, #64	; 0x40
 8007534:	d141      	bne.n	80075ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3314      	adds	r3, #20
 800753c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800754c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007562:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800756e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800757a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1d9      	bne.n	8007536 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	2b00      	cmp	r3, #0
 8007588:	d013      	beq.n	80075b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	4a7d      	ldr	r2, [pc, #500]	; (8007784 <HAL_UART_IRQHandler+0x3dc>)
 8007590:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	4618      	mov	r0, r3
 8007598:	f7fb feb5 	bl	8003306 <HAL_DMA_Abort_IT>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d016      	beq.n	80075d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b0:	e00e      	b.n	80075d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9a4 	bl	8007900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	e00a      	b.n	80075d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9a0 	bl	8007900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c0:	e006      	b.n	80075d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f99c 	bl	8007900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075ce:	e170      	b.n	80078b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	bf00      	nop
    return;
 80075d2:	e16e      	b.n	80078b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	2b01      	cmp	r3, #1
 80075da:	f040 814a 	bne.w	8007872 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8143 	beq.w	8007872 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 813c 	beq.w	8007872 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075fa:	2300      	movs	r3, #0
 80075fc:	60bb      	str	r3, [r7, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60bb      	str	r3, [r7, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761a:	2b40      	cmp	r3, #64	; 0x40
 800761c:	f040 80b4 	bne.w	8007788 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800762c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8140 	beq.w	80078b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800763a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800763e:	429a      	cmp	r2, r3
 8007640:	f080 8139 	bcs.w	80078b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800764a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007656:	f000 8088 	beq.w	800776a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007670:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800768a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007692:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800769e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1d9      	bne.n	800765a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3314      	adds	r3, #20
 80076ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3314      	adds	r3, #20
 80076c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e1      	bne.n	80076a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3314      	adds	r3, #20
 80076e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3314      	adds	r3, #20
 8007702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007706:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007708:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800770c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e3      	bne.n	80076e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	330c      	adds	r3, #12
 800772e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773a:	f023 0310 	bic.w	r3, r3, #16
 800773e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800774c:	65ba      	str	r2, [r7, #88]	; 0x58
 800774e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800775a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e3      	bne.n	8007728 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	4618      	mov	r0, r3
 8007766:	f7fb fd5e 	bl	8003226 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007772:	b29b      	uxth	r3, r3
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	b29b      	uxth	r3, r3
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8ca 	bl	8007914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007780:	e099      	b.n	80078b6 <HAL_UART_IRQHandler+0x50e>
 8007782:	bf00      	nop
 8007784:	08007e4b 	.word	0x08007e4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007790:	b29b      	uxth	r3, r3
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 808b 	beq.w	80078ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8086 	beq.w	80078ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80077d2:	647a      	str	r2, [r7, #68]	; 0x44
 80077d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e3      	bne.n	80077ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3314      	adds	r3, #20
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	623b      	str	r3, [r7, #32]
   return(result);
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	f023 0301 	bic.w	r3, r3, #1
 80077fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3314      	adds	r3, #20
 8007806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800780a:	633a      	str	r2, [r7, #48]	; 0x30
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e3      	bne.n	80077e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	60fb      	str	r3, [r7, #12]
   return(result);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0310 	bic.w	r3, r3, #16
 8007842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	330c      	adds	r3, #12
 800784c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007850:	61fa      	str	r2, [r7, #28]
 8007852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	69b9      	ldr	r1, [r7, #24]
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	617b      	str	r3, [r7, #20]
   return(result);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e3      	bne.n	800782c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f852 	bl	8007914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007870:	e023      	b.n	80078ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <HAL_UART_IRQHandler+0x4ea>
 800787e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 faf1 	bl	8007e72 <UART_Transmit_IT>
    return;
 8007890:	e014      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00e      	beq.n	80078bc <HAL_UART_IRQHandler+0x514>
 800789e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fb31 	bl	8007f12 <UART_EndTransmit_IT>
    return;
 80078b0:	e004      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
    return;
 80078b2:	bf00      	nop
 80078b4:	e002      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
      return;
 80078b6:	bf00      	nop
 80078b8:	e000      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
      return;
 80078ba:	bf00      	nop
  }
}
 80078bc:	37e8      	adds	r7, #232	; 0xe8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop

080078c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b09c      	sub	sp, #112	; 0x70
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d172      	bne.n	8007a2e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794a:	2200      	movs	r2, #0
 800794c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	330c      	adds	r3, #12
 8007954:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800795e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007964:	66bb      	str	r3, [r7, #104]	; 0x68
 8007966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330c      	adds	r3, #12
 800796c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800796e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007970:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800797c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e5      	bne.n	800794e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3314      	adds	r3, #20
 8007988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	667b      	str	r3, [r7, #100]	; 0x64
 800799a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3314      	adds	r3, #20
 80079a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079a2:	647a      	str	r2, [r7, #68]	; 0x44
 80079a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e5      	bne.n	8007982 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3314      	adds	r3, #20
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	623b      	str	r3, [r7, #32]
   return(result);
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079cc:	663b      	str	r3, [r7, #96]	; 0x60
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3314      	adds	r3, #20
 80079d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079d6:	633a      	str	r2, [r7, #48]	; 0x30
 80079d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e5      	bne.n	80079b6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ec:	2220      	movs	r2, #32
 80079ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d119      	bne.n	8007a2e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	330c      	adds	r3, #12
 8007a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f023 0310 	bic.w	r3, r3, #16
 8007a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	330c      	adds	r3, #12
 8007a18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a1a:	61fa      	str	r2, [r7, #28]
 8007a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	69b9      	ldr	r1, [r7, #24]
 8007a20:	69fa      	ldr	r2, [r7, #28]
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	617b      	str	r3, [r7, #20]
   return(result);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e5      	bne.n	80079fa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d106      	bne.n	8007a44 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a3e:	f7ff ff69 	bl	8007914 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a42:	e002      	b.n	8007a4a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007a44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a46:	f7ff ff47 	bl	80078d8 <HAL_UART_RxCpltCallback>
}
 8007a4a:	bf00      	nop
 8007a4c:	3770      	adds	r7, #112	; 0x70
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d108      	bne.n	8007a7a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	4619      	mov	r1, r3
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff ff4e 	bl	8007914 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a78:	e002      	b.n	8007a80 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7ff ff36 	bl	80078ec <HAL_UART_RxHalfCpltCallback>
}
 8007a80:	bf00      	nop
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa4:	2b80      	cmp	r3, #128	; 0x80
 8007aa6:	bf0c      	ite	eq
 8007aa8:	2301      	moveq	r3, #1
 8007aaa:	2300      	movne	r3, #0
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b21      	cmp	r3, #33	; 0x21
 8007aba:	d108      	bne.n	8007ace <UART_DMAError+0x46>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ac8:	68b8      	ldr	r0, [r7, #8]
 8007aca:	f000 f933 	bl	8007d34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b40      	cmp	r3, #64	; 0x40
 8007ada:	bf0c      	ite	eq
 8007adc:	2301      	moveq	r3, #1
 8007ade:	2300      	movne	r3, #0
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b22      	cmp	r3, #34	; 0x22
 8007aee:	d108      	bne.n	8007b02 <UART_DMAError+0x7a>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2200      	movs	r2, #0
 8007afa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007afc:	68b8      	ldr	r0, [r7, #8]
 8007afe:	f000 f941 	bl	8007d84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f043 0210 	orr.w	r2, r3, #16
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b0e:	68b8      	ldr	r0, [r7, #8]
 8007b10:	f7ff fef6 	bl	8007900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b090      	sub	sp, #64	; 0x40
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2c:	e050      	b.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b34:	d04c      	beq.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b3c:	f7fb f892 	bl	8002c64 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d241      	bcs.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	330c      	adds	r3, #12
 8007b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	e853 3f00 	ldrex	r3, [r3]
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	330c      	adds	r3, #12
 8007b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b6c:	637a      	str	r2, [r7, #52]	; 0x34
 8007b6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e5      	bne.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3314      	adds	r3, #20
 8007b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f023 0301 	bic.w	r3, r3, #1
 8007b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ba0:	623a      	str	r2, [r7, #32]
 8007ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	69f9      	ldr	r1, [r7, #28]
 8007ba6:	6a3a      	ldr	r2, [r7, #32]
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e5      	bne.n	8007b80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e00f      	b.n	8007bf0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	bf0c      	ite	eq
 8007be0:	2301      	moveq	r3, #1
 8007be2:	2300      	movne	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d09f      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3740      	adds	r7, #64	; 0x40
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b098      	sub	sp, #96	; 0x60
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2222      	movs	r2, #34	; 0x22
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	4a40      	ldr	r2, [pc, #256]	; (8007d28 <UART_Start_Receive_DMA+0x130>)
 8007c26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	4a3f      	ldr	r2, [pc, #252]	; (8007d2c <UART_Start_Receive_DMA+0x134>)
 8007c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	4a3e      	ldr	r2, [pc, #248]	; (8007d30 <UART_Start_Receive_DMA+0x138>)
 8007c36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c40:	f107 0308 	add.w	r3, r7, #8
 8007c44:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	f7fb fa8d 	bl	8003176 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	613b      	str	r3, [r7, #16]
 8007c70:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d019      	beq.n	8007cb6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	330c      	adds	r3, #12
 8007c88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c98:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ca2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007ca4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e5      	bne.n	8007c82 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3314      	adds	r3, #20
 8007cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	f043 0301 	orr.w	r3, r3, #1
 8007ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3314      	adds	r3, #20
 8007cd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cd6:	63ba      	str	r2, [r7, #56]	; 0x38
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e5      	bne.n	8007cb6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3314      	adds	r3, #20
 8007cf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d00:	653b      	str	r3, [r7, #80]	; 0x50
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3314      	adds	r3, #20
 8007d08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d0a:	627a      	str	r2, [r7, #36]	; 0x24
 8007d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6a39      	ldr	r1, [r7, #32]
 8007d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3760      	adds	r7, #96	; 0x60
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	0800792d 	.word	0x0800792d
 8007d2c:	08007a53 	.word	0x08007a53
 8007d30:	08007a89 	.word	0x08007a89

08007d34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b089      	sub	sp, #36	; 0x24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	330c      	adds	r3, #12
 8007d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d52:	61fb      	str	r3, [r7, #28]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	61ba      	str	r2, [r7, #24]
 8007d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6979      	ldr	r1, [r7, #20]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	613b      	str	r3, [r7, #16]
   return(result);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e5      	bne.n	8007d3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007d78:	bf00      	nop
 8007d7a:	3724      	adds	r7, #36	; 0x24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b095      	sub	sp, #84	; 0x54
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	330c      	adds	r3, #12
 8007d92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d96:	e853 3f00 	ldrex	r3, [r3]
 8007d9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dac:	643a      	str	r2, [r7, #64]	; 0x40
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007db2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e5      	bne.n	8007d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3314      	adds	r3, #20
 8007dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	f023 0301 	bic.w	r3, r3, #1
 8007dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3314      	adds	r3, #20
 8007dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e5      	bne.n	8007dc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d119      	bne.n	8007e30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	330c      	adds	r3, #12
 8007e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f023 0310 	bic.w	r3, r3, #16
 8007e12:	647b      	str	r3, [r7, #68]	; 0x44
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	330c      	adds	r3, #12
 8007e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e1c:	61ba      	str	r2, [r7, #24]
 8007e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	6979      	ldr	r1, [r7, #20]
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	613b      	str	r3, [r7, #16]
   return(result);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e5      	bne.n	8007dfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e3e:	bf00      	nop
 8007e40:	3754      	adds	r7, #84	; 0x54
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff fd4b 	bl	8007900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b21      	cmp	r3, #33	; 0x21
 8007e84:	d13e      	bne.n	8007f04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8e:	d114      	bne.n	8007eba <UART_Transmit_IT+0x48>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d110      	bne.n	8007eba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	1c9a      	adds	r2, r3, #2
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	621a      	str	r2, [r3, #32]
 8007eb8:	e008      	b.n	8007ecc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	1c59      	adds	r1, r3, #1
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6211      	str	r1, [r2, #32]
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10f      	bne.n	8007f00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007eee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007efe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	e000      	b.n	8007f06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f04:	2302      	movs	r3, #2
  }
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff fcc6 	bl	80078c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b08c      	sub	sp, #48	; 0x30
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b22      	cmp	r3, #34	; 0x22
 8007f54:	f040 80ab 	bne.w	80080ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f60:	d117      	bne.n	8007f92 <UART_Receive_IT+0x50>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d113      	bne.n	8007f92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	1c9a      	adds	r2, r3, #2
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8007f90:	e026      	b.n	8007fe0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa4:	d007      	beq.n	8007fb6 <UART_Receive_IT+0x74>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <UART_Receive_IT+0x82>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	e008      	b.n	8007fd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4619      	mov	r1, r3
 8007fee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d15a      	bne.n	80080aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0220 	bic.w	r2, r2, #32
 8008002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695a      	ldr	r2, [r3, #20]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0201 	bic.w	r2, r2, #1
 8008022:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	2b01      	cmp	r3, #1
 8008032:	d135      	bne.n	80080a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	330c      	adds	r3, #12
 8008040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	613b      	str	r3, [r7, #16]
   return(result);
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f023 0310 	bic.w	r3, r3, #16
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	330c      	adds	r3, #12
 8008058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805a:	623a      	str	r2, [r7, #32]
 800805c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	69f9      	ldr	r1, [r7, #28]
 8008060:	6a3a      	ldr	r2, [r7, #32]
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	61bb      	str	r3, [r7, #24]
   return(result);
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e5      	bne.n	800803a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b10      	cmp	r3, #16
 800807a:	d10a      	bne.n	8008092 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff fc3b 	bl	8007914 <HAL_UARTEx_RxEventCallback>
 800809e:	e002      	b.n	80080a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fc19 	bl	80078d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e002      	b.n	80080b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e000      	b.n	80080b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080ae:	2302      	movs	r3, #2
  }
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3730      	adds	r7, #48	; 0x30
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080bc:	b0c0      	sub	sp, #256	; 0x100
 80080be:	af00      	add	r7, sp, #0
 80080c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	68d9      	ldr	r1, [r3, #12]
 80080d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	ea40 0301 	orr.w	r3, r0, r1
 80080e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	4313      	orrs	r3, r2
 8008100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008110:	f021 010c 	bic.w	r1, r1, #12
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800811e:	430b      	orrs	r3, r1
 8008120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800812e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008132:	6999      	ldr	r1, [r3, #24]
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	ea40 0301 	orr.w	r3, r0, r1
 800813e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b8f      	ldr	r3, [pc, #572]	; (8008384 <UART_SetConfig+0x2cc>)
 8008148:	429a      	cmp	r2, r3
 800814a:	d005      	beq.n	8008158 <UART_SetConfig+0xa0>
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	4b8d      	ldr	r3, [pc, #564]	; (8008388 <UART_SetConfig+0x2d0>)
 8008154:	429a      	cmp	r2, r3
 8008156:	d104      	bne.n	8008162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008158:	f7fd fc18 	bl	800598c <HAL_RCC_GetPCLK2Freq>
 800815c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008160:	e003      	b.n	800816a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008162:	f7fd fbff 	bl	8005964 <HAL_RCC_GetPCLK1Freq>
 8008166:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800816a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008174:	f040 810c 	bne.w	8008390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800817c:	2200      	movs	r2, #0
 800817e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008182:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800818a:	4622      	mov	r2, r4
 800818c:	462b      	mov	r3, r5
 800818e:	1891      	adds	r1, r2, r2
 8008190:	65b9      	str	r1, [r7, #88]	; 0x58
 8008192:	415b      	adcs	r3, r3
 8008194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800819a:	4621      	mov	r1, r4
 800819c:	eb12 0801 	adds.w	r8, r2, r1
 80081a0:	4629      	mov	r1, r5
 80081a2:	eb43 0901 	adc.w	r9, r3, r1
 80081a6:	f04f 0200 	mov.w	r2, #0
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ba:	4690      	mov	r8, r2
 80081bc:	4699      	mov	r9, r3
 80081be:	4623      	mov	r3, r4
 80081c0:	eb18 0303 	adds.w	r3, r8, r3
 80081c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081c8:	462b      	mov	r3, r5
 80081ca:	eb49 0303 	adc.w	r3, r9, r3
 80081ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081e6:	460b      	mov	r3, r1
 80081e8:	18db      	adds	r3, r3, r3
 80081ea:	653b      	str	r3, [r7, #80]	; 0x50
 80081ec:	4613      	mov	r3, r2
 80081ee:	eb42 0303 	adc.w	r3, r2, r3
 80081f2:	657b      	str	r3, [r7, #84]	; 0x54
 80081f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081fc:	f7f8 f840 	bl	8000280 <__aeabi_uldivmod>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4b61      	ldr	r3, [pc, #388]	; (800838c <UART_SetConfig+0x2d4>)
 8008206:	fba3 2302 	umull	r2, r3, r3, r2
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	011c      	lsls	r4, r3, #4
 800820e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008212:	2200      	movs	r2, #0
 8008214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008218:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800821c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008220:	4642      	mov	r2, r8
 8008222:	464b      	mov	r3, r9
 8008224:	1891      	adds	r1, r2, r2
 8008226:	64b9      	str	r1, [r7, #72]	; 0x48
 8008228:	415b      	adcs	r3, r3
 800822a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800822c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008230:	4641      	mov	r1, r8
 8008232:	eb12 0a01 	adds.w	sl, r2, r1
 8008236:	4649      	mov	r1, r9
 8008238:	eb43 0b01 	adc.w	fp, r3, r1
 800823c:	f04f 0200 	mov.w	r2, #0
 8008240:	f04f 0300 	mov.w	r3, #0
 8008244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800824c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008250:	4692      	mov	sl, r2
 8008252:	469b      	mov	fp, r3
 8008254:	4643      	mov	r3, r8
 8008256:	eb1a 0303 	adds.w	r3, sl, r3
 800825a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800825e:	464b      	mov	r3, r9
 8008260:	eb4b 0303 	adc.w	r3, fp, r3
 8008264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008274:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800827c:	460b      	mov	r3, r1
 800827e:	18db      	adds	r3, r3, r3
 8008280:	643b      	str	r3, [r7, #64]	; 0x40
 8008282:	4613      	mov	r3, r2
 8008284:	eb42 0303 	adc.w	r3, r2, r3
 8008288:	647b      	str	r3, [r7, #68]	; 0x44
 800828a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800828e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008292:	f7f7 fff5 	bl	8000280 <__aeabi_uldivmod>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4611      	mov	r1, r2
 800829c:	4b3b      	ldr	r3, [pc, #236]	; (800838c <UART_SetConfig+0x2d4>)
 800829e:	fba3 2301 	umull	r2, r3, r3, r1
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	2264      	movs	r2, #100	; 0x64
 80082a6:	fb02 f303 	mul.w	r3, r2, r3
 80082aa:	1acb      	subs	r3, r1, r3
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082b2:	4b36      	ldr	r3, [pc, #216]	; (800838c <UART_SetConfig+0x2d4>)
 80082b4:	fba3 2302 	umull	r2, r3, r3, r2
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	005b      	lsls	r3, r3, #1
 80082bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082c0:	441c      	add	r4, r3
 80082c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082d4:	4642      	mov	r2, r8
 80082d6:	464b      	mov	r3, r9
 80082d8:	1891      	adds	r1, r2, r2
 80082da:	63b9      	str	r1, [r7, #56]	; 0x38
 80082dc:	415b      	adcs	r3, r3
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082e4:	4641      	mov	r1, r8
 80082e6:	1851      	adds	r1, r2, r1
 80082e8:	6339      	str	r1, [r7, #48]	; 0x30
 80082ea:	4649      	mov	r1, r9
 80082ec:	414b      	adcs	r3, r1
 80082ee:	637b      	str	r3, [r7, #52]	; 0x34
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082fc:	4659      	mov	r1, fp
 80082fe:	00cb      	lsls	r3, r1, #3
 8008300:	4651      	mov	r1, sl
 8008302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008306:	4651      	mov	r1, sl
 8008308:	00ca      	lsls	r2, r1, #3
 800830a:	4610      	mov	r0, r2
 800830c:	4619      	mov	r1, r3
 800830e:	4603      	mov	r3, r0
 8008310:	4642      	mov	r2, r8
 8008312:	189b      	adds	r3, r3, r2
 8008314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008318:	464b      	mov	r3, r9
 800831a:	460a      	mov	r2, r1
 800831c:	eb42 0303 	adc.w	r3, r2, r3
 8008320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008330:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008338:	460b      	mov	r3, r1
 800833a:	18db      	adds	r3, r3, r3
 800833c:	62bb      	str	r3, [r7, #40]	; 0x28
 800833e:	4613      	mov	r3, r2
 8008340:	eb42 0303 	adc.w	r3, r2, r3
 8008344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800834a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800834e:	f7f7 ff97 	bl	8000280 <__aeabi_uldivmod>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4b0d      	ldr	r3, [pc, #52]	; (800838c <UART_SetConfig+0x2d4>)
 8008358:	fba3 1302 	umull	r1, r3, r3, r2
 800835c:	095b      	lsrs	r3, r3, #5
 800835e:	2164      	movs	r1, #100	; 0x64
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	3332      	adds	r3, #50	; 0x32
 800836a:	4a08      	ldr	r2, [pc, #32]	; (800838c <UART_SetConfig+0x2d4>)
 800836c:	fba2 2303 	umull	r2, r3, r2, r3
 8008370:	095b      	lsrs	r3, r3, #5
 8008372:	f003 0207 	and.w	r2, r3, #7
 8008376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4422      	add	r2, r4
 800837e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008380:	e105      	b.n	800858e <UART_SetConfig+0x4d6>
 8008382:	bf00      	nop
 8008384:	40011000 	.word	0x40011000
 8008388:	40011400 	.word	0x40011400
 800838c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008394:	2200      	movs	r2, #0
 8008396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800839a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800839e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083a2:	4642      	mov	r2, r8
 80083a4:	464b      	mov	r3, r9
 80083a6:	1891      	adds	r1, r2, r2
 80083a8:	6239      	str	r1, [r7, #32]
 80083aa:	415b      	adcs	r3, r3
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
 80083ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083b2:	4641      	mov	r1, r8
 80083b4:	1854      	adds	r4, r2, r1
 80083b6:	4649      	mov	r1, r9
 80083b8:	eb43 0501 	adc.w	r5, r3, r1
 80083bc:	f04f 0200 	mov.w	r2, #0
 80083c0:	f04f 0300 	mov.w	r3, #0
 80083c4:	00eb      	lsls	r3, r5, #3
 80083c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ca:	00e2      	lsls	r2, r4, #3
 80083cc:	4614      	mov	r4, r2
 80083ce:	461d      	mov	r5, r3
 80083d0:	4643      	mov	r3, r8
 80083d2:	18e3      	adds	r3, r4, r3
 80083d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083d8:	464b      	mov	r3, r9
 80083da:	eb45 0303 	adc.w	r3, r5, r3
 80083de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083fe:	4629      	mov	r1, r5
 8008400:	008b      	lsls	r3, r1, #2
 8008402:	4621      	mov	r1, r4
 8008404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008408:	4621      	mov	r1, r4
 800840a:	008a      	lsls	r2, r1, #2
 800840c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008410:	f7f7 ff36 	bl	8000280 <__aeabi_uldivmod>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4b60      	ldr	r3, [pc, #384]	; (800859c <UART_SetConfig+0x4e4>)
 800841a:	fba3 2302 	umull	r2, r3, r3, r2
 800841e:	095b      	lsrs	r3, r3, #5
 8008420:	011c      	lsls	r4, r3, #4
 8008422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008426:	2200      	movs	r2, #0
 8008428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800842c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008434:	4642      	mov	r2, r8
 8008436:	464b      	mov	r3, r9
 8008438:	1891      	adds	r1, r2, r2
 800843a:	61b9      	str	r1, [r7, #24]
 800843c:	415b      	adcs	r3, r3
 800843e:	61fb      	str	r3, [r7, #28]
 8008440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008444:	4641      	mov	r1, r8
 8008446:	1851      	adds	r1, r2, r1
 8008448:	6139      	str	r1, [r7, #16]
 800844a:	4649      	mov	r1, r9
 800844c:	414b      	adcs	r3, r1
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	f04f 0200 	mov.w	r2, #0
 8008454:	f04f 0300 	mov.w	r3, #0
 8008458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800845c:	4659      	mov	r1, fp
 800845e:	00cb      	lsls	r3, r1, #3
 8008460:	4651      	mov	r1, sl
 8008462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008466:	4651      	mov	r1, sl
 8008468:	00ca      	lsls	r2, r1, #3
 800846a:	4610      	mov	r0, r2
 800846c:	4619      	mov	r1, r3
 800846e:	4603      	mov	r3, r0
 8008470:	4642      	mov	r2, r8
 8008472:	189b      	adds	r3, r3, r2
 8008474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008478:	464b      	mov	r3, r9
 800847a:	460a      	mov	r2, r1
 800847c:	eb42 0303 	adc.w	r3, r2, r3
 8008480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	67bb      	str	r3, [r7, #120]	; 0x78
 800848e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800849c:	4649      	mov	r1, r9
 800849e:	008b      	lsls	r3, r1, #2
 80084a0:	4641      	mov	r1, r8
 80084a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084a6:	4641      	mov	r1, r8
 80084a8:	008a      	lsls	r2, r1, #2
 80084aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084ae:	f7f7 fee7 	bl	8000280 <__aeabi_uldivmod>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4b39      	ldr	r3, [pc, #228]	; (800859c <UART_SetConfig+0x4e4>)
 80084b8:	fba3 1302 	umull	r1, r3, r3, r2
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	2164      	movs	r1, #100	; 0x64
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	3332      	adds	r3, #50	; 0x32
 80084ca:	4a34      	ldr	r2, [pc, #208]	; (800859c <UART_SetConfig+0x4e4>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084d6:	441c      	add	r4, r3
 80084d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084dc:	2200      	movs	r2, #0
 80084de:	673b      	str	r3, [r7, #112]	; 0x70
 80084e0:	677a      	str	r2, [r7, #116]	; 0x74
 80084e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084e6:	4642      	mov	r2, r8
 80084e8:	464b      	mov	r3, r9
 80084ea:	1891      	adds	r1, r2, r2
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	415b      	adcs	r3, r3
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084f6:	4641      	mov	r1, r8
 80084f8:	1851      	adds	r1, r2, r1
 80084fa:	6039      	str	r1, [r7, #0]
 80084fc:	4649      	mov	r1, r9
 80084fe:	414b      	adcs	r3, r1
 8008500:	607b      	str	r3, [r7, #4]
 8008502:	f04f 0200 	mov.w	r2, #0
 8008506:	f04f 0300 	mov.w	r3, #0
 800850a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800850e:	4659      	mov	r1, fp
 8008510:	00cb      	lsls	r3, r1, #3
 8008512:	4651      	mov	r1, sl
 8008514:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008518:	4651      	mov	r1, sl
 800851a:	00ca      	lsls	r2, r1, #3
 800851c:	4610      	mov	r0, r2
 800851e:	4619      	mov	r1, r3
 8008520:	4603      	mov	r3, r0
 8008522:	4642      	mov	r2, r8
 8008524:	189b      	adds	r3, r3, r2
 8008526:	66bb      	str	r3, [r7, #104]	; 0x68
 8008528:	464b      	mov	r3, r9
 800852a:	460a      	mov	r2, r1
 800852c:	eb42 0303 	adc.w	r3, r2, r3
 8008530:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	663b      	str	r3, [r7, #96]	; 0x60
 800853c:	667a      	str	r2, [r7, #100]	; 0x64
 800853e:	f04f 0200 	mov.w	r2, #0
 8008542:	f04f 0300 	mov.w	r3, #0
 8008546:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800854a:	4649      	mov	r1, r9
 800854c:	008b      	lsls	r3, r1, #2
 800854e:	4641      	mov	r1, r8
 8008550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008554:	4641      	mov	r1, r8
 8008556:	008a      	lsls	r2, r1, #2
 8008558:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800855c:	f7f7 fe90 	bl	8000280 <__aeabi_uldivmod>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4b0d      	ldr	r3, [pc, #52]	; (800859c <UART_SetConfig+0x4e4>)
 8008566:	fba3 1302 	umull	r1, r3, r3, r2
 800856a:	095b      	lsrs	r3, r3, #5
 800856c:	2164      	movs	r1, #100	; 0x64
 800856e:	fb01 f303 	mul.w	r3, r1, r3
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	3332      	adds	r3, #50	; 0x32
 8008578:	4a08      	ldr	r2, [pc, #32]	; (800859c <UART_SetConfig+0x4e4>)
 800857a:	fba2 2303 	umull	r2, r3, r2, r3
 800857e:	095b      	lsrs	r3, r3, #5
 8008580:	f003 020f 	and.w	r2, r3, #15
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4422      	add	r2, r4
 800858c:	609a      	str	r2, [r3, #8]
}
 800858e:	bf00      	nop
 8008590:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008594:	46bd      	mov	sp, r7
 8008596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800859a:	bf00      	nop
 800859c:	51eb851f 	.word	0x51eb851f

080085a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085a0:	b084      	sub	sp, #16
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	f107 001c 	add.w	r0, r7, #28
 80085ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d122      	bne.n	80085fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80085cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d105      	bne.n	80085f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 fbee 	bl	8009dd4 <USB_CoreReset>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]
 80085fc:	e01a      	b.n	8008634 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 fbe2 	bl	8009dd4 <USB_CoreReset>
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d106      	bne.n	8008628 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
 8008626:	e005      	b.n	8008634 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	2b01      	cmp	r3, #1
 8008638:	d10b      	bne.n	8008652 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f043 0206 	orr.w	r2, r3, #6
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f043 0220 	orr.w	r2, r3, #32
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008652:	7bfb      	ldrb	r3, [r7, #15]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800865e:	b004      	add	sp, #16
 8008660:	4770      	bx	lr
	...

08008664 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d165      	bne.n	8008744 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4a41      	ldr	r2, [pc, #260]	; (8008780 <USB_SetTurnaroundTime+0x11c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d906      	bls.n	800868e <USB_SetTurnaroundTime+0x2a>
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	4a40      	ldr	r2, [pc, #256]	; (8008784 <USB_SetTurnaroundTime+0x120>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d202      	bcs.n	800868e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008688:	230f      	movs	r3, #15
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	e062      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	4a3c      	ldr	r2, [pc, #240]	; (8008784 <USB_SetTurnaroundTime+0x120>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d306      	bcc.n	80086a4 <USB_SetTurnaroundTime+0x40>
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	4a3b      	ldr	r2, [pc, #236]	; (8008788 <USB_SetTurnaroundTime+0x124>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d202      	bcs.n	80086a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800869e:	230e      	movs	r3, #14
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	e057      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4a38      	ldr	r2, [pc, #224]	; (8008788 <USB_SetTurnaroundTime+0x124>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d306      	bcc.n	80086ba <USB_SetTurnaroundTime+0x56>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4a37      	ldr	r2, [pc, #220]	; (800878c <USB_SetTurnaroundTime+0x128>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d202      	bcs.n	80086ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80086b4:	230d      	movs	r3, #13
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	e04c      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4a33      	ldr	r2, [pc, #204]	; (800878c <USB_SetTurnaroundTime+0x128>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d306      	bcc.n	80086d0 <USB_SetTurnaroundTime+0x6c>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	4a32      	ldr	r2, [pc, #200]	; (8008790 <USB_SetTurnaroundTime+0x12c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d802      	bhi.n	80086d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80086ca:	230c      	movs	r3, #12
 80086cc:	617b      	str	r3, [r7, #20]
 80086ce:	e041      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4a2f      	ldr	r2, [pc, #188]	; (8008790 <USB_SetTurnaroundTime+0x12c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d906      	bls.n	80086e6 <USB_SetTurnaroundTime+0x82>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	4a2e      	ldr	r2, [pc, #184]	; (8008794 <USB_SetTurnaroundTime+0x130>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d802      	bhi.n	80086e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80086e0:	230b      	movs	r3, #11
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e036      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	4a2a      	ldr	r2, [pc, #168]	; (8008794 <USB_SetTurnaroundTime+0x130>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d906      	bls.n	80086fc <USB_SetTurnaroundTime+0x98>
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4a29      	ldr	r2, [pc, #164]	; (8008798 <USB_SetTurnaroundTime+0x134>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d802      	bhi.n	80086fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80086f6:	230a      	movs	r3, #10
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	e02b      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4a26      	ldr	r2, [pc, #152]	; (8008798 <USB_SetTurnaroundTime+0x134>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d906      	bls.n	8008712 <USB_SetTurnaroundTime+0xae>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4a25      	ldr	r2, [pc, #148]	; (800879c <USB_SetTurnaroundTime+0x138>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d202      	bcs.n	8008712 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800870c:	2309      	movs	r3, #9
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	e020      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4a21      	ldr	r2, [pc, #132]	; (800879c <USB_SetTurnaroundTime+0x138>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d306      	bcc.n	8008728 <USB_SetTurnaroundTime+0xc4>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4a20      	ldr	r2, [pc, #128]	; (80087a0 <USB_SetTurnaroundTime+0x13c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d802      	bhi.n	8008728 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008722:	2308      	movs	r3, #8
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	e015      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4a1d      	ldr	r2, [pc, #116]	; (80087a0 <USB_SetTurnaroundTime+0x13c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d906      	bls.n	800873e <USB_SetTurnaroundTime+0xda>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4a1c      	ldr	r2, [pc, #112]	; (80087a4 <USB_SetTurnaroundTime+0x140>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d202      	bcs.n	800873e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008738:	2307      	movs	r3, #7
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e00a      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800873e:	2306      	movs	r3, #6
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	e007      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d102      	bne.n	8008750 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800874a:	2309      	movs	r3, #9
 800874c:	617b      	str	r3, [r7, #20]
 800874e:	e001      	b.n	8008754 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008750:	2309      	movs	r3, #9
 8008752:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	029b      	lsls	r3, r3, #10
 8008768:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800876c:	431a      	orrs	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	371c      	adds	r7, #28
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	00d8acbf 	.word	0x00d8acbf
 8008784:	00e4e1c0 	.word	0x00e4e1c0
 8008788:	00f42400 	.word	0x00f42400
 800878c:	01067380 	.word	0x01067380
 8008790:	011a499f 	.word	0x011a499f
 8008794:	01312cff 	.word	0x01312cff
 8008798:	014ca43f 	.word	0x014ca43f
 800879c:	016e3600 	.word	0x016e3600
 80087a0:	01a6ab1f 	.word	0x01a6ab1f
 80087a4:	01e84800 	.word	0x01e84800

080087a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f043 0201 	orr.w	r2, r3, #1
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f023 0201 	bic.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d115      	bne.n	800883a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800881a:	2001      	movs	r0, #1
 800881c:	f7fa fa2e 	bl	8002c7c <HAL_Delay>
      ms++;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3301      	adds	r3, #1
 8008824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 fa45 	bl	8009cb6 <USB_GetMode>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d01e      	beq.n	8008870 <USB_SetCurrentMode+0x84>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b31      	cmp	r3, #49	; 0x31
 8008836:	d9f0      	bls.n	800881a <USB_SetCurrentMode+0x2e>
 8008838:	e01a      	b.n	8008870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d115      	bne.n	800886c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800884c:	2001      	movs	r0, #1
 800884e:	f7fa fa15 	bl	8002c7c <HAL_Delay>
      ms++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 fa2c 	bl	8009cb6 <USB_GetMode>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <USB_SetCurrentMode+0x84>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b31      	cmp	r3, #49	; 0x31
 8008868:	d9f0      	bls.n	800884c <USB_SetCurrentMode+0x60>
 800886a:	e001      	b.n	8008870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e005      	b.n	800887c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b32      	cmp	r3, #50	; 0x32
 8008874:	d101      	bne.n	800887a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008884:	b084      	sub	sp, #16
 8008886:	b580      	push	{r7, lr}
 8008888:	b086      	sub	sp, #24
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800889e:	2300      	movs	r3, #0
 80088a0:	613b      	str	r3, [r7, #16]
 80088a2:	e009      	b.n	80088b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	3340      	adds	r3, #64	; 0x40
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	2200      	movs	r2, #0
 80088b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	3301      	adds	r3, #1
 80088b6:	613b      	str	r3, [r7, #16]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b0e      	cmp	r3, #14
 80088bc:	d9f2      	bls.n	80088a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d11c      	bne.n	80088fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088d2:	f043 0302 	orr.w	r3, r3, #2
 80088d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38
 80088fc:	e00b      	b.n	8008916 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800891c:	461a      	mov	r2, r3
 800891e:	2300      	movs	r3, #0
 8008920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008928:	4619      	mov	r1, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008930:	461a      	mov	r2, r3
 8008932:	680b      	ldr	r3, [r1, #0]
 8008934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	2b01      	cmp	r3, #1
 800893a:	d10c      	bne.n	8008956 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d104      	bne.n	800894c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008942:	2100      	movs	r1, #0
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f965 	bl	8008c14 <USB_SetDevSpeed>
 800894a:	e008      	b.n	800895e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800894c:	2101      	movs	r1, #1
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f960 	bl	8008c14 <USB_SetDevSpeed>
 8008954:	e003      	b.n	800895e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008956:	2103      	movs	r1, #3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f95b 	bl	8008c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800895e:	2110      	movs	r1, #16
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f8f3 	bl	8008b4c <USB_FlushTxFifo>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f91f 	bl	8008bb4 <USB_FlushRxFifo>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	461a      	mov	r2, r3
 8008988:	2300      	movs	r3, #0
 800898a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	461a      	mov	r2, r3
 8008994:	2300      	movs	r3, #0
 8008996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899e:	461a      	mov	r2, r3
 80089a0:	2300      	movs	r3, #0
 80089a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	e043      	b.n	8008a32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089c0:	d118      	bne.n	80089f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d4:	461a      	mov	r2, r3
 80089d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	e013      	b.n	8008a06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	461a      	mov	r2, r3
 80089ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	e008      	b.n	8008a06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a00:	461a      	mov	r2, r3
 8008a02:	2300      	movs	r3, #0
 8008a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	461a      	mov	r2, r3
 8008a14:	2300      	movs	r3, #0
 8008a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	461a      	mov	r2, r3
 8008a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d3b7      	bcc.n	80089aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	e043      	b.n	8008ac8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a56:	d118      	bne.n	8008a8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10a      	bne.n	8008a74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	e013      	b.n	8008a9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a80:	461a      	mov	r2, r3
 8008a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	e008      	b.n	8008a9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a96:	461a      	mov	r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aba:	461a      	mov	r2, r3
 8008abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d3b7      	bcc.n	8008a40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d105      	bne.n	8008b04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f043 0210 	orr.w	r2, r3, #16
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	4b0f      	ldr	r3, [pc, #60]	; (8008b48 <USB_DevInit+0x2c4>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f043 0208 	orr.w	r2, r3, #8
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d107      	bne.n	8008b38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b30:	f043 0304 	orr.w	r3, r3, #4
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b44:	b004      	add	sp, #16
 8008b46:	4770      	bx	lr
 8008b48:	803c3800 	.word	0x803c3800

08008b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4a13      	ldr	r2, [pc, #76]	; (8008bb0 <USB_FlushTxFifo+0x64>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d901      	bls.n	8008b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e01b      	b.n	8008ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	daf2      	bge.n	8008b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	019b      	lsls	r3, r3, #6
 8008b7c:	f043 0220 	orr.w	r2, r3, #32
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3301      	adds	r3, #1
 8008b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4a08      	ldr	r2, [pc, #32]	; (8008bb0 <USB_FlushTxFifo+0x64>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d901      	bls.n	8008b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e006      	b.n	8008ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d0f0      	beq.n	8008b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	00030d40 	.word	0x00030d40

08008bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a11      	ldr	r2, [pc, #68]	; (8008c10 <USB_FlushRxFifo+0x5c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d901      	bls.n	8008bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e018      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	daf2      	bge.n	8008bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2210      	movs	r2, #16
 8008be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4a08      	ldr	r2, [pc, #32]	; (8008c10 <USB_FlushRxFifo+0x5c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d901      	bls.n	8008bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e006      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f003 0310 	and.w	r3, r3, #16
 8008bfe:	2b10      	cmp	r3, #16
 8008c00:	d0f0      	beq.n	8008be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	00030d40 	.word	0x00030d40

08008c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c34:	4313      	orrs	r3, r2
 8008c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b087      	sub	sp, #28
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f003 0306 	and.w	r3, r3, #6
 8008c5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d102      	bne.n	8008c6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]
 8008c6a:	e00a      	b.n	8008c82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d002      	beq.n	8008c78 <USB_GetDevSpeed+0x32>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2b06      	cmp	r3, #6
 8008c76:	d102      	bne.n	8008c7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	75fb      	strb	r3, [r7, #23]
 8008c7c:	e001      	b.n	8008c82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008c7e:	230f      	movs	r3, #15
 8008c80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	785b      	ldrb	r3, [r3, #1]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d13a      	bne.n	8008d22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb2:	69da      	ldr	r2, [r3, #28]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 030f 	and.w	r3, r3, #15
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	68f9      	ldr	r1, [r7, #12]
 8008cc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d155      	bne.n	8008d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	791b      	ldrb	r3, [r3, #4]
 8008cfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	059b      	lsls	r3, r3, #22
 8008d06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	0151      	lsls	r1, r2, #5
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	440a      	add	r2, r1
 8008d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	e036      	b.n	8008d90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d28:	69da      	ldr	r2, [r3, #28]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	f003 030f 	and.w	r3, r3, #15
 8008d32:	2101      	movs	r1, #1
 8008d34:	fa01 f303 	lsl.w	r3, r1, r3
 8008d38:	041b      	lsls	r3, r3, #16
 8008d3a:	68f9      	ldr	r1, [r7, #12]
 8008d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d40:	4313      	orrs	r3, r2
 8008d42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d11a      	bne.n	8008d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	791b      	ldrb	r3, [r3, #4]
 8008d74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d76:	430b      	orrs	r3, r1
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d161      	bne.n	8008e80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dd2:	d11f      	bne.n	8008e14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	0151      	lsls	r1, r2, #5
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	440a      	add	r2, r1
 8008dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008df2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	0151      	lsls	r1, r2, #5
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	440a      	add	r2, r1
 8008e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	f003 030f 	and.w	r3, r3, #15
 8008e24:	2101      	movs	r1, #1
 8008e26:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	43db      	mvns	r3, r3
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e34:	4013      	ands	r3, r2
 8008e36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	2101      	movs	r1, #1
 8008e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	43db      	mvns	r3, r3
 8008e52:	68f9      	ldr	r1, [r7, #12]
 8008e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e58:	4013      	ands	r3, r2
 8008e5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	0159      	lsls	r1, r3, #5
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	440b      	add	r3, r1
 8008e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e76:	4619      	mov	r1, r3
 8008e78:	4b35      	ldr	r3, [pc, #212]	; (8008f50 <USB_DeactivateEndpoint+0x1b0>)
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	600b      	str	r3, [r1, #0]
 8008e7e:	e060      	b.n	8008f42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e96:	d11f      	bne.n	8008ed8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	0151      	lsls	r1, r2, #5
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	440a      	add	r2, r1
 8008eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008eb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	0151      	lsls	r1, r2, #5
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	440a      	add	r2, r1
 8008ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	f003 030f 	and.w	r3, r3, #15
 8008ee8:	2101      	movs	r1, #1
 8008eea:	fa01 f303 	lsl.w	r3, r1, r3
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	43db      	mvns	r3, r3
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef8:	4013      	ands	r3, r2
 8008efa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f12:	041b      	lsls	r3, r3, #16
 8008f14:	43db      	mvns	r3, r3
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	0159      	lsls	r1, r3, #5
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	440b      	add	r3, r1
 8008f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <USB_DeactivateEndpoint+0x1b4>)
 8008f3e:	4013      	ands	r3, r2
 8008f40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	ec337800 	.word	0xec337800
 8008f54:	eff37800 	.word	0xeff37800

08008f58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	; 0x28
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	785b      	ldrb	r3, [r3, #1]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	f040 815c 	bne.w	8009232 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d132      	bne.n	8008fe8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	0151      	lsls	r1, r2, #5
 8008f94:	69fa      	ldr	r2, [r7, #28]
 8008f96:	440a      	add	r2, r1
 8008f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	0151      	lsls	r1, r2, #5
 8008fb8:	69fa      	ldr	r2, [r7, #28]
 8008fba:	440a      	add	r2, r1
 8008fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe0:	0cdb      	lsrs	r3, r3, #19
 8008fe2:	04db      	lsls	r3, r3, #19
 8008fe4:	6113      	str	r3, [r2, #16]
 8008fe6:	e074      	b.n	80090d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009002:	0cdb      	lsrs	r3, r3, #19
 8009004:	04db      	lsls	r3, r3, #19
 8009006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	440a      	add	r2, r1
 800901e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009022:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009026:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800902a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	6999      	ldr	r1, [r3, #24]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	440b      	add	r3, r1
 8009044:	1e59      	subs	r1, r3, #1
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	fbb1 f3f3 	udiv	r3, r1, r3
 800904e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009050:	4b9d      	ldr	r3, [pc, #628]	; (80092c8 <USB_EPStartXfer+0x370>)
 8009052:	400b      	ands	r3, r1
 8009054:	69b9      	ldr	r1, [r7, #24]
 8009056:	0148      	lsls	r0, r1, #5
 8009058:	69f9      	ldr	r1, [r7, #28]
 800905a:	4401      	add	r1, r0
 800905c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009060:	4313      	orrs	r3, r2
 8009062:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009070:	691a      	ldr	r2, [r3, #16]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800907a:	69b9      	ldr	r1, [r7, #24]
 800907c:	0148      	lsls	r0, r1, #5
 800907e:	69f9      	ldr	r1, [r7, #28]
 8009080:	4401      	add	r1, r0
 8009082:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009086:	4313      	orrs	r3, r2
 8009088:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	791b      	ldrb	r3, [r3, #4]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d11f      	bne.n	80090d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	0151      	lsls	r1, r2, #5
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	440a      	add	r2, r1
 80090a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80090b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	0151      	lsls	r1, r2, #5
 80090c4:	69fa      	ldr	r2, [r7, #28]
 80090c6:	440a      	add	r2, r1
 80090c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d14b      	bne.n	8009170 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d009      	beq.n	80090f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ec:	461a      	mov	r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	791b      	ldrb	r3, [r3, #4]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d128      	bne.n	800914e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009108:	2b00      	cmp	r3, #0
 800910a:	d110      	bne.n	800912e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	0151      	lsls	r1, r2, #5
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	440a      	add	r2, r1
 8009122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	e00f      	b.n	800914e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	015a      	lsls	r2, r3, #5
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	4413      	add	r3, r2
 8009136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	0151      	lsls	r1, r2, #5
 8009140:	69fa      	ldr	r2, [r7, #28]
 8009142:	440a      	add	r2, r1
 8009144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800914c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	0151      	lsls	r1, r2, #5
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	440a      	add	r2, r1
 8009164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009168:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	e133      	b.n	80093d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	0151      	lsls	r1, r2, #5
 8009182:	69fa      	ldr	r2, [r7, #28]
 8009184:	440a      	add	r2, r1
 8009186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800918e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	791b      	ldrb	r3, [r3, #4]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d015      	beq.n	80091c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 811b 	beq.w	80093d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	2101      	movs	r1, #1
 80091b4:	fa01 f303 	lsl.w	r3, r1, r3
 80091b8:	69f9      	ldr	r1, [r7, #28]
 80091ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091be:	4313      	orrs	r3, r2
 80091c0:	634b      	str	r3, [r1, #52]	; 0x34
 80091c2:	e109      	b.n	80093d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d110      	bne.n	80091f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	69fa      	ldr	r2, [r7, #28]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	e00f      	b.n	8009216 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	440a      	add	r2, r1
 800920c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009214:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	6919      	ldr	r1, [r3, #16]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	781a      	ldrb	r2, [r3, #0]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	b298      	uxth	r0, r3
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	4603      	mov	r3, r0
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 fade 	bl	80097ec <USB_WritePacket>
 8009230:	e0d2      	b.n	80093d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	4413      	add	r3, r2
 800923a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	0151      	lsls	r1, r2, #5
 8009244:	69fa      	ldr	r2, [r7, #28]
 8009246:	440a      	add	r2, r1
 8009248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800924c:	0cdb      	lsrs	r3, r3, #19
 800924e:	04db      	lsls	r3, r3, #19
 8009250:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	4413      	add	r3, r2
 800925a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	0151      	lsls	r1, r2, #5
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	440a      	add	r2, r1
 8009268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800926c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009270:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009274:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d126      	bne.n	80092cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928a:	691a      	ldr	r2, [r3, #16]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009294:	69b9      	ldr	r1, [r7, #24]
 8009296:	0148      	lsls	r0, r1, #5
 8009298:	69f9      	ldr	r1, [r7, #28]
 800929a:	4401      	add	r1, r0
 800929c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092a0:	4313      	orrs	r3, r2
 80092a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	0151      	lsls	r1, r2, #5
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	440a      	add	r2, r1
 80092ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092c2:	6113      	str	r3, [r2, #16]
 80092c4:	e03a      	b.n	800933c <USB_EPStartXfer+0x3e4>
 80092c6:	bf00      	nop
 80092c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	699a      	ldr	r2, [r3, #24]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	4413      	add	r3, r2
 80092d6:	1e5a      	subs	r2, r3, #1
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	8afa      	ldrh	r2, [r7, #22]
 80092e8:	fb03 f202 	mul.w	r2, r3, r2
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fc:	691a      	ldr	r2, [r3, #16]
 80092fe:	8afb      	ldrh	r3, [r7, #22]
 8009300:	04d9      	lsls	r1, r3, #19
 8009302:	4b38      	ldr	r3, [pc, #224]	; (80093e4 <USB_EPStartXfer+0x48c>)
 8009304:	400b      	ands	r3, r1
 8009306:	69b9      	ldr	r1, [r7, #24]
 8009308:	0148      	lsls	r0, r1, #5
 800930a:	69f9      	ldr	r1, [r7, #28]
 800930c:	4401      	add	r1, r0
 800930e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009312:	4313      	orrs	r3, r2
 8009314:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009322:	691a      	ldr	r2, [r3, #16]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800932c:	69b9      	ldr	r1, [r7, #24]
 800932e:	0148      	lsls	r0, r1, #5
 8009330:	69f9      	ldr	r1, [r7, #28]
 8009332:	4401      	add	r1, r0
 8009334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009338:	4313      	orrs	r3, r2
 800933a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d10d      	bne.n	800935e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d009      	beq.n	800935e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	6919      	ldr	r1, [r3, #16]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935a:	460a      	mov	r2, r1
 800935c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	791b      	ldrb	r3, [r3, #4]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d128      	bne.n	80093b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009372:	2b00      	cmp	r3, #0
 8009374:	d110      	bne.n	8009398 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	e00f      	b.n	80093b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	69fa      	ldr	r2, [r7, #28]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	0151      	lsls	r1, r2, #5
 80093ca:	69fa      	ldr	r2, [r7, #28]
 80093cc:	440a      	add	r2, r1
 80093ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3720      	adds	r7, #32
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	1ff80000 	.word	0x1ff80000

080093e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	4613      	mov	r3, r2
 80093f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	2b01      	cmp	r3, #1
 8009406:	f040 80ce 	bne.w	80095a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d132      	bne.n	8009478 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	0151      	lsls	r1, r2, #5
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	440a      	add	r2, r1
 8009428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800942c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	0151      	lsls	r1, r2, #5
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	440a      	add	r2, r1
 800944c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	0151      	lsls	r1, r2, #5
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	440a      	add	r2, r1
 800946c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009470:	0cdb      	lsrs	r3, r3, #19
 8009472:	04db      	lsls	r3, r3, #19
 8009474:	6113      	str	r3, [r2, #16]
 8009476:	e04e      	b.n	8009516 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	0151      	lsls	r1, r2, #5
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	440a      	add	r2, r1
 800948e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009492:	0cdb      	lsrs	r3, r3, #19
 8009494:	04db      	lsls	r3, r3, #19
 8009496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	0151      	lsls	r1, r2, #5
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	440a      	add	r2, r1
 80094ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	699a      	ldr	r2, [r3, #24]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d903      	bls.n	80094d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	68da      	ldr	r2, [r3, #12]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	0151      	lsls	r1, r2, #5
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	440a      	add	r2, r1
 80094e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fc:	691a      	ldr	r2, [r3, #16]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009506:	6939      	ldr	r1, [r7, #16]
 8009508:	0148      	lsls	r0, r1, #5
 800950a:	6979      	ldr	r1, [r7, #20]
 800950c:	4401      	add	r1, r0
 800950e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009512:	4313      	orrs	r3, r2
 8009514:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d11e      	bne.n	800955a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d009      	beq.n	8009538 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009530:	461a      	mov	r2, r3
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	0151      	lsls	r1, r2, #5
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	440a      	add	r2, r1
 800954e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	e097      	b.n	800968a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	0151      	lsls	r1, r2, #5
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	440a      	add	r2, r1
 8009570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009578:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 8083 	beq.w	800968a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800958a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 030f 	and.w	r3, r3, #15
 8009594:	2101      	movs	r1, #1
 8009596:	fa01 f303 	lsl.w	r3, r1, r3
 800959a:	6979      	ldr	r1, [r7, #20]
 800959c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095a0:	4313      	orrs	r3, r2
 80095a2:	634b      	str	r3, [r1, #52]	; 0x34
 80095a4:	e071      	b.n	800968a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c0:	0cdb      	lsrs	r3, r3, #19
 80095c2:	04db      	lsls	r3, r3, #19
 80095c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	0151      	lsls	r1, r2, #5
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	440a      	add	r2, r1
 80095dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	4413      	add	r3, r2
 800960a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	0151      	lsls	r1, r2, #5
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	440a      	add	r2, r1
 8009618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800961c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962e:	691a      	ldr	r2, [r3, #16]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009638:	6939      	ldr	r1, [r7, #16]
 800963a:	0148      	lsls	r0, r1, #5
 800963c:	6979      	ldr	r1, [r7, #20]
 800963e:	4401      	add	r1, r0
 8009640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009644:	4313      	orrs	r3, r2
 8009646:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d10d      	bne.n	800966a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6919      	ldr	r1, [r3, #16]
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009666:	460a      	mov	r2, r1
 8009668:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	0151      	lsls	r1, r2, #5
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	440a      	add	r2, r1
 8009680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009684:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009688:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d14a      	bne.n	800974c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096ce:	f040 8086 	bne.w	80097de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	7812      	ldrb	r2, [r2, #0]
 80096e6:	0151      	lsls	r1, r2, #5
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	440a      	add	r2, r1
 80096ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80096f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	7812      	ldrb	r2, [r2, #0]
 800970a:	0151      	lsls	r1, r2, #5
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	440a      	add	r2, r1
 8009710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009718:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f242 7210 	movw	r2, #10000	; 0x2710
 8009726:	4293      	cmp	r3, r2
 8009728:	d902      	bls.n	8009730 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
          break;
 800972e:	e056      	b.n	80097de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009748:	d0e7      	beq.n	800971a <USB_EPStopXfer+0x82>
 800974a:	e048      	b.n	80097de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009764:	d13b      	bne.n	80097de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	7812      	ldrb	r2, [r2, #0]
 800977a:	0151      	lsls	r1, r2, #5
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	440a      	add	r2, r1
 8009780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009784:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009788:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	7812      	ldrb	r2, [r2, #0]
 800979e:	0151      	lsls	r1, r2, #5
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	440a      	add	r2, r1
 80097a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d902      	bls.n	80097c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	75fb      	strb	r3, [r7, #23]
          break;
 80097c2:	e00c      	b.n	80097de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097dc:	d0e7      	beq.n	80097ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	371c      	adds	r7, #28
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b089      	sub	sp, #36	; 0x24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4611      	mov	r1, r2
 80097f8:	461a      	mov	r2, r3
 80097fa:	460b      	mov	r3, r1
 80097fc:	71fb      	strb	r3, [r7, #7]
 80097fe:	4613      	mov	r3, r2
 8009800:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800980a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	d123      	bne.n	800985a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009812:	88bb      	ldrh	r3, [r7, #4]
 8009814:	3303      	adds	r3, #3
 8009816:	089b      	lsrs	r3, r3, #2
 8009818:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800981a:	2300      	movs	r3, #0
 800981c:	61bb      	str	r3, [r7, #24]
 800981e:	e018      	b.n	8009852 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	031a      	lsls	r2, r3, #12
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	4413      	add	r3, r2
 8009828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800982c:	461a      	mov	r2, r3
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	3301      	adds	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	3301      	adds	r3, #1
 800983e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	3301      	adds	r3, #1
 8009844:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	3301      	adds	r3, #1
 800984a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	3301      	adds	r3, #1
 8009850:	61bb      	str	r3, [r7, #24]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	429a      	cmp	r2, r3
 8009858:	d3e2      	bcc.n	8009820 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3724      	adds	r7, #36	; 0x24
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009868:	b480      	push	{r7}
 800986a:	b08b      	sub	sp, #44	; 0x2c
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800987e:	88fb      	ldrh	r3, [r7, #6]
 8009880:	089b      	lsrs	r3, r3, #2
 8009882:	b29b      	uxth	r3, r3
 8009884:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800988e:	2300      	movs	r3, #0
 8009890:	623b      	str	r3, [r7, #32]
 8009892:	e014      	b.n	80098be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	601a      	str	r2, [r3, #0]
    pDest++;
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	3301      	adds	r3, #1
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	3301      	adds	r3, #1
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	3301      	adds	r3, #1
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	3301      	adds	r3, #1
 80098b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	3301      	adds	r3, #1
 80098bc:	623b      	str	r3, [r7, #32]
 80098be:	6a3a      	ldr	r2, [r7, #32]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d3e6      	bcc.n	8009894 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80098c6:	8bfb      	ldrh	r3, [r7, #30]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01e      	beq.n	800990a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d6:	461a      	mov	r2, r3
 80098d8:	f107 0310 	add.w	r3, r7, #16
 80098dc:	6812      	ldr	r2, [r2, #0]
 80098de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	701a      	strb	r2, [r3, #0]
      i++;
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	3301      	adds	r3, #1
 80098f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	3301      	adds	r3, #1
 80098fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80098fe:	8bfb      	ldrh	r3, [r7, #30]
 8009900:	3b01      	subs	r3, #1
 8009902:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009904:	8bfb      	ldrh	r3, [r7, #30]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1ea      	bne.n	80098e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800990c:	4618      	mov	r0, r3
 800990e:	372c      	adds	r7, #44	; 0x2c
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	785b      	ldrb	r3, [r3, #1]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d12c      	bne.n	800998e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	db12      	blt.n	800996c <USB_EPSetStall+0x54>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00f      	beq.n	800996c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	0151      	lsls	r1, r2, #5
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	440a      	add	r2, r1
 8009962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009966:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800996a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	0151      	lsls	r1, r2, #5
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	440a      	add	r2, r1
 8009982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	e02b      	b.n	80099e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4413      	add	r3, r2
 8009996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	db12      	blt.n	80099c6 <USB_EPSetStall+0xae>
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00f      	beq.n	80099c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	785b      	ldrb	r3, [r3, #1]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d128      	bne.n	8009a62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	0151      	lsls	r1, r2, #5
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	440a      	add	r2, r1
 8009a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	791b      	ldrb	r3, [r3, #4]
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d003      	beq.n	8009a40 <USB_EPClearStall+0x4c>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	791b      	ldrb	r3, [r3, #4]
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d138      	bne.n	8009ab2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	e027      	b.n	8009ab2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	0151      	lsls	r1, r2, #5
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	440a      	add	r2, r1
 8009a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	791b      	ldrb	r3, [r3, #4]
 8009a86:	2b03      	cmp	r3, #3
 8009a88:	d003      	beq.n	8009a92 <USB_EPClearStall+0x9e>
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	791b      	ldrb	r3, [r3, #4]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d10f      	bne.n	8009ab2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	0151      	lsls	r1, r2, #5
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	440a      	add	r2, r1
 8009aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ab0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ade:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009ae2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	78fb      	ldrb	r3, [r7, #3]
 8009aee:	011b      	lsls	r3, r3, #4
 8009af0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009af4:	68f9      	ldr	r1, [r7, #12]
 8009af6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009afa:	4313      	orrs	r3, r2
 8009afc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b26:	f023 0303 	bic.w	r3, r3, #3
 8009b2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b3a:	f023 0302 	bic.w	r3, r3, #2
 8009b3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b085      	sub	sp, #20
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b68:	f023 0303 	bic.w	r3, r3, #3
 8009b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b7c:	f043 0302 	orr.w	r3, r3, #2
 8009b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b085      	sub	sp, #20
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	0c1b      	lsrs	r3, r3, #16
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	b29b      	uxth	r3, r3
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b085      	sub	sp, #20
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	460b      	mov	r3, r1
 8009c28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c2e:	78fb      	ldrb	r3, [r7, #3]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b087      	sub	sp, #28
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	f003 030f 	and.w	r3, r3, #15
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	fa22 f303 	lsr.w	r3, r2, r3
 8009c8a:	01db      	lsls	r3, r3, #7
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b083      	sub	sp, #12
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b085      	sub	sp, #20
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009cf0:	f023 0307 	bic.w	r3, r3, #7
 8009cf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	460b      	mov	r3, r1
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	333c      	adds	r3, #60	; 0x3c
 8009d2e:	3304      	adds	r3, #4
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	4a26      	ldr	r2, [pc, #152]	; (8009dd0 <USB_EP0_OutStart+0xb8>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d90a      	bls.n	8009d52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d4c:	d101      	bne.n	8009d52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e037      	b.n	8009dc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d58:	461a      	mov	r2, r3
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d80:	f043 0318 	orr.w	r3, r3, #24
 8009d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009d98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d10f      	bne.n	8009dc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da6:	461a      	mov	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009dbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	371c      	adds	r7, #28
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	4f54300a 	.word	0x4f54300a

08009dd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3301      	adds	r3, #1
 8009de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4a13      	ldr	r2, [pc, #76]	; (8009e38 <USB_CoreReset+0x64>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d901      	bls.n	8009df2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e01b      	b.n	8009e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	daf2      	bge.n	8009de0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	f043 0201 	orr.w	r2, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4a09      	ldr	r2, [pc, #36]	; (8009e38 <USB_CoreReset+0x64>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d901      	bls.n	8009e1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e006      	b.n	8009e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d0f0      	beq.n	8009e0a <USB_CoreReset+0x36>

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	00030d40 	.word	0x00030d40

08009e3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e48:	205c      	movs	r0, #92	; 0x5c
 8009e4a:	f002 fc8b 	bl	800c764 <USBD_static_malloc>
 8009e4e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d109      	bne.n	8009e6a <USBD_CDC_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	32b0      	adds	r2, #176	; 0xb0
 8009e60:	2100      	movs	r1, #0
 8009e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009e66:	2302      	movs	r3, #2
 8009e68:	e0ca      	b.n	800a000 <USBD_CDC_Init+0x1c4>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009e6a:	225c      	movs	r2, #92	; 0x5c
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f002 fcf4 	bl	800c85c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	32b0      	adds	r2, #176	; 0xb0
 8009e7e:	68f9      	ldr	r1, [r7, #12]
 8009e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	32b0      	adds	r2, #176	; 0xb0
 8009e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	7c1b      	ldrb	r3, [r3, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d136      	bne.n	8009f0e <USBD_CDC_Init+0xd2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009ea0:	4b59      	ldr	r3, [pc, #356]	; (800a008 <USBD_CDC_Init+0x1cc>)
 8009ea2:	7819      	ldrb	r1, [r3, #0]
 8009ea4:	2340      	movs	r3, #64	; 0x40
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f002 fb38 	bl	800c51e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009eae:	4b56      	ldr	r3, [pc, #344]	; (800a008 <USBD_CDC_Init+0x1cc>)
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	f003 020f 	and.w	r2, r3, #15
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	440b      	add	r3, r1
 8009ec2:	3324      	adds	r3, #36	; 0x24
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ec8:	4b50      	ldr	r3, [pc, #320]	; (800a00c <USBD_CDC_Init+0x1d0>)
 8009eca:	7819      	ldrb	r1, [r3, #0]
 8009ecc:	2340      	movs	r3, #64	; 0x40
 8009ece:	2202      	movs	r2, #2
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f002 fb24 	bl	800c51e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ed6:	4b4d      	ldr	r3, [pc, #308]	; (800a00c <USBD_CDC_Init+0x1d0>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	f003 020f 	and.w	r2, r3, #15
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009eee:	2201      	movs	r2, #1
 8009ef0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ef2:	4b47      	ldr	r3, [pc, #284]	; (800a010 <USBD_CDC_Init+0x1d4>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	f003 020f 	and.w	r2, r3, #15
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	440b      	add	r3, r1
 8009f06:	3326      	adds	r3, #38	; 0x26
 8009f08:	2210      	movs	r2, #16
 8009f0a:	801a      	strh	r2, [r3, #0]
 8009f0c:	e035      	b.n	8009f7a <USBD_CDC_Init+0x13e>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009f0e:	4b3e      	ldr	r3, [pc, #248]	; (800a008 <USBD_CDC_Init+0x1cc>)
 8009f10:	7819      	ldrb	r1, [r3, #0]
 8009f12:	2340      	movs	r3, #64	; 0x40
 8009f14:	2202      	movs	r2, #2
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f002 fb01 	bl	800c51e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009f1c:	4b3a      	ldr	r3, [pc, #232]	; (800a008 <USBD_CDC_Init+0x1cc>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	f003 020f 	and.w	r2, r3, #15
 8009f24:	6879      	ldr	r1, [r7, #4]
 8009f26:	4613      	mov	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	440b      	add	r3, r1
 8009f30:	3324      	adds	r3, #36	; 0x24
 8009f32:	2201      	movs	r2, #1
 8009f34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009f36:	4b35      	ldr	r3, [pc, #212]	; (800a00c <USBD_CDC_Init+0x1d0>)
 8009f38:	7819      	ldrb	r1, [r3, #0]
 8009f3a:	2340      	movs	r3, #64	; 0x40
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f002 faed 	bl	800c51e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009f44:	4b31      	ldr	r3, [pc, #196]	; (800a00c <USBD_CDC_Init+0x1d0>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	f003 020f 	and.w	r2, r3, #15
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	440b      	add	r3, r1
 8009f58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009f60:	4b2b      	ldr	r3, [pc, #172]	; (800a010 <USBD_CDC_Init+0x1d4>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	f003 020f 	and.w	r2, r3, #15
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	440b      	add	r3, r1
 8009f74:	3326      	adds	r3, #38	; 0x26
 8009f76:	2210      	movs	r2, #16
 8009f78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f7a:	4b25      	ldr	r3, [pc, #148]	; (800a010 <USBD_CDC_Init+0x1d4>)
 8009f7c:	7819      	ldrb	r1, [r3, #0]
 8009f7e:	2308      	movs	r3, #8
 8009f80:	2203      	movs	r2, #3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f002 facb 	bl	800c51e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009f88:	4b21      	ldr	r3, [pc, #132]	; (800a010 <USBD_CDC_Init+0x1d4>)
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	f003 020f 	and.w	r2, r3, #15
 8009f90:	6879      	ldr	r1, [r7, #4]
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	440b      	add	r3, r1
 8009f9c:	3324      	adds	r3, #36	; 0x24
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	33b0      	adds	r3, #176	; 0xb0
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hcdc->RxState = 0U;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	659a      	str	r2, [r3, #88]	; 0x58

  if (hcdc->RxBuffer == NULL)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <USBD_CDC_Init+0x198>
  {
    return (uint8_t)USBD_EMEM;
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	e015      	b.n	800a000 <USBD_CDC_Init+0x1c4>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7c1b      	ldrb	r3, [r3, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d108      	bne.n	8009fee <USBD_CDC_Init+0x1b2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fdc:	4b0b      	ldr	r3, [pc, #44]	; (800a00c <USBD_CDC_Init+0x1d0>)
 8009fde:	7819      	ldrb	r1, [r3, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fe4:	2340      	movs	r3, #64	; 0x40
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f002 fb88 	bl	800c6fc <USBD_LL_PrepareReceive>
 8009fec:	e007      	b.n	8009ffe <USBD_CDC_Init+0x1c2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fee:	4b07      	ldr	r3, [pc, #28]	; (800a00c <USBD_CDC_Init+0x1d0>)
 8009ff0:	7819      	ldrb	r1, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ff6:	2340      	movs	r3, #64	; 0x40
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f002 fb7f 	bl	800c6fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000117 	.word	0x20000117
 800a00c:	20000118 	.word	0x20000118
 800a010:	20000119 	.word	0x20000119

0800a014 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a020:	4b3a      	ldr	r3, [pc, #232]	; (800a10c <USBD_CDC_DeInit+0xf8>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f002 fa9f 	bl	800c56a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a02c:	4b37      	ldr	r3, [pc, #220]	; (800a10c <USBD_CDC_DeInit+0xf8>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	f003 020f 	and.w	r2, r3, #15
 800a034:	6879      	ldr	r1, [r7, #4]
 800a036:	4613      	mov	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	440b      	add	r3, r1
 800a040:	3324      	adds	r3, #36	; 0x24
 800a042:	2200      	movs	r2, #0
 800a044:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a046:	4b32      	ldr	r3, [pc, #200]	; (800a110 <USBD_CDC_DeInit+0xfc>)
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f002 fa8c 	bl	800c56a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a052:	4b2f      	ldr	r3, [pc, #188]	; (800a110 <USBD_CDC_DeInit+0xfc>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	f003 020f 	and.w	r2, r3, #15
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	4613      	mov	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	440b      	add	r3, r1
 800a066:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a06a:	2200      	movs	r2, #0
 800a06c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a06e:	4b29      	ldr	r3, [pc, #164]	; (800a114 <USBD_CDC_DeInit+0x100>)
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f002 fa78 	bl	800c56a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a07a:	4b26      	ldr	r3, [pc, #152]	; (800a114 <USBD_CDC_DeInit+0x100>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	f003 020f 	and.w	r2, r3, #15
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	440b      	add	r3, r1
 800a08e:	3324      	adds	r3, #36	; 0x24
 800a090:	2200      	movs	r2, #0
 800a092:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a094:	4b1f      	ldr	r3, [pc, #124]	; (800a114 <USBD_CDC_DeInit+0x100>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	f003 020f 	and.w	r2, r3, #15
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	440b      	add	r3, r1
 800a0a8:	3326      	adds	r3, #38	; 0x26
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	32b0      	adds	r2, #176	; 0xb0
 800a0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01f      	beq.n	800a100 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	33b0      	adds	r3, #176	; 0xb0
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	32b0      	adds	r2, #176	; 0xb0
 800a0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f002 fb4c 	bl	800c780 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	32b0      	adds	r2, #176	; 0xb0
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000117 	.word	0x20000117
 800a110:	20000118 	.word	0x20000118
 800a114:	20000119 	.word	0x20000119

0800a118 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	32b0      	adds	r2, #176	; 0xb0
 800a12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a130:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a144:	2303      	movs	r3, #3
 800a146:	e0bf      	b.n	800a2c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a150:	2b00      	cmp	r3, #0
 800a152:	d050      	beq.n	800a1f6 <USBD_CDC_Setup+0xde>
 800a154:	2b20      	cmp	r3, #32
 800a156:	f040 80af 	bne.w	800a2b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	88db      	ldrh	r3, [r3, #6]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d03a      	beq.n	800a1d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	b25b      	sxtb	r3, r3
 800a168:	2b00      	cmp	r3, #0
 800a16a:	da1b      	bge.n	800a1a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	33b0      	adds	r3, #176	; 0xb0
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a182:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	88d2      	ldrh	r2, [r2, #6]
 800a188:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	88db      	ldrh	r3, [r3, #6]
 800a18e:	2b07      	cmp	r3, #7
 800a190:	bf28      	it	cs
 800a192:	2307      	movcs	r3, #7
 800a194:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	89fa      	ldrh	r2, [r7, #14]
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f001 fd79 	bl	800bc94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a1a2:	e090      	b.n	800a2c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	785a      	ldrb	r2, [r3, #1]
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	88db      	ldrh	r3, [r3, #6]
 800a1b2:	2b3f      	cmp	r3, #63	; 0x3f
 800a1b4:	d803      	bhi.n	800a1be <USBD_CDC_Setup+0xa6>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	88db      	ldrh	r3, [r3, #6]
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	e000      	b.n	800a1c0 <USBD_CDC_Setup+0xa8>
 800a1be:	2240      	movs	r2, #64	; 0x40
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a1c6:	6939      	ldr	r1, [r7, #16]
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 fd8b 	bl	800bcec <USBD_CtlPrepareRx>
      break;
 800a1d6:	e076      	b.n	800a2c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	33b0      	adds	r3, #176	; 0xb0
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	7850      	ldrb	r0, [r2, #1]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	4798      	blx	r3
      break;
 800a1f4:	e067      	b.n	800a2c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	2b0b      	cmp	r3, #11
 800a1fc:	d851      	bhi.n	800a2a2 <USBD_CDC_Setup+0x18a>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <USBD_CDC_Setup+0xec>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a235 	.word	0x0800a235
 800a208:	0800a2b1 	.word	0x0800a2b1
 800a20c:	0800a2a3 	.word	0x0800a2a3
 800a210:	0800a2a3 	.word	0x0800a2a3
 800a214:	0800a2a3 	.word	0x0800a2a3
 800a218:	0800a2a3 	.word	0x0800a2a3
 800a21c:	0800a2a3 	.word	0x0800a2a3
 800a220:	0800a2a3 	.word	0x0800a2a3
 800a224:	0800a2a3 	.word	0x0800a2a3
 800a228:	0800a2a3 	.word	0x0800a2a3
 800a22c:	0800a25f 	.word	0x0800a25f
 800a230:	0800a289 	.word	0x0800a289
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b03      	cmp	r3, #3
 800a23e:	d107      	bne.n	800a250 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a240:	f107 030a 	add.w	r3, r7, #10
 800a244:	2202      	movs	r2, #2
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f001 fd23 	bl	800bc94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a24e:	e032      	b.n	800a2b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f001 fcad 	bl	800bbb2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a258:	2303      	movs	r3, #3
 800a25a:	75fb      	strb	r3, [r7, #23]
          break;
 800a25c:	e02b      	b.n	800a2b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b03      	cmp	r3, #3
 800a268:	d107      	bne.n	800a27a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a26a:	f107 030d 	add.w	r3, r7, #13
 800a26e:	2201      	movs	r2, #1
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fd0e 	bl	800bc94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a278:	e01d      	b.n	800a2b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 fc98 	bl	800bbb2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a282:	2303      	movs	r3, #3
 800a284:	75fb      	strb	r3, [r7, #23]
          break;
 800a286:	e016      	b.n	800a2b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b03      	cmp	r3, #3
 800a292:	d00f      	beq.n	800a2b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 fc8b 	bl	800bbb2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a29c:	2303      	movs	r3, #3
 800a29e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a2a0:	e008      	b.n	800a2b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f001 fc84 	bl	800bbb2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ae:	e002      	b.n	800a2b6 <USBD_CDC_Setup+0x19e>
          break;
 800a2b0:	bf00      	nop
 800a2b2:	e008      	b.n	800a2c6 <USBD_CDC_Setup+0x1ae>
          break;
 800a2b4:	bf00      	nop
      }
      break;
 800a2b6:	e006      	b.n	800a2c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f001 fc79 	bl	800bbb2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	32b0      	adds	r2, #176	; 0xb0
 800a2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e063      	b.n	800a3c2 <USBD_CDC_DataIn+0xf2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	32b0      	adds	r2, #176	; 0xb0
 800a304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a308:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a30a:	78fb      	ldrb	r3, [r7, #3]
 800a30c:	f003 020f 	and.w	r2, r3, #15
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	440b      	add	r3, r1
 800a31c:	3318      	adds	r3, #24
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d02f      	beq.n	800a384 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	f003 020f 	and.w	r2, r3, #15
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4613      	mov	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	3318      	adds	r3, #24
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	f003 010f 	and.w	r1, r3, #15
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	460b      	mov	r3, r1
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	440b      	add	r3, r1
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4403      	add	r3, r0
 800a34c:	3348      	adds	r3, #72	; 0x48
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	fbb2 f1f3 	udiv	r1, r2, r3
 800a354:	fb01 f303 	mul.w	r3, r1, r3
 800a358:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d112      	bne.n	800a384 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	f003 020f 	and.w	r2, r3, #15
 800a364:	6879      	ldr	r1, [r7, #4]
 800a366:	4613      	mov	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	440b      	add	r3, r1
 800a370:	3318      	adds	r3, #24
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a376:	78f9      	ldrb	r1, [r7, #3]
 800a378:	2300      	movs	r3, #0
 800a37a:	2200      	movs	r2, #0
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f002 f99c 	bl	800c6ba <USBD_LL_Transmit>
 800a382:	e01d      	b.n	800a3c0 <USBD_CDC_DataIn+0xf0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2200      	movs	r2, #0
 800a388:	655a      	str	r2, [r3, #84]	; 0x54

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	33b0      	adds	r3, #176	; 0xb0
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	4413      	add	r3, r2
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00f      	beq.n	800a3c0 <USBD_CDC_DataIn+0xf0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	33b0      	adds	r3, #176	; 0xb0
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	f102 0150 	add.w	r1, r2, #80	; 0x50
 800a3bc:	78fa      	ldrb	r2, [r7, #3]
 800a3be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	32b0      	adds	r2, #176	; 0xb0
 800a3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	32b0      	adds	r2, #176	; 0xb0
 800a3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e017      	b.n	800a42c <USBD_CDC_DataOut+0x62>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f002 f99c 	bl	800c73e <USBD_LL_GetRxDataSize>
 800a406:	4602      	mov	r2, r0
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	33b0      	adds	r3, #176	; 0xb0
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	324c      	adds	r2, #76	; 0x4c
 800a426:	4611      	mov	r1, r2
 800a428:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	32b0      	adds	r2, #176	; 0xb0
 800a446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a452:	2303      	movs	r3, #3
 800a454:	e025      	b.n	800a4a2 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	33b0      	adds	r3, #176	; 0xb0
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d01a      	beq.n	800a4a0 <USBD_CDC_EP0_RxReady+0x6c>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a470:	2bff      	cmp	r3, #255	; 0xff
 800a472:	d015      	beq.n	800a4a0 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	33b0      	adds	r3, #176	; 0xb0
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                                     (uint8_t *)hcdc->data,
 800a48c:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a494:	b292      	uxth	r2, r2
 800a496:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	22ff      	movs	r2, #255	; 0xff
 800a49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return (uint8_t)USBD_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a4b4:	2182      	movs	r1, #130	; 0x82
 800a4b6:	4818      	ldr	r0, [pc, #96]	; (800a518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4b8:	f000 fd43 	bl	800af42 <USBD_GetEpDesc>
 800a4bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a4be:	2101      	movs	r1, #1
 800a4c0:	4815      	ldr	r0, [pc, #84]	; (800a518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4c2:	f000 fd3e 	bl	800af42 <USBD_GetEpDesc>
 800a4c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a4c8:	2181      	movs	r1, #129	; 0x81
 800a4ca:	4813      	ldr	r0, [pc, #76]	; (800a518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4cc:	f000 fd39 	bl	800af42 <USBD_GetEpDesc>
 800a4d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2210      	movs	r2, #16
 800a4dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d006      	beq.n	800a4f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4ec:	711a      	strb	r2, [r3, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d006      	beq.n	800a506 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a500:	711a      	strb	r2, [r3, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2243      	movs	r2, #67	; 0x43
 800a50a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200000d4 	.word	0x200000d4

0800a51c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a524:	2182      	movs	r1, #130	; 0x82
 800a526:	4818      	ldr	r0, [pc, #96]	; (800a588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a528:	f000 fd0b 	bl	800af42 <USBD_GetEpDesc>
 800a52c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a52e:	2101      	movs	r1, #1
 800a530:	4815      	ldr	r0, [pc, #84]	; (800a588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a532:	f000 fd06 	bl	800af42 <USBD_GetEpDesc>
 800a536:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a538:	2181      	movs	r1, #129	; 0x81
 800a53a:	4813      	ldr	r0, [pc, #76]	; (800a588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a53c:	f000 fd01 	bl	800af42 <USBD_GetEpDesc>
 800a540:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2210      	movs	r2, #16
 800a54c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d006      	beq.n	800a562 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	2200      	movs	r2, #0
 800a558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a55c:	711a      	strb	r2, [r3, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d006      	beq.n	800a576 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a570:	711a      	strb	r2, [r3, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2243      	movs	r2, #67	; 0x43
 800a57a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a57c:	4b02      	ldr	r3, [pc, #8]	; (800a588 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3718      	adds	r7, #24
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	200000d4 	.word	0x200000d4

0800a58c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a594:	2182      	movs	r1, #130	; 0x82
 800a596:	4818      	ldr	r0, [pc, #96]	; (800a5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a598:	f000 fcd3 	bl	800af42 <USBD_GetEpDesc>
 800a59c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a59e:	2101      	movs	r1, #1
 800a5a0:	4815      	ldr	r0, [pc, #84]	; (800a5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5a2:	f000 fcce 	bl	800af42 <USBD_GetEpDesc>
 800a5a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a5a8:	2181      	movs	r1, #129	; 0x81
 800a5aa:	4813      	ldr	r0, [pc, #76]	; (800a5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5ac:	f000 fcc9 	bl	800af42 <USBD_GetEpDesc>
 800a5b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2210      	movs	r2, #16
 800a5bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d006      	beq.n	800a5d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5cc:	711a      	strb	r2, [r3, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d006      	beq.n	800a5e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5e0:	711a      	strb	r2, [r3, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2243      	movs	r2, #67	; 0x43
 800a5ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a5ec:	4b02      	ldr	r3, [pc, #8]	; (800a5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	200000d4 	.word	0x200000d4

0800a5fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	220a      	movs	r2, #10
 800a608:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a60a:	4b03      	ldr	r3, [pc, #12]	; (800a618 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	20000090 	.word	0x20000090

0800a61c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e009      	b.n	800a644 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	33b0      	adds	r3, #176	; 0xb0
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	32b0      	adds	r2, #176	; 0xb0
 800a666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a672:	2303      	movs	r3, #3
 800a674:	e006      	b.n	800a684 <USBD_CDC_SetTxBuffer+0x34>
  }

  hcdc->TxBuffer = pbuff;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	651a      	str	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	371c      	adds	r7, #28
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	32b0      	adds	r2, #176	; 0xb0
 800a6a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e003      	b.n	800a6bc <USBD_CDC_SetRxBuffer+0x2c>
  }

  hcdc->RxBuffer = pbuff;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	645a      	str	r2, [r3, #68]	; 0x44

  return (uint8_t)USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	32b0      	adds	r2, #176	; 0xb0
 800a6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	32b0      	adds	r2, #176	; 0xb0
 800a6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e020      	b.n	800a73c <USBD_CDC_TransmitPacket+0x74>
  }

  if (hcdc->TxState == 0U)
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d11b      	bne.n	800a73a <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2201      	movs	r2, #1
 800a706:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a708:	4b0e      	ldr	r3, [pc, #56]	; (800a744 <USBD_CDC_TransmitPacket+0x7c>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f003 020f 	and.w	r2, r3, #15
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4403      	add	r3, r0
 800a720:	3318      	adds	r3, #24
 800a722:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a724:	4b07      	ldr	r3, [pc, #28]	; (800a744 <USBD_CDC_TransmitPacket+0x7c>)
 800a726:	7819      	ldrb	r1, [r3, #0]
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f001 ffc2 	bl	800c6ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20000117 	.word	0x20000117

0800a748 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	32b0      	adds	r2, #176	; 0xb0
 800a75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	32b0      	adds	r2, #176	; 0xb0
 800a76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a772:	2303      	movs	r3, #3
 800a774:	e015      	b.n	800a7a2 <USBD_CDC_ReceivePacket+0x5a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	7c1b      	ldrb	r3, [r3, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d108      	bne.n	800a790 <USBD_CDC_ReceivePacket+0x48>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a77e:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <USBD_CDC_ReceivePacket+0x64>)
 800a780:	7819      	ldrb	r1, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a786:	2340      	movs	r3, #64	; 0x40
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f001 ffb7 	bl	800c6fc <USBD_LL_PrepareReceive>
 800a78e:	e007      	b.n	800a7a0 <USBD_CDC_ReceivePacket+0x58>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <USBD_CDC_ReceivePacket+0x64>)
 800a792:	7819      	ldrb	r1, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a798:	2340      	movs	r3, #64	; 0x40
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f001 ffae 	bl	800c6fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20000118 	.word	0x20000118

0800a7b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e01f      	b.n	800a808 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	79fa      	ldrb	r2, [r7, #7]
 800a7fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f001 fe27 	bl	800c450 <USBD_LL_Init>
 800a802:	4603      	mov	r3, r0
 800a804:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a806:	7dfb      	ldrb	r3, [r7, #23]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a824:	2303      	movs	r3, #3
 800a826:	e025      	b.n	800a874 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	32ae      	adds	r2, #174	; 0xae
 800a83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00f      	beq.n	800a864 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	32ae      	adds	r2, #174	; 0xae
 800a84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a854:	f107 020e 	add.w	r2, r7, #14
 800a858:	4610      	mov	r0, r2
 800a85a:	4798      	blx	r3
 800a85c:	4602      	mov	r2, r0
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f001 fe2f 	bl	800c4e8 <USBD_LL_Start>
 800a88a:	4603      	mov	r3, r0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a89c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b084      	sub	sp, #16
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d009      	beq.n	800a8d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	78fa      	ldrb	r2, [r7, #3]
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	4798      	blx	r3
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b084      	sub	sp, #16
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	78fa      	ldrb	r2, [r7, #3]
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	4798      	blx	r3
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a908:	2303      	movs	r3, #3
 800a90a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 f908 	bl	800bb3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a93c:	461a      	mov	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a94a:	f003 031f 	and.w	r3, r3, #31
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d01a      	beq.n	800a988 <USBD_LL_SetupStage+0x72>
 800a952:	2b02      	cmp	r3, #2
 800a954:	d822      	bhi.n	800a99c <USBD_LL_SetupStage+0x86>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <USBD_LL_SetupStage+0x4a>
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d00a      	beq.n	800a974 <USBD_LL_SetupStage+0x5e>
 800a95e:	e01d      	b.n	800a99c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fb5f 	bl	800b02c <USBD_StdDevReq>
 800a96e:	4603      	mov	r3, r0
 800a970:	73fb      	strb	r3, [r7, #15]
      break;
 800a972:	e020      	b.n	800a9b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fbc7 	bl	800b110 <USBD_StdItfReq>
 800a982:	4603      	mov	r3, r0
 800a984:	73fb      	strb	r3, [r7, #15]
      break;
 800a986:	e016      	b.n	800a9b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fc29 	bl	800b1e8 <USBD_StdEPReq>
 800a996:	4603      	mov	r3, r0
 800a998:	73fb      	strb	r3, [r7, #15]
      break;
 800a99a:	e00c      	b.n	800a9b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a9a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f001 fdfc 	bl	800c5a8 <USBD_LL_StallEP>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b4:	bf00      	nop
  }

  return ret;
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a9d2:	7afb      	ldrb	r3, [r7, #11]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d16e      	bne.n	800aab6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a9de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	f040 8098 	bne.w	800ab1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d913      	bls.n	800aa20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	1ad2      	subs	r2, r2, r3
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	68da      	ldr	r2, [r3, #12]
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	bf28      	it	cs
 800aa12:	4613      	movcs	r3, r2
 800aa14:	461a      	mov	r2, r3
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f001 f984 	bl	800bd26 <USBD_CtlContinueRx>
 800aa1e:	e07d      	b.n	800ab1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa26:	f003 031f 	and.w	r3, r3, #31
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d014      	beq.n	800aa58 <USBD_LL_DataOutStage+0x98>
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d81d      	bhi.n	800aa6e <USBD_LL_DataOutStage+0xae>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d002      	beq.n	800aa3c <USBD_LL_DataOutStage+0x7c>
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d003      	beq.n	800aa42 <USBD_LL_DataOutStage+0x82>
 800aa3a:	e018      	b.n	800aa6e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	75bb      	strb	r3, [r7, #22]
            break;
 800aa40:	e018      	b.n	800aa74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 fa5e 	bl	800af0e <USBD_CoreFindIF>
 800aa52:	4603      	mov	r3, r0
 800aa54:	75bb      	strb	r3, [r7, #22]
            break;
 800aa56:	e00d      	b.n	800aa74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	4619      	mov	r1, r3
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f000 fa60 	bl	800af28 <USBD_CoreFindEP>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	75bb      	strb	r3, [r7, #22]
            break;
 800aa6c:	e002      	b.n	800aa74 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75bb      	strb	r3, [r7, #22]
            break;
 800aa72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aa74:	7dbb      	ldrb	r3, [r7, #22]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d119      	bne.n	800aaae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	d113      	bne.n	800aaae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aa86:	7dba      	ldrb	r2, [r7, #22]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	32ae      	adds	r2, #174	; 0xae
 800aa8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aa96:	7dba      	ldrb	r2, [r7, #22]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aa9e:	7dba      	ldrb	r2, [r7, #22]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	32ae      	adds	r2, #174	; 0xae
 800aaa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f001 f94a 	bl	800bd48 <USBD_CtlSendStatus>
 800aab4:	e032      	b.n	800ab1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aab6:	7afb      	ldrb	r3, [r7, #11]
 800aab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	4619      	mov	r1, r3
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f000 fa31 	bl	800af28 <USBD_CoreFindEP>
 800aac6:	4603      	mov	r3, r0
 800aac8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaca:	7dbb      	ldrb	r3, [r7, #22]
 800aacc:	2bff      	cmp	r3, #255	; 0xff
 800aace:	d025      	beq.n	800ab1c <USBD_LL_DataOutStage+0x15c>
 800aad0:	7dbb      	ldrb	r3, [r7, #22]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d122      	bne.n	800ab1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d117      	bne.n	800ab12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aae2:	7dba      	ldrb	r2, [r7, #22]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	32ae      	adds	r2, #174	; 0xae
 800aae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00f      	beq.n	800ab12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aaf2:	7dba      	ldrb	r2, [r7, #22]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aafa:	7dba      	ldrb	r2, [r7, #22]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	32ae      	adds	r2, #174	; 0xae
 800ab00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	7afa      	ldrb	r2, [r7, #11]
 800ab08:	4611      	mov	r1, r2
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	4798      	blx	r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d001      	beq.n	800ab1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
 800ab1a:	e000      	b.n	800ab1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3718      	adds	r7, #24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b086      	sub	sp, #24
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	60f8      	str	r0, [r7, #12]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	607a      	str	r2, [r7, #4]
 800ab32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ab34:	7afb      	ldrb	r3, [r7, #11]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d16f      	bne.n	800ac1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3314      	adds	r3, #20
 800ab3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d15a      	bne.n	800ac00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	689a      	ldr	r2, [r3, #8]
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d914      	bls.n	800ab80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	689a      	ldr	r2, [r3, #8]
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	1ad2      	subs	r2, r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f001 f8ac 	bl	800bcca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab72:	2300      	movs	r3, #0
 800ab74:	2200      	movs	r2, #0
 800ab76:	2100      	movs	r1, #0
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f001 fdbf 	bl	800c6fc <USBD_LL_PrepareReceive>
 800ab7e:	e03f      	b.n	800ac00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	68da      	ldr	r2, [r3, #12]
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d11c      	bne.n	800abc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d316      	bcc.n	800abc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d20f      	bcs.n	800abc6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aba6:	2200      	movs	r2, #0
 800aba8:	2100      	movs	r1, #0
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f001 f88d 	bl	800bcca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abb8:	2300      	movs	r3, #0
 800abba:	2200      	movs	r2, #0
 800abbc:	2100      	movs	r1, #0
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f001 fd9c 	bl	800c6fc <USBD_LL_PrepareReceive>
 800abc4:	e01c      	b.n	800ac00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d10f      	bne.n	800abf2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d009      	beq.n	800abf2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800abf2:	2180      	movs	r1, #128	; 0x80
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f001 fcd7 	bl	800c5a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f001 f8b7 	bl	800bd6e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d03a      	beq.n	800ac80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f7ff fe42 	bl	800a894 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac18:	e032      	b.n	800ac80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ac1a:	7afb      	ldrb	r3, [r7, #11]
 800ac1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	4619      	mov	r1, r3
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 f97f 	bl	800af28 <USBD_CoreFindEP>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	2bff      	cmp	r3, #255	; 0xff
 800ac32:	d025      	beq.n	800ac80 <USBD_LL_DataInStage+0x15a>
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d122      	bne.n	800ac80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	d11c      	bne.n	800ac80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ac46:	7dfa      	ldrb	r2, [r7, #23]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	32ae      	adds	r2, #174	; 0xae
 800ac4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d014      	beq.n	800ac80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ac56:	7dfa      	ldrb	r2, [r7, #23]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ac5e:	7dfa      	ldrb	r2, [r7, #23]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	32ae      	adds	r2, #174	; 0xae
 800ac64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	7afa      	ldrb	r2, [r7, #11]
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	4798      	blx	r3
 800ac72:	4603      	mov	r3, r0
 800ac74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ac76:	7dbb      	ldrb	r3, [r7, #22]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ac7c:	7dbb      	ldrb	r3, [r7, #22]
 800ac7e:	e000      	b.n	800ac82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d014      	beq.n	800acf0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00e      	beq.n	800acf0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	6852      	ldr	r2, [r2, #4]
 800acde:	b2d2      	uxtb	r2, r2
 800ace0:	4611      	mov	r1, r2
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800acec:	2303      	movs	r3, #3
 800acee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acf0:	2340      	movs	r3, #64	; 0x40
 800acf2:	2200      	movs	r2, #0
 800acf4:	2100      	movs	r1, #0
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 fc11 	bl	800c51e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2240      	movs	r2, #64	; 0x40
 800ad08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad0c:	2340      	movs	r3, #64	; 0x40
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2180      	movs	r1, #128	; 0x80
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 fc03 	bl	800c51e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2240      	movs	r2, #64	; 0x40
 800ad22:	621a      	str	r2, [r3, #32]

  return ret;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b083      	sub	sp, #12
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	460b      	mov	r3, r1
 800ad38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	78fa      	ldrb	r2, [r7, #3]
 800ad3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2204      	movs	r2, #4
 800ad68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	d106      	bne.n	800ad9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d110      	bne.n	800ade0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d005      	beq.n	800ade0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	460b      	mov	r3, r1
 800adf4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	32ae      	adds	r2, #174	; 0xae
 800ae00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e01c      	b.n	800ae46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b03      	cmp	r3, #3
 800ae16:	d115      	bne.n	800ae44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	32ae      	adds	r2, #174	; 0xae
 800ae22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	32ae      	adds	r2, #174	; 0xae
 800ae36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3a:	6a1b      	ldr	r3, [r3, #32]
 800ae3c:	78fa      	ldrb	r2, [r7, #3]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b082      	sub	sp, #8
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	460b      	mov	r3, r1
 800ae58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	32ae      	adds	r2, #174	; 0xae
 800ae64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e01c      	b.n	800aeaa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d115      	bne.n	800aea8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	32ae      	adds	r2, #174	; 0xae
 800ae86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00b      	beq.n	800aea8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	32ae      	adds	r2, #174	; 0xae
 800ae9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	78fa      	ldrb	r2, [r7, #3]
 800aea2:	4611      	mov	r1, r2
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b083      	sub	sp, #12
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00e      	beq.n	800af04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	6852      	ldr	r2, [r2, #4]
 800aef2:	b2d2      	uxtb	r2, r2
 800aef4:	4611      	mov	r1, r2
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	4798      	blx	r3
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800af00:	2303      	movs	r3, #3
 800af02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af04:	7bfb      	ldrb	r3, [r7, #15]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af36:	4618      	mov	r0, r3
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800af56:	2300      	movs	r3, #0
 800af58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	885b      	ldrh	r3, [r3, #2]
 800af5e:	b29a      	uxth	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	b29b      	uxth	r3, r3
 800af66:	429a      	cmp	r2, r3
 800af68:	d920      	bls.n	800afac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	b29b      	uxth	r3, r3
 800af70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800af72:	e013      	b.n	800af9c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800af74:	f107 030a 	add.w	r3, r7, #10
 800af78:	4619      	mov	r1, r3
 800af7a:	6978      	ldr	r0, [r7, #20]
 800af7c:	f000 f81b 	bl	800afb6 <USBD_GetNextDesc>
 800af80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	785b      	ldrb	r3, [r3, #1]
 800af86:	2b05      	cmp	r3, #5
 800af88:	d108      	bne.n	800af9c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	789b      	ldrb	r3, [r3, #2]
 800af92:	78fa      	ldrb	r2, [r7, #3]
 800af94:	429a      	cmp	r2, r3
 800af96:	d008      	beq.n	800afaa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800af98:	2300      	movs	r3, #0
 800af9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	885b      	ldrh	r3, [r3, #2]
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	897b      	ldrh	r3, [r7, #10]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d8e5      	bhi.n	800af74 <USBD_GetEpDesc+0x32>
 800afa8:	e000      	b.n	800afac <USBD_GetEpDesc+0x6a>
          break;
 800afaa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800afac:	693b      	ldr	r3, [r7, #16]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b085      	sub	sp, #20
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	881a      	ldrh	r2, [r3, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	4413      	add	r3, r2
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4413      	add	r3, r2
 800afe0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800afe2:	68fb      	ldr	r3, [r7, #12]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	3301      	adds	r3, #1
 800b006:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b00e:	8a3b      	ldrh	r3, [r7, #16]
 800b010:	021b      	lsls	r3, r3, #8
 800b012:	b21a      	sxth	r2, r3
 800b014:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b018:	4313      	orrs	r3, r2
 800b01a:	b21b      	sxth	r3, r3
 800b01c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b01e:	89fb      	ldrh	r3, [r7, #14]
}
 800b020:	4618      	mov	r0, r3
 800b022:	371c      	adds	r7, #28
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b042:	2b40      	cmp	r3, #64	; 0x40
 800b044:	d005      	beq.n	800b052 <USBD_StdDevReq+0x26>
 800b046:	2b40      	cmp	r3, #64	; 0x40
 800b048:	d857      	bhi.n	800b0fa <USBD_StdDevReq+0xce>
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00f      	beq.n	800b06e <USBD_StdDevReq+0x42>
 800b04e:	2b20      	cmp	r3, #32
 800b050:	d153      	bne.n	800b0fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	32ae      	adds	r2, #174	; 0xae
 800b05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	4798      	blx	r3
 800b068:	4603      	mov	r3, r0
 800b06a:	73fb      	strb	r3, [r7, #15]
      break;
 800b06c:	e04a      	b.n	800b104 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	785b      	ldrb	r3, [r3, #1]
 800b072:	2b09      	cmp	r3, #9
 800b074:	d83b      	bhi.n	800b0ee <USBD_StdDevReq+0xc2>
 800b076:	a201      	add	r2, pc, #4	; (adr r2, 800b07c <USBD_StdDevReq+0x50>)
 800b078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07c:	0800b0d1 	.word	0x0800b0d1
 800b080:	0800b0e5 	.word	0x0800b0e5
 800b084:	0800b0ef 	.word	0x0800b0ef
 800b088:	0800b0db 	.word	0x0800b0db
 800b08c:	0800b0ef 	.word	0x0800b0ef
 800b090:	0800b0af 	.word	0x0800b0af
 800b094:	0800b0a5 	.word	0x0800b0a5
 800b098:	0800b0ef 	.word	0x0800b0ef
 800b09c:	0800b0c7 	.word	0x0800b0c7
 800b0a0:	0800b0b9 	.word	0x0800b0b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fa3c 	bl	800b524 <USBD_GetDescriptor>
          break;
 800b0ac:	e024      	b.n	800b0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fba1 	bl	800b7f8 <USBD_SetAddress>
          break;
 800b0b6:	e01f      	b.n	800b0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fbe0 	bl	800b880 <USBD_SetConfig>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	73fb      	strb	r3, [r7, #15]
          break;
 800b0c4:	e018      	b.n	800b0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 fc83 	bl	800b9d4 <USBD_GetConfig>
          break;
 800b0ce:	e013      	b.n	800b0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fcb4 	bl	800ba40 <USBD_GetStatus>
          break;
 800b0d8:	e00e      	b.n	800b0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fce3 	bl	800baa8 <USBD_SetFeature>
          break;
 800b0e2:	e009      	b.n	800b0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fd07 	bl	800bafa <USBD_ClrFeature>
          break;
 800b0ec:	e004      	b.n	800b0f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fd5e 	bl	800bbb2 <USBD_CtlError>
          break;
 800b0f6:	bf00      	nop
      }
      break;
 800b0f8:	e004      	b.n	800b104 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fd58 	bl	800bbb2 <USBD_CtlError>
      break;
 800b102:	bf00      	nop
  }

  return ret;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop

0800b110 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b126:	2b40      	cmp	r3, #64	; 0x40
 800b128:	d005      	beq.n	800b136 <USBD_StdItfReq+0x26>
 800b12a:	2b40      	cmp	r3, #64	; 0x40
 800b12c:	d852      	bhi.n	800b1d4 <USBD_StdItfReq+0xc4>
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <USBD_StdItfReq+0x26>
 800b132:	2b20      	cmp	r3, #32
 800b134:	d14e      	bne.n	800b1d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	3b01      	subs	r3, #1
 800b140:	2b02      	cmp	r3, #2
 800b142:	d840      	bhi.n	800b1c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	889b      	ldrh	r3, [r3, #4]
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d836      	bhi.n	800b1bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	889b      	ldrh	r3, [r3, #4]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7ff fed9 	bl	800af0e <USBD_CoreFindIF>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2bff      	cmp	r3, #255	; 0xff
 800b164:	d01d      	beq.n	800b1a2 <USBD_StdItfReq+0x92>
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d11a      	bne.n	800b1a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b16c:	7bba      	ldrb	r2, [r7, #14]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	32ae      	adds	r2, #174	; 0xae
 800b172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00f      	beq.n	800b19c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b17c:	7bba      	ldrb	r2, [r7, #14]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b184:	7bba      	ldrb	r2, [r7, #14]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	32ae      	adds	r2, #174	; 0xae
 800b18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	4798      	blx	r3
 800b196:	4603      	mov	r3, r0
 800b198:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b19a:	e004      	b.n	800b1a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b19c:	2303      	movs	r3, #3
 800b19e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b1a0:	e001      	b.n	800b1a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88db      	ldrh	r3, [r3, #6]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d110      	bne.n	800b1d0 <USBD_StdItfReq+0xc0>
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10d      	bne.n	800b1d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fdc7 	bl	800bd48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b1ba:	e009      	b.n	800b1d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fcf7 	bl	800bbb2 <USBD_CtlError>
          break;
 800b1c4:	e004      	b.n	800b1d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fcf2 	bl	800bbb2 <USBD_CtlError>
          break;
 800b1ce:	e000      	b.n	800b1d2 <USBD_StdItfReq+0xc2>
          break;
 800b1d0:	bf00      	nop
      }
      break;
 800b1d2:	e004      	b.n	800b1de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fceb 	bl	800bbb2 <USBD_CtlError>
      break;
 800b1dc:	bf00      	nop
  }

  return ret;
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	889b      	ldrh	r3, [r3, #4]
 800b1fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b204:	2b40      	cmp	r3, #64	; 0x40
 800b206:	d007      	beq.n	800b218 <USBD_StdEPReq+0x30>
 800b208:	2b40      	cmp	r3, #64	; 0x40
 800b20a:	f200 817f 	bhi.w	800b50c <USBD_StdEPReq+0x324>
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d02a      	beq.n	800b268 <USBD_StdEPReq+0x80>
 800b212:	2b20      	cmp	r3, #32
 800b214:	f040 817a 	bne.w	800b50c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b218:	7bbb      	ldrb	r3, [r7, #14]
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff fe83 	bl	800af28 <USBD_CoreFindEP>
 800b222:	4603      	mov	r3, r0
 800b224:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b226:	7b7b      	ldrb	r3, [r7, #13]
 800b228:	2bff      	cmp	r3, #255	; 0xff
 800b22a:	f000 8174 	beq.w	800b516 <USBD_StdEPReq+0x32e>
 800b22e:	7b7b      	ldrb	r3, [r7, #13]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f040 8170 	bne.w	800b516 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b236:	7b7a      	ldrb	r2, [r7, #13]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b23e:	7b7a      	ldrb	r2, [r7, #13]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	32ae      	adds	r2, #174	; 0xae
 800b244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 8163 	beq.w	800b516 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b250:	7b7a      	ldrb	r2, [r7, #13]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	32ae      	adds	r2, #174	; 0xae
 800b256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	4798      	blx	r3
 800b262:	4603      	mov	r3, r0
 800b264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b266:	e156      	b.n	800b516 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	785b      	ldrb	r3, [r3, #1]
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d008      	beq.n	800b282 <USBD_StdEPReq+0x9a>
 800b270:	2b03      	cmp	r3, #3
 800b272:	f300 8145 	bgt.w	800b500 <USBD_StdEPReq+0x318>
 800b276:	2b00      	cmp	r3, #0
 800b278:	f000 809b 	beq.w	800b3b2 <USBD_StdEPReq+0x1ca>
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d03c      	beq.n	800b2fa <USBD_StdEPReq+0x112>
 800b280:	e13e      	b.n	800b500 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d002      	beq.n	800b294 <USBD_StdEPReq+0xac>
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d016      	beq.n	800b2c0 <USBD_StdEPReq+0xd8>
 800b292:	e02c      	b.n	800b2ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00d      	beq.n	800b2b6 <USBD_StdEPReq+0xce>
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
 800b29c:	2b80      	cmp	r3, #128	; 0x80
 800b29e:	d00a      	beq.n	800b2b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f001 f97f 	bl	800c5a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2aa:	2180      	movs	r1, #128	; 0x80
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 f97b 	bl	800c5a8 <USBD_LL_StallEP>
 800b2b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2b4:	e020      	b.n	800b2f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fc7a 	bl	800bbb2 <USBD_CtlError>
              break;
 800b2be:	e01b      	b.n	800b2f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	885b      	ldrh	r3, [r3, #2]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10e      	bne.n	800b2e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2c8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00b      	beq.n	800b2e6 <USBD_StdEPReq+0xfe>
 800b2ce:	7bbb      	ldrb	r3, [r7, #14]
 800b2d0:	2b80      	cmp	r3, #128	; 0x80
 800b2d2:	d008      	beq.n	800b2e6 <USBD_StdEPReq+0xfe>
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	88db      	ldrh	r3, [r3, #6]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d104      	bne.n	800b2e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f001 f961 	bl	800c5a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fd2e 	bl	800bd48 <USBD_CtlSendStatus>

              break;
 800b2ec:	e004      	b.n	800b2f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fc5e 	bl	800bbb2 <USBD_CtlError>
              break;
 800b2f6:	bf00      	nop
          }
          break;
 800b2f8:	e107      	b.n	800b50a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b02      	cmp	r3, #2
 800b304:	d002      	beq.n	800b30c <USBD_StdEPReq+0x124>
 800b306:	2b03      	cmp	r3, #3
 800b308:	d016      	beq.n	800b338 <USBD_StdEPReq+0x150>
 800b30a:	e04b      	b.n	800b3a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b30c:	7bbb      	ldrb	r3, [r7, #14]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00d      	beq.n	800b32e <USBD_StdEPReq+0x146>
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	2b80      	cmp	r3, #128	; 0x80
 800b316:	d00a      	beq.n	800b32e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f001 f943 	bl	800c5a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b322:	2180      	movs	r1, #128	; 0x80
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f001 f93f 	bl	800c5a8 <USBD_LL_StallEP>
 800b32a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b32c:	e040      	b.n	800b3b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fc3e 	bl	800bbb2 <USBD_CtlError>
              break;
 800b336:	e03b      	b.n	800b3b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	885b      	ldrh	r3, [r3, #2]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d136      	bne.n	800b3ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b340:	7bbb      	ldrb	r3, [r7, #14]
 800b342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b346:	2b00      	cmp	r3, #0
 800b348:	d004      	beq.n	800b354 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b34a:	7bbb      	ldrb	r3, [r7, #14]
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f001 f949 	bl	800c5e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fcf7 	bl	800bd48 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7ff fde2 	bl	800af28 <USBD_CoreFindEP>
 800b364:	4603      	mov	r3, r0
 800b366:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b368:	7b7b      	ldrb	r3, [r7, #13]
 800b36a:	2bff      	cmp	r3, #255	; 0xff
 800b36c:	d01f      	beq.n	800b3ae <USBD_StdEPReq+0x1c6>
 800b36e:	7b7b      	ldrb	r3, [r7, #13]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d11c      	bne.n	800b3ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b374:	7b7a      	ldrb	r2, [r7, #13]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b37c:	7b7a      	ldrb	r2, [r7, #13]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	32ae      	adds	r2, #174	; 0xae
 800b382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d010      	beq.n	800b3ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b38c:	7b7a      	ldrb	r2, [r7, #13]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	32ae      	adds	r2, #174	; 0xae
 800b392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	4798      	blx	r3
 800b39e:	4603      	mov	r3, r0
 800b3a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b3a2:	e004      	b.n	800b3ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fc03 	bl	800bbb2 <USBD_CtlError>
              break;
 800b3ac:	e000      	b.n	800b3b0 <USBD_StdEPReq+0x1c8>
              break;
 800b3ae:	bf00      	nop
          }
          break;
 800b3b0:	e0ab      	b.n	800b50a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d002      	beq.n	800b3c4 <USBD_StdEPReq+0x1dc>
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d032      	beq.n	800b428 <USBD_StdEPReq+0x240>
 800b3c2:	e097      	b.n	800b4f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d007      	beq.n	800b3da <USBD_StdEPReq+0x1f2>
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
 800b3cc:	2b80      	cmp	r3, #128	; 0x80
 800b3ce:	d004      	beq.n	800b3da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fbed 	bl	800bbb2 <USBD_CtlError>
                break;
 800b3d8:	e091      	b.n	800b4fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	da0b      	bge.n	800b3fa <USBD_StdEPReq+0x212>
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
 800b3e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3e8:	4613      	mov	r3, r2
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	4413      	add	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	3310      	adds	r3, #16
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	3304      	adds	r3, #4
 800b3f8:	e00b      	b.n	800b412 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3fa:	7bbb      	ldrb	r3, [r7, #14]
 800b3fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b400:	4613      	mov	r3, r2
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	4413      	add	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	4413      	add	r3, r2
 800b410:	3304      	adds	r3, #4
 800b412:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2202      	movs	r2, #2
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fc37 	bl	800bc94 <USBD_CtlSendData>
              break;
 800b426:	e06a      	b.n	800b4fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	da11      	bge.n	800b454 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	f003 020f 	and.w	r2, r3, #15
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	4613      	mov	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	3324      	adds	r3, #36	; 0x24
 800b444:	881b      	ldrh	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d117      	bne.n	800b47a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fbb0 	bl	800bbb2 <USBD_CtlError>
                  break;
 800b452:	e054      	b.n	800b4fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	f003 020f 	and.w	r2, r3, #15
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	440b      	add	r3, r1
 800b466:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b46a:	881b      	ldrh	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d104      	bne.n	800b47a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b470:	6839      	ldr	r1, [r7, #0]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fb9d 	bl	800bbb2 <USBD_CtlError>
                  break;
 800b478:	e041      	b.n	800b4fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b47a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	da0b      	bge.n	800b49a <USBD_StdEPReq+0x2b2>
 800b482:	7bbb      	ldrb	r3, [r7, #14]
 800b484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	3310      	adds	r3, #16
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	4413      	add	r3, r2
 800b496:	3304      	adds	r3, #4
 800b498:	e00b      	b.n	800b4b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b4b4:	7bbb      	ldrb	r3, [r7, #14]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <USBD_StdEPReq+0x2d8>
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
 800b4bc:	2b80      	cmp	r3, #128	; 0x80
 800b4be:	d103      	bne.n	800b4c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	e00e      	b.n	800b4e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f001 f8a9 	bl	800c624 <USBD_LL_IsStallEP>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d003      	beq.n	800b4e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	e002      	b.n	800b4e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fbd1 	bl	800bc94 <USBD_CtlSendData>
              break;
 800b4f2:	e004      	b.n	800b4fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fb5b 	bl	800bbb2 <USBD_CtlError>
              break;
 800b4fc:	bf00      	nop
          }
          break;
 800b4fe:	e004      	b.n	800b50a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fb55 	bl	800bbb2 <USBD_CtlError>
          break;
 800b508:	bf00      	nop
      }
      break;
 800b50a:	e005      	b.n	800b518 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fb4f 	bl	800bbb2 <USBD_CtlError>
      break;
 800b514:	e000      	b.n	800b518 <USBD_StdEPReq+0x330>
      break;
 800b516:	bf00      	nop
  }

  return ret;
 800b518:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
	...

0800b524 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b52e:	2300      	movs	r3, #0
 800b530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b536:	2300      	movs	r3, #0
 800b538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	885b      	ldrh	r3, [r3, #2]
 800b53e:	0a1b      	lsrs	r3, r3, #8
 800b540:	b29b      	uxth	r3, r3
 800b542:	3b01      	subs	r3, #1
 800b544:	2b06      	cmp	r3, #6
 800b546:	f200 8128 	bhi.w	800b79a <USBD_GetDescriptor+0x276>
 800b54a:	a201      	add	r2, pc, #4	; (adr r2, 800b550 <USBD_GetDescriptor+0x2c>)
 800b54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b550:	0800b56d 	.word	0x0800b56d
 800b554:	0800b585 	.word	0x0800b585
 800b558:	0800b5c5 	.word	0x0800b5c5
 800b55c:	0800b79b 	.word	0x0800b79b
 800b560:	0800b79b 	.word	0x0800b79b
 800b564:	0800b73b 	.word	0x0800b73b
 800b568:	0800b767 	.word	0x0800b767
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	7c12      	ldrb	r2, [r2, #16]
 800b578:	f107 0108 	add.w	r1, r7, #8
 800b57c:	4610      	mov	r0, r2
 800b57e:	4798      	blx	r3
 800b580:	60f8      	str	r0, [r7, #12]
      break;
 800b582:	e112      	b.n	800b7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	7c1b      	ldrb	r3, [r3, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10d      	bne.n	800b5a8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b594:	f107 0208 	add.w	r2, r7, #8
 800b598:	4610      	mov	r0, r2
 800b59a:	4798      	blx	r3
 800b59c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b5a6:	e100      	b.n	800b7aa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	f107 0208 	add.w	r2, r7, #8
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	4798      	blx	r3
 800b5b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	2202      	movs	r2, #2
 800b5c0:	701a      	strb	r2, [r3, #0]
      break;
 800b5c2:	e0f2      	b.n	800b7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	885b      	ldrh	r3, [r3, #2]
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b05      	cmp	r3, #5
 800b5cc:	f200 80ac 	bhi.w	800b728 <USBD_GetDescriptor+0x204>
 800b5d0:	a201      	add	r2, pc, #4	; (adr r2, 800b5d8 <USBD_GetDescriptor+0xb4>)
 800b5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d6:	bf00      	nop
 800b5d8:	0800b5f1 	.word	0x0800b5f1
 800b5dc:	0800b625 	.word	0x0800b625
 800b5e0:	0800b659 	.word	0x0800b659
 800b5e4:	0800b68d 	.word	0x0800b68d
 800b5e8:	0800b6c1 	.word	0x0800b6c1
 800b5ec:	0800b6f5 	.word	0x0800b6f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00b      	beq.n	800b614 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	7c12      	ldrb	r2, [r2, #16]
 800b608:	f107 0108 	add.w	r1, r7, #8
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
 800b610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b612:	e091      	b.n	800b738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 facb 	bl	800bbb2 <USBD_CtlError>
            err++;
 800b61c:	7afb      	ldrb	r3, [r7, #11]
 800b61e:	3301      	adds	r3, #1
 800b620:	72fb      	strb	r3, [r7, #11]
          break;
 800b622:	e089      	b.n	800b738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00b      	beq.n	800b648 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	7c12      	ldrb	r2, [r2, #16]
 800b63c:	f107 0108 	add.w	r1, r7, #8
 800b640:	4610      	mov	r0, r2
 800b642:	4798      	blx	r3
 800b644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b646:	e077      	b.n	800b738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fab1 	bl	800bbb2 <USBD_CtlError>
            err++;
 800b650:	7afb      	ldrb	r3, [r7, #11]
 800b652:	3301      	adds	r3, #1
 800b654:	72fb      	strb	r3, [r7, #11]
          break;
 800b656:	e06f      	b.n	800b738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00b      	beq.n	800b67c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	7c12      	ldrb	r2, [r2, #16]
 800b670:	f107 0108 	add.w	r1, r7, #8
 800b674:	4610      	mov	r0, r2
 800b676:	4798      	blx	r3
 800b678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b67a:	e05d      	b.n	800b738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fa97 	bl	800bbb2 <USBD_CtlError>
            err++;
 800b684:	7afb      	ldrb	r3, [r7, #11]
 800b686:	3301      	adds	r3, #1
 800b688:	72fb      	strb	r3, [r7, #11]
          break;
 800b68a:	e055      	b.n	800b738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d00b      	beq.n	800b6b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	7c12      	ldrb	r2, [r2, #16]
 800b6a4:	f107 0108 	add.w	r1, r7, #8
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	4798      	blx	r3
 800b6ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6ae:	e043      	b.n	800b738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fa7d 	bl	800bbb2 <USBD_CtlError>
            err++;
 800b6b8:	7afb      	ldrb	r3, [r7, #11]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b6be:	e03b      	b.n	800b738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00b      	beq.n	800b6e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	7c12      	ldrb	r2, [r2, #16]
 800b6d8:	f107 0108 	add.w	r1, r7, #8
 800b6dc:	4610      	mov	r0, r2
 800b6de:	4798      	blx	r3
 800b6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6e2:	e029      	b.n	800b738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fa63 	bl	800bbb2 <USBD_CtlError>
            err++;
 800b6ec:	7afb      	ldrb	r3, [r7, #11]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6f2:	e021      	b.n	800b738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00b      	beq.n	800b718 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	7c12      	ldrb	r2, [r2, #16]
 800b70c:	f107 0108 	add.w	r1, r7, #8
 800b710:	4610      	mov	r0, r2
 800b712:	4798      	blx	r3
 800b714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b716:	e00f      	b.n	800b738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 fa49 	bl	800bbb2 <USBD_CtlError>
            err++;
 800b720:	7afb      	ldrb	r3, [r7, #11]
 800b722:	3301      	adds	r3, #1
 800b724:	72fb      	strb	r3, [r7, #11]
          break;
 800b726:	e007      	b.n	800b738 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fa41 	bl	800bbb2 <USBD_CtlError>
          err++;
 800b730:	7afb      	ldrb	r3, [r7, #11]
 800b732:	3301      	adds	r3, #1
 800b734:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b736:	bf00      	nop
      }
      break;
 800b738:	e037      	b.n	800b7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	7c1b      	ldrb	r3, [r3, #16]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d109      	bne.n	800b756 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74a:	f107 0208 	add.w	r2, r7, #8
 800b74e:	4610      	mov	r0, r2
 800b750:	4798      	blx	r3
 800b752:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b754:	e029      	b.n	800b7aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 fa2a 	bl	800bbb2 <USBD_CtlError>
        err++;
 800b75e:	7afb      	ldrb	r3, [r7, #11]
 800b760:	3301      	adds	r3, #1
 800b762:	72fb      	strb	r3, [r7, #11]
      break;
 800b764:	e021      	b.n	800b7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7c1b      	ldrb	r3, [r3, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10d      	bne.n	800b78a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b776:	f107 0208 	add.w	r2, r7, #8
 800b77a:	4610      	mov	r0, r2
 800b77c:	4798      	blx	r3
 800b77e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3301      	adds	r3, #1
 800b784:	2207      	movs	r2, #7
 800b786:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b788:	e00f      	b.n	800b7aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fa10 	bl	800bbb2 <USBD_CtlError>
        err++;
 800b792:	7afb      	ldrb	r3, [r7, #11]
 800b794:	3301      	adds	r3, #1
 800b796:	72fb      	strb	r3, [r7, #11]
      break;
 800b798:	e007      	b.n	800b7aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fa08 	bl	800bbb2 <USBD_CtlError>
      err++;
 800b7a2:	7afb      	ldrb	r3, [r7, #11]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	72fb      	strb	r3, [r7, #11]
      break;
 800b7a8:	bf00      	nop
  }

  if (err != 0U)
 800b7aa:	7afb      	ldrb	r3, [r7, #11]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d11e      	bne.n	800b7ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	88db      	ldrh	r3, [r3, #6]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d016      	beq.n	800b7e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b7b8:	893b      	ldrh	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00e      	beq.n	800b7dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	88da      	ldrh	r2, [r3, #6]
 800b7c2:	893b      	ldrh	r3, [r7, #8]
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	bf28      	it	cs
 800b7c8:	4613      	movcs	r3, r2
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7ce:	893b      	ldrh	r3, [r7, #8]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	68f9      	ldr	r1, [r7, #12]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fa5d 	bl	800bc94 <USBD_CtlSendData>
 800b7da:	e009      	b.n	800b7f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f9e7 	bl	800bbb2 <USBD_CtlError>
 800b7e4:	e004      	b.n	800b7f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 faae 	bl	800bd48 <USBD_CtlSendStatus>
 800b7ec:	e000      	b.n	800b7f0 <USBD_GetDescriptor+0x2cc>
    return;
 800b7ee:	bf00      	nop
  }
}
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop

0800b7f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	889b      	ldrh	r3, [r3, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d131      	bne.n	800b86e <USBD_SetAddress+0x76>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	88db      	ldrh	r3, [r3, #6]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d12d      	bne.n	800b86e <USBD_SetAddress+0x76>
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	885b      	ldrh	r3, [r3, #2]
 800b816:	2b7f      	cmp	r3, #127	; 0x7f
 800b818:	d829      	bhi.n	800b86e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	885b      	ldrh	r3, [r3, #2]
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b824:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d104      	bne.n	800b83c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f9bc 	bl	800bbb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83a:	e01d      	b.n	800b878 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	7bfa      	ldrb	r2, [r7, #15]
 800b840:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b844:	7bfb      	ldrb	r3, [r7, #15]
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 ff17 	bl	800c67c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fa7a 	bl	800bd48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b854:	7bfb      	ldrb	r3, [r7, #15]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d004      	beq.n	800b864 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2202      	movs	r2, #2
 800b85e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b862:	e009      	b.n	800b878 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b86c:	e004      	b.n	800b878 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f99e 	bl	800bbb2 <USBD_CtlError>
  }
}
 800b876:	bf00      	nop
 800b878:	bf00      	nop
 800b87a:	3710      	adds	r7, #16
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b88a:	2300      	movs	r3, #0
 800b88c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	885b      	ldrh	r3, [r3, #2]
 800b892:	b2da      	uxtb	r2, r3
 800b894:	4b4e      	ldr	r3, [pc, #312]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b896:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b898:	4b4d      	ldr	r3, [pc, #308]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d905      	bls.n	800b8ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f985 	bl	800bbb2 <USBD_CtlError>
    return USBD_FAIL;
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	e08c      	b.n	800b9c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d002      	beq.n	800b8be <USBD_SetConfig+0x3e>
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d029      	beq.n	800b910 <USBD_SetConfig+0x90>
 800b8bc:	e075      	b.n	800b9aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b8be:	4b44      	ldr	r3, [pc, #272]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d020      	beq.n	800b908 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b8c6:	4b42      	ldr	r3, [pc, #264]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8d0:	4b3f      	ldr	r3, [pc, #252]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7fe ffe7 	bl	800a8aa <USBD_SetClassConfig>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d008      	beq.n	800b8f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 f962 	bl	800bbb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8f6:	e065      	b.n	800b9c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fa25 	bl	800bd48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2203      	movs	r2, #3
 800b902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b906:	e05d      	b.n	800b9c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fa1d 	bl	800bd48 <USBD_CtlSendStatus>
      break;
 800b90e:	e059      	b.n	800b9c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b910:	4b2f      	ldr	r3, [pc, #188]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d112      	bne.n	800b93e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2202      	movs	r2, #2
 800b91c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b920:	4b2b      	ldr	r3, [pc, #172]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	461a      	mov	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b92a:	4b29      	ldr	r3, [pc, #164]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	4619      	mov	r1, r3
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f7fe ffd6 	bl	800a8e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 fa06 	bl	800bd48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b93c:	e042      	b.n	800b9c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b93e:	4b24      	ldr	r3, [pc, #144]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d02a      	beq.n	800b9a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	b2db      	uxtb	r3, r3
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7fe ffc4 	bl	800a8e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b95a:	4b1d      	ldr	r3, [pc, #116]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	461a      	mov	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b964:	4b1a      	ldr	r3, [pc, #104]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7fe ff9d 	bl	800a8aa <USBD_SetClassConfig>
 800b970:	4603      	mov	r3, r0
 800b972:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b974:	7bfb      	ldrb	r3, [r7, #15]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00f      	beq.n	800b99a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f918 	bl	800bbb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	b2db      	uxtb	r3, r3
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7fe ffa9 	bl	800a8e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2202      	movs	r2, #2
 800b994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b998:	e014      	b.n	800b9c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f9d4 	bl	800bd48 <USBD_CtlSendStatus>
      break;
 800b9a0:	e010      	b.n	800b9c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f9d0 	bl	800bd48 <USBD_CtlSendStatus>
      break;
 800b9a8:	e00c      	b.n	800b9c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 f900 	bl	800bbb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9b2:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <USBD_SetConfig+0x150>)
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f7fe ff92 	bl	800a8e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c2:	bf00      	nop
  }

  return ret;
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20001ba8 	.word	0x20001ba8

0800b9d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	88db      	ldrh	r3, [r3, #6]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d004      	beq.n	800b9f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f8e2 	bl	800bbb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b9ee:	e023      	b.n	800ba38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	dc02      	bgt.n	800ba02 <USBD_GetConfig+0x2e>
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dc03      	bgt.n	800ba08 <USBD_GetConfig+0x34>
 800ba00:	e015      	b.n	800ba2e <USBD_GetConfig+0x5a>
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d00b      	beq.n	800ba1e <USBD_GetConfig+0x4a>
 800ba06:	e012      	b.n	800ba2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	3308      	adds	r3, #8
 800ba12:	2201      	movs	r2, #1
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f93c 	bl	800bc94 <USBD_CtlSendData>
        break;
 800ba1c:	e00c      	b.n	800ba38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3304      	adds	r3, #4
 800ba22:	2201      	movs	r2, #1
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f934 	bl	800bc94 <USBD_CtlSendData>
        break;
 800ba2c:	e004      	b.n	800ba38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f8be 	bl	800bbb2 <USBD_CtlError>
        break;
 800ba36:	bf00      	nop
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	3b01      	subs	r3, #1
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d81e      	bhi.n	800ba96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	88db      	ldrh	r3, [r3, #6]
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d004      	beq.n	800ba6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f8a5 	bl	800bbb2 <USBD_CtlError>
        break;
 800ba68:	e01a      	b.n	800baa0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d005      	beq.n	800ba86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	f043 0202 	orr.w	r2, r3, #2
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	330c      	adds	r3, #12
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f900 	bl	800bc94 <USBD_CtlSendData>
      break;
 800ba94:	e004      	b.n	800baa0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f88a 	bl	800bbb2 <USBD_CtlError>
      break;
 800ba9e:	bf00      	nop
  }
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	885b      	ldrh	r3, [r3, #2]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d107      	bne.n	800baca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f940 	bl	800bd48 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bac8:	e013      	b.n	800baf2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	885b      	ldrh	r3, [r3, #2]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d10b      	bne.n	800baea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	889b      	ldrh	r3, [r3, #4]
 800bad6:	0a1b      	lsrs	r3, r3, #8
 800bad8:	b29b      	uxth	r3, r3
 800bada:	b2da      	uxtb	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 f930 	bl	800bd48 <USBD_CtlSendStatus>
}
 800bae8:	e003      	b.n	800baf2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f860 	bl	800bbb2 <USBD_CtlError>
}
 800baf2:	bf00      	nop
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d80b      	bhi.n	800bb2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	885b      	ldrh	r3, [r3, #2]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d10c      	bne.n	800bb34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f910 	bl	800bd48 <USBD_CtlSendStatus>
      }
      break;
 800bb28:	e004      	b.n	800bb34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f840 	bl	800bbb2 <USBD_CtlError>
      break;
 800bb32:	e000      	b.n	800bb36 <USBD_ClrFeature+0x3c>
      break;
 800bb34:	bf00      	nop
  }
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	781a      	ldrb	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3301      	adds	r3, #1
 800bb58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	781a      	ldrb	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3301      	adds	r3, #1
 800bb66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f7ff fa41 	bl	800aff0 <SWAPBYTE>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	461a      	mov	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f7ff fa34 	bl	800aff0 <SWAPBYTE>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3301      	adds	r3, #1
 800bb94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff fa27 	bl	800aff0 <SWAPBYTE>
 800bba2:	4603      	mov	r3, r0
 800bba4:	461a      	mov	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	80da      	strh	r2, [r3, #6]
}
 800bbaa:	bf00      	nop
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbbc:	2180      	movs	r1, #128	; 0x80
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fcf2 	bl	800c5a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fcee 	bl	800c5a8 <USBD_LL_StallEP>
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d036      	beq.n	800bc58 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bbee:	6938      	ldr	r0, [r7, #16]
 800bbf0:	f000 f836 	bl	800bc60 <USBD_GetLen>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	4413      	add	r3, r2
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	7812      	ldrb	r2, [r2, #0]
 800bc0c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc0e:	7dfb      	ldrb	r3, [r7, #23]
 800bc10:	3301      	adds	r3, #1
 800bc12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bc14:	7dfb      	ldrb	r3, [r7, #23]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	4413      	add	r3, r2
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc1e:	7dfb      	ldrb	r3, [r7, #23]
 800bc20:	3301      	adds	r3, #1
 800bc22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bc24:	e013      	b.n	800bc4e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bc26:	7dfb      	ldrb	r3, [r7, #23]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	7812      	ldrb	r2, [r2, #0]
 800bc30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	3301      	adds	r3, #1
 800bc36:	613b      	str	r3, [r7, #16]
    idx++;
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	4413      	add	r3, r2
 800bc44:	2200      	movs	r2, #0
 800bc46:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1e7      	bne.n	800bc26 <USBD_GetString+0x52>
 800bc56:	e000      	b.n	800bc5a <USBD_GetString+0x86>
    return;
 800bc58:	bf00      	nop
  }
}
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc70:	e005      	b.n	800bc7e <USBD_GetLen+0x1e>
  {
    len++;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
 800bc74:	3301      	adds	r3, #1
 800bc76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1f5      	bne.n	800bc72 <USBD_GetLen+0x12>
  }

  return len;
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3714      	adds	r7, #20
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	2100      	movs	r1, #0
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 fcfd 	bl	800c6ba <USBD_LL_Transmit>

  return USBD_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	60f8      	str	r0, [r7, #12]
 800bcd2:	60b9      	str	r1, [r7, #8]
 800bcd4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	2100      	movs	r1, #0
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 fcec 	bl	800c6ba <USBD_LL_Transmit>

  return USBD_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	2100      	movs	r1, #0
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f000 fcf0 	bl	800c6fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	60f8      	str	r0, [r7, #12]
 800bd2e:	60b9      	str	r1, [r7, #8]
 800bd30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	2100      	movs	r1, #0
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f000 fcdf 	bl	800c6fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2204      	movs	r2, #4
 800bd54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd58:	2300      	movs	r3, #0
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fcab 	bl	800c6ba <USBD_LL_Transmit>

  return USBD_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b082      	sub	sp, #8
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2205      	movs	r2, #5
 800bd7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd7e:	2300      	movs	r3, #0
 800bd80:	2200      	movs	r2, #0
 800bd82:	2100      	movs	r1, #0
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fcb9 	bl	800c6fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	4912      	ldr	r1, [pc, #72]	; (800bde4 <MX_USB_DEVICE_Init+0x50>)
 800bd9c:	4812      	ldr	r0, [pc, #72]	; (800bde8 <MX_USB_DEVICE_Init+0x54>)
 800bd9e:	f7fe fd07 	bl	800a7b0 <USBD_Init>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d001      	beq.n	800bdac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bda8:	f7f5 fe1e 	bl	80019e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bdac:	490f      	ldr	r1, [pc, #60]	; (800bdec <MX_USB_DEVICE_Init+0x58>)
 800bdae:	480e      	ldr	r0, [pc, #56]	; (800bde8 <MX_USB_DEVICE_Init+0x54>)
 800bdb0:	f7fe fd2e 	bl	800a810 <USBD_RegisterClass>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d001      	beq.n	800bdbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bdba:	f7f5 fe15 	bl	80019e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bdbe:	490c      	ldr	r1, [pc, #48]	; (800bdf0 <MX_USB_DEVICE_Init+0x5c>)
 800bdc0:	4809      	ldr	r0, [pc, #36]	; (800bde8 <MX_USB_DEVICE_Init+0x54>)
 800bdc2:	f7fe fc2b 	bl	800a61c <USBD_CDC_RegisterInterface>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bdcc:	f7f5 fe0c 	bl	80019e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bdd0:	4805      	ldr	r0, [pc, #20]	; (800bde8 <MX_USB_DEVICE_Init+0x54>)
 800bdd2:	f7fe fd53 	bl	800a87c <USBD_Start>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bddc:	f7f5 fe04 	bl	80019e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bde0:	bf00      	nop
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	20000130 	.word	0x20000130
 800bde8:	20001bac 	.word	0x20001bac
 800bdec:	2000009c 	.word	0x2000009c
 800bdf0:	2000011c 	.word	0x2000011c

0800bdf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	4905      	ldr	r1, [pc, #20]	; (800be10 <CDC_Init_FS+0x1c>)
 800bdfc:	4805      	ldr	r0, [pc, #20]	; (800be14 <CDC_Init_FS+0x20>)
 800bdfe:	f7fe fc27 	bl	800a650 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800be02:	4905      	ldr	r1, [pc, #20]	; (800be18 <CDC_Init_FS+0x24>)
 800be04:	4803      	ldr	r0, [pc, #12]	; (800be14 <CDC_Init_FS+0x20>)
 800be06:	f7fe fc43 	bl	800a690 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800be0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	20002688 	.word	0x20002688
 800be14:	20001bac 	.word	0x20001bac
 800be18:	20001e88 	.word	0x20001e88

0800be1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800be1c:	b480      	push	{r7}
 800be1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800be20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800be22:	4618      	mov	r0, r3
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	4603      	mov	r3, r0
 800be34:	6039      	str	r1, [r7, #0]
 800be36:	71fb      	strb	r3, [r7, #7]
 800be38:	4613      	mov	r3, r2
 800be3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800be3c:	79fb      	ldrb	r3, [r7, #7]
 800be3e:	2b23      	cmp	r3, #35	; 0x23
 800be40:	d84a      	bhi.n	800bed8 <CDC_Control_FS+0xac>
 800be42:	a201      	add	r2, pc, #4	; (adr r2, 800be48 <CDC_Control_FS+0x1c>)
 800be44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be48:	0800bed9 	.word	0x0800bed9
 800be4c:	0800bed9 	.word	0x0800bed9
 800be50:	0800bed9 	.word	0x0800bed9
 800be54:	0800bed9 	.word	0x0800bed9
 800be58:	0800bed9 	.word	0x0800bed9
 800be5c:	0800bed9 	.word	0x0800bed9
 800be60:	0800bed9 	.word	0x0800bed9
 800be64:	0800bed9 	.word	0x0800bed9
 800be68:	0800bed9 	.word	0x0800bed9
 800be6c:	0800bed9 	.word	0x0800bed9
 800be70:	0800bed9 	.word	0x0800bed9
 800be74:	0800bed9 	.word	0x0800bed9
 800be78:	0800bed9 	.word	0x0800bed9
 800be7c:	0800bed9 	.word	0x0800bed9
 800be80:	0800bed9 	.word	0x0800bed9
 800be84:	0800bed9 	.word	0x0800bed9
 800be88:	0800bed9 	.word	0x0800bed9
 800be8c:	0800bed9 	.word	0x0800bed9
 800be90:	0800bed9 	.word	0x0800bed9
 800be94:	0800bed9 	.word	0x0800bed9
 800be98:	0800bed9 	.word	0x0800bed9
 800be9c:	0800bed9 	.word	0x0800bed9
 800bea0:	0800bed9 	.word	0x0800bed9
 800bea4:	0800bed9 	.word	0x0800bed9
 800bea8:	0800bed9 	.word	0x0800bed9
 800beac:	0800bed9 	.word	0x0800bed9
 800beb0:	0800bed9 	.word	0x0800bed9
 800beb4:	0800bed9 	.word	0x0800bed9
 800beb8:	0800bed9 	.word	0x0800bed9
 800bebc:	0800bed9 	.word	0x0800bed9
 800bec0:	0800bed9 	.word	0x0800bed9
 800bec4:	0800bed9 	.word	0x0800bed9
 800bec8:	0800bed9 	.word	0x0800bed9
 800becc:	0800bed9 	.word	0x0800bed9
 800bed0:	0800bed9 	.word	0x0800bed9
 800bed4:	0800bed9 	.word	0x0800bed9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bed8:	bf00      	nop
  }

  return (USBD_OK);
 800beda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bedc:	4618      	mov	r0, r3
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bef2:	6879      	ldr	r1, [r7, #4]
 800bef4:	4810      	ldr	r0, [pc, #64]	; (800bf38 <CDC_Receive_FS+0x50>)
 800bef6:	f7fe fbcb 	bl	800a690 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800befa:	480f      	ldr	r0, [pc, #60]	; (800bf38 <CDC_Receive_FS+0x50>)
 800befc:	f7fe fc24 	bl	800a748 <USBD_CDC_ReceivePacket>

  memset (USB_RX_BUFF, '\0', 64);  // clear the buffer
 800bf00:	2240      	movs	r2, #64	; 0x40
 800bf02:	2100      	movs	r1, #0
 800bf04:	480d      	ldr	r0, [pc, #52]	; (800bf3c <CDC_Receive_FS+0x54>)
 800bf06:	f000 fca9 	bl	800c85c <memset>
  uint8_t len = (uint8_t)*Len;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	73fb      	strb	r3, [r7, #15]
  memcpy(USB_RX_BUFF, Buf, len);  // copy the data to the buffer
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	461a      	mov	r2, r3
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	4809      	ldr	r0, [pc, #36]	; (800bf3c <CDC_Receive_FS+0x54>)
 800bf18:	f000 fc92 	bl	800c840 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	2100      	movs	r1, #0
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fc9a 	bl	800c85c <memset>
  USB_RX_BYTES_RECEIVED = len;
 800bf28:	4a05      	ldr	r2, [pc, #20]	; (800bf40 <CDC_Receive_FS+0x58>)
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	7013      	strb	r3, [r2, #0]
  return (USBD_OK);
 800bf2e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	20001bac 	.word	0x20001bac
 800bf3c:	200016a4 	.word	0x200016a4
 800bf40:	200016e4 	.word	0x200016e4

0800bf44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bf54:	4b09      	ldr	r3, [pc, #36]	; (800bf7c <CDC_Transmit_FS+0x38>)
 800bf56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf5a:	60bb      	str	r3, [r7, #8]
//  if (hcdc->TxState != 0){
//    return USBD_BUSY;
//  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bf5c:	887b      	ldrh	r3, [r7, #2]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	6879      	ldr	r1, [r7, #4]
 800bf62:	4806      	ldr	r0, [pc, #24]	; (800bf7c <CDC_Transmit_FS+0x38>)
 800bf64:	f7fe fb74 	bl	800a650 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bf68:	4804      	ldr	r0, [pc, #16]	; (800bf7c <CDC_Transmit_FS+0x38>)
 800bf6a:	f7fe fbad 	bl	800a6c8 <USBD_CDC_TransmitPacket>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	20001bac 	.word	0x20001bac

0800bf80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b087      	sub	sp, #28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bf92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	371c      	adds	r7, #28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
	...

0800bfa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	4603      	mov	r3, r0
 800bfac:	6039      	str	r1, [r7, #0]
 800bfae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2212      	movs	r2, #18
 800bfb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bfb6:	4b03      	ldr	r3, [pc, #12]	; (800bfc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr
 800bfc4:	2000014c 	.word	0x2000014c

0800bfc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	4603      	mov	r3, r0
 800bfd0:	6039      	str	r1, [r7, #0]
 800bfd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	2204      	movs	r2, #4
 800bfd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bfda:	4b03      	ldr	r3, [pc, #12]	; (800bfe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	20000160 	.word	0x20000160

0800bfec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	4603      	mov	r3, r0
 800bff4:	6039      	str	r1, [r7, #0]
 800bff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bff8:	79fb      	ldrb	r3, [r7, #7]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d105      	bne.n	800c00a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	4907      	ldr	r1, [pc, #28]	; (800c020 <USBD_FS_ProductStrDescriptor+0x34>)
 800c002:	4808      	ldr	r0, [pc, #32]	; (800c024 <USBD_FS_ProductStrDescriptor+0x38>)
 800c004:	f7ff fde6 	bl	800bbd4 <USBD_GetString>
 800c008:	e004      	b.n	800c014 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	4904      	ldr	r1, [pc, #16]	; (800c020 <USBD_FS_ProductStrDescriptor+0x34>)
 800c00e:	4805      	ldr	r0, [pc, #20]	; (800c024 <USBD_FS_ProductStrDescriptor+0x38>)
 800c010:	f7ff fde0 	bl	800bbd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c014:	4b02      	ldr	r3, [pc, #8]	; (800c020 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	20002e88 	.word	0x20002e88
 800c024:	0800d1f4 	.word	0x0800d1f4

0800c028 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	4603      	mov	r3, r0
 800c030:	6039      	str	r1, [r7, #0]
 800c032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	4904      	ldr	r1, [pc, #16]	; (800c048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c038:	4804      	ldr	r0, [pc, #16]	; (800c04c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c03a:	f7ff fdcb 	bl	800bbd4 <USBD_GetString>
  return USBD_StrDesc;
 800c03e:	4b02      	ldr	r3, [pc, #8]	; (800c048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c040:	4618      	mov	r0, r3
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	20002e88 	.word	0x20002e88
 800c04c:	0800d20c 	.word	0x0800d20c

0800c050 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	4603      	mov	r3, r0
 800c058:	6039      	str	r1, [r7, #0]
 800c05a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	221a      	movs	r2, #26
 800c060:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c062:	f000 f843 	bl	800c0ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c066:	4b02      	ldr	r3, [pc, #8]	; (800c070 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	20000164 	.word	0x20000164

0800c074 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	6039      	str	r1, [r7, #0]
 800c07e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c080:	79fb      	ldrb	r3, [r7, #7]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d105      	bne.n	800c092 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	4907      	ldr	r1, [pc, #28]	; (800c0a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c08a:	4808      	ldr	r0, [pc, #32]	; (800c0ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800c08c:	f7ff fda2 	bl	800bbd4 <USBD_GetString>
 800c090:	e004      	b.n	800c09c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	4904      	ldr	r1, [pc, #16]	; (800c0a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c096:	4805      	ldr	r0, [pc, #20]	; (800c0ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800c098:	f7ff fd9c 	bl	800bbd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c09c:	4b02      	ldr	r3, [pc, #8]	; (800c0a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20002e88 	.word	0x20002e88
 800c0ac:	0800d220 	.word	0x0800d220

0800c0b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	6039      	str	r1, [r7, #0]
 800c0ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d105      	bne.n	800c0ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	4907      	ldr	r1, [pc, #28]	; (800c0e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c0c6:	4808      	ldr	r0, [pc, #32]	; (800c0e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c0c8:	f7ff fd84 	bl	800bbd4 <USBD_GetString>
 800c0cc:	e004      	b.n	800c0d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	4904      	ldr	r1, [pc, #16]	; (800c0e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c0d2:	4805      	ldr	r0, [pc, #20]	; (800c0e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c0d4:	f7ff fd7e 	bl	800bbd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0d8:	4b02      	ldr	r3, [pc, #8]	; (800c0e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20002e88 	.word	0x20002e88
 800c0e8:	0800d22c 	.word	0x0800d22c

0800c0ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c0f2:	4b0f      	ldr	r3, [pc, #60]	; (800c130 <Get_SerialNum+0x44>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c0f8:	4b0e      	ldr	r3, [pc, #56]	; (800c134 <Get_SerialNum+0x48>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c0fe:	4b0e      	ldr	r3, [pc, #56]	; (800c138 <Get_SerialNum+0x4c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4413      	add	r3, r2
 800c10a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d009      	beq.n	800c126 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c112:	2208      	movs	r2, #8
 800c114:	4909      	ldr	r1, [pc, #36]	; (800c13c <Get_SerialNum+0x50>)
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f000 f814 	bl	800c144 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c11c:	2204      	movs	r2, #4
 800c11e:	4908      	ldr	r1, [pc, #32]	; (800c140 <Get_SerialNum+0x54>)
 800c120:	68b8      	ldr	r0, [r7, #8]
 800c122:	f000 f80f 	bl	800c144 <IntToUnicode>
  }
}
 800c126:	bf00      	nop
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	1fff7a10 	.word	0x1fff7a10
 800c134:	1fff7a14 	.word	0x1fff7a14
 800c138:	1fff7a18 	.word	0x1fff7a18
 800c13c:	20000166 	.word	0x20000166
 800c140:	20000176 	.word	0x20000176

0800c144 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c144:	b480      	push	{r7}
 800c146:	b087      	sub	sp, #28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	4613      	mov	r3, r2
 800c150:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c152:	2300      	movs	r3, #0
 800c154:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c156:	2300      	movs	r3, #0
 800c158:	75fb      	strb	r3, [r7, #23]
 800c15a:	e027      	b.n	800c1ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	0f1b      	lsrs	r3, r3, #28
 800c160:	2b09      	cmp	r3, #9
 800c162:	d80b      	bhi.n	800c17c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	0f1b      	lsrs	r3, r3, #28
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
 800c16c:	005b      	lsls	r3, r3, #1
 800c16e:	4619      	mov	r1, r3
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	440b      	add	r3, r1
 800c174:	3230      	adds	r2, #48	; 0x30
 800c176:	b2d2      	uxtb	r2, r2
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	e00a      	b.n	800c192 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	0f1b      	lsrs	r3, r3, #28
 800c180:	b2da      	uxtb	r2, r3
 800c182:	7dfb      	ldrb	r3, [r7, #23]
 800c184:	005b      	lsls	r3, r3, #1
 800c186:	4619      	mov	r1, r3
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	440b      	add	r3, r1
 800c18c:	3237      	adds	r2, #55	; 0x37
 800c18e:	b2d2      	uxtb	r2, r2
 800c190:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	011b      	lsls	r3, r3, #4
 800c196:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c198:	7dfb      	ldrb	r3, [r7, #23]
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	3301      	adds	r3, #1
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c1a6:	7dfb      	ldrb	r3, [r7, #23]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	75fb      	strb	r3, [r7, #23]
 800c1ac:	7dfa      	ldrb	r2, [r7, #23]
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d3d3      	bcc.n	800c15c <IntToUnicode+0x18>
  }
}
 800c1b4:	bf00      	nop
 800c1b6:	bf00      	nop
 800c1b8:	371c      	adds	r7, #28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
	...

0800c1c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08a      	sub	sp, #40	; 0x28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	605a      	str	r2, [r3, #4]
 800c1d6:	609a      	str	r2, [r3, #8]
 800c1d8:	60da      	str	r2, [r3, #12]
 800c1da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1e4:	d13a      	bne.n	800c25c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	613b      	str	r3, [r7, #16]
 800c1ea:	4b1e      	ldr	r3, [pc, #120]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ee:	4a1d      	ldr	r2, [pc, #116]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c1f0:	f043 0301 	orr.w	r3, r3, #1
 800c1f4:	6313      	str	r3, [r2, #48]	; 0x30
 800c1f6:	4b1b      	ldr	r3, [pc, #108]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	613b      	str	r3, [r7, #16]
 800c200:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c202:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c208:	2302      	movs	r3, #2
 800c20a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c20c:	2300      	movs	r3, #0
 800c20e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c210:	2303      	movs	r3, #3
 800c212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c214:	230a      	movs	r3, #10
 800c216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c218:	f107 0314 	add.w	r3, r7, #20
 800c21c:	4619      	mov	r1, r3
 800c21e:	4812      	ldr	r0, [pc, #72]	; (800c268 <HAL_PCD_MspInit+0xa4>)
 800c220:	f7f7 fafe 	bl	8003820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c224:	4b0f      	ldr	r3, [pc, #60]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c228:	4a0e      	ldr	r2, [pc, #56]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c22e:	6353      	str	r3, [r2, #52]	; 0x34
 800c230:	2300      	movs	r3, #0
 800c232:	60fb      	str	r3, [r7, #12]
 800c234:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c238:	4a0a      	ldr	r2, [pc, #40]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c23a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c23e:	6453      	str	r3, [r2, #68]	; 0x44
 800c240:	4b08      	ldr	r3, [pc, #32]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c248:	60fb      	str	r3, [r7, #12]
 800c24a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c24c:	2200      	movs	r2, #0
 800c24e:	2100      	movs	r1, #0
 800c250:	2043      	movs	r0, #67	; 0x43
 800c252:	f7f6 fe12 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c256:	2043      	movs	r0, #67	; 0x43
 800c258:	f7f6 fe2b 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c25c:	bf00      	nop
 800c25e:	3728      	adds	r7, #40	; 0x28
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	40023800 	.word	0x40023800
 800c268:	40020000 	.word	0x40020000

0800c26c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c280:	4619      	mov	r1, r3
 800c282:	4610      	mov	r0, r2
 800c284:	f7fe fb47 	bl	800a916 <USBD_LL_SetupStage>
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c2a2:	78fa      	ldrb	r2, [r7, #3]
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	00db      	lsls	r3, r3, #3
 800c2aa:	4413      	add	r3, r2
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	440b      	add	r3, r1
 800c2b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	78fb      	ldrb	r3, [r7, #3]
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	f7fe fb81 	bl	800a9c0 <USBD_LL_DataOutStage>
}
 800c2be:	bf00      	nop
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b082      	sub	sp, #8
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c2d8:	78fa      	ldrb	r2, [r7, #3]
 800c2da:	6879      	ldr	r1, [r7, #4]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	4413      	add	r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	440b      	add	r3, r1
 800c2e6:	334c      	adds	r3, #76	; 0x4c
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	78fb      	ldrb	r3, [r7, #3]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	f7fe fc1a 	bl	800ab26 <USBD_LL_DataInStage>
}
 800c2f2:	bf00      	nop
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fe fd4e 	bl	800adaa <USBD_LL_SOF>
}
 800c30e:	bf00      	nop
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c31e:	2301      	movs	r3, #1
 800c320:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d102      	bne.n	800c330 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c32a:	2300      	movs	r3, #0
 800c32c:	73fb      	strb	r3, [r7, #15]
 800c32e:	e008      	b.n	800c342 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	2b02      	cmp	r3, #2
 800c336:	d102      	bne.n	800c33e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c338:	2301      	movs	r3, #1
 800c33a:	73fb      	strb	r3, [r7, #15]
 800c33c:	e001      	b.n	800c342 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c33e:	f7f5 fb53 	bl	80019e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c348:	7bfa      	ldrb	r2, [r7, #15]
 800c34a:	4611      	mov	r1, r2
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fe fcee 	bl	800ad2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fe fc96 	bl	800ac8a <USBD_LL_Reset>
}
 800c35e:	bf00      	nop
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
	...

0800c368 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c376:	4618      	mov	r0, r3
 800c378:	f7fe fce9 	bl	800ad4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	6812      	ldr	r2, [r2, #0]
 800c38a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c38e:	f043 0301 	orr.w	r3, r3, #1
 800c392:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6a1b      	ldr	r3, [r3, #32]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d005      	beq.n	800c3a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c39c:	4b04      	ldr	r3, [pc, #16]	; (800c3b0 <HAL_PCD_SuspendCallback+0x48>)
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	4a03      	ldr	r2, [pc, #12]	; (800c3b0 <HAL_PCD_SuspendCallback+0x48>)
 800c3a2:	f043 0306 	orr.w	r3, r3, #6
 800c3a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c3a8:	bf00      	nop
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	e000ed00 	.word	0xe000ed00

0800c3b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fe fcd9 	bl	800ad7a <USBD_LL_Resume>
}
 800c3c8:	bf00      	nop
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3e2:	78fa      	ldrb	r2, [r7, #3]
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fe fd31 	bl	800ae4e <USBD_LL_IsoOUTIncomplete>
}
 800c3ec:	bf00      	nop
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c406:	78fa      	ldrb	r2, [r7, #3]
 800c408:	4611      	mov	r1, r2
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fe fced 	bl	800adea <USBD_LL_IsoINIncomplete>
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c426:	4618      	mov	r0, r3
 800c428:	f7fe fd43 	bl	800aeb2 <USBD_LL_DevConnected>
}
 800c42c:	bf00      	nop
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c442:	4618      	mov	r0, r3
 800c444:	f7fe fd40 	bl	800aec8 <USBD_LL_DevDisconnected>
}
 800c448:	bf00      	nop
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d13c      	bne.n	800c4da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c460:	4a20      	ldr	r2, [pc, #128]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a1e      	ldr	r2, [pc, #120]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c46c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c470:	4b1c      	ldr	r3, [pc, #112]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c472:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c476:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c478:	4b1a      	ldr	r3, [pc, #104]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c47a:	2204      	movs	r2, #4
 800c47c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c47e:	4b19      	ldr	r3, [pc, #100]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c480:	2202      	movs	r2, #2
 800c482:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c484:	4b17      	ldr	r3, [pc, #92]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c486:	2200      	movs	r2, #0
 800c488:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c48a:	4b16      	ldr	r3, [pc, #88]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c48c:	2202      	movs	r2, #2
 800c48e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c490:	4b14      	ldr	r3, [pc, #80]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c492:	2200      	movs	r2, #0
 800c494:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c496:	4b13      	ldr	r3, [pc, #76]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c498:	2200      	movs	r2, #0
 800c49a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c49c:	4b11      	ldr	r3, [pc, #68]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c49e:	2200      	movs	r2, #0
 800c4a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c4a2:	4b10      	ldr	r3, [pc, #64]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c4a8:	4b0e      	ldr	r3, [pc, #56]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c4ae:	480d      	ldr	r0, [pc, #52]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c4b0:	f7f7 fb6a 	bl	8003b88 <HAL_PCD_Init>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c4ba:	f7f5 fa95 	bl	80019e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c4be:	2180      	movs	r1, #128	; 0x80
 800c4c0:	4808      	ldr	r0, [pc, #32]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c4c2:	f7f8 fdc2 	bl	800504a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c4c6:	2240      	movs	r2, #64	; 0x40
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	4806      	ldr	r0, [pc, #24]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c4cc:	f7f8 fd76 	bl	8004fbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c4d0:	2280      	movs	r2, #128	; 0x80
 800c4d2:	2101      	movs	r1, #1
 800c4d4:	4803      	ldr	r0, [pc, #12]	; (800c4e4 <USBD_LL_Init+0x94>)
 800c4d6:	f7f8 fd71 	bl	8004fbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	20002ec8 	.word	0x20002ec8

0800c4e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7f7 fc5f 	bl	8003dc2 <HAL_PCD_Start>
 800c504:	4603      	mov	r3, r0
 800c506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c508:	7bfb      	ldrb	r3, [r7, #15]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f942 	bl	800c794 <USBD_Get_USB_Status>
 800c510:	4603      	mov	r3, r0
 800c512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c514:	7bbb      	ldrb	r3, [r7, #14]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b084      	sub	sp, #16
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	4608      	mov	r0, r1
 800c528:	4611      	mov	r1, r2
 800c52a:	461a      	mov	r2, r3
 800c52c:	4603      	mov	r3, r0
 800c52e:	70fb      	strb	r3, [r7, #3]
 800c530:	460b      	mov	r3, r1
 800c532:	70bb      	strb	r3, [r7, #2]
 800c534:	4613      	mov	r3, r2
 800c536:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c538:	2300      	movs	r3, #0
 800c53a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c53c:	2300      	movs	r3, #0
 800c53e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c546:	78bb      	ldrb	r3, [r7, #2]
 800c548:	883a      	ldrh	r2, [r7, #0]
 800c54a:	78f9      	ldrb	r1, [r7, #3]
 800c54c:	f7f8 f930 	bl	80047b0 <HAL_PCD_EP_Open>
 800c550:	4603      	mov	r3, r0
 800c552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c554:	7bfb      	ldrb	r3, [r7, #15]
 800c556:	4618      	mov	r0, r3
 800c558:	f000 f91c 	bl	800c794 <USBD_Get_USB_Status>
 800c55c:	4603      	mov	r3, r0
 800c55e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c560:	7bbb      	ldrb	r3, [r7, #14]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	460b      	mov	r3, r1
 800c574:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c584:	78fa      	ldrb	r2, [r7, #3]
 800c586:	4611      	mov	r1, r2
 800c588:	4618      	mov	r0, r3
 800c58a:	f7f8 f979 	bl	8004880 <HAL_PCD_EP_Close>
 800c58e:	4603      	mov	r3, r0
 800c590:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c592:	7bfb      	ldrb	r3, [r7, #15]
 800c594:	4618      	mov	r0, r3
 800c596:	f000 f8fd 	bl	800c794 <USBD_Get_USB_Status>
 800c59a:	4603      	mov	r3, r0
 800c59c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c59e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5c2:	78fa      	ldrb	r2, [r7, #3]
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7f8 fa51 	bl	8004a6e <HAL_PCD_EP_SetStall>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 f8de 	bl	800c794 <USBD_Get_USB_Status>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c600:	78fa      	ldrb	r2, [r7, #3]
 800c602:	4611      	mov	r1, r2
 800c604:	4618      	mov	r0, r3
 800c606:	f7f8 fa96 	bl	8004b36 <HAL_PCD_EP_ClrStall>
 800c60a:	4603      	mov	r3, r0
 800c60c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	4618      	mov	r0, r3
 800c612:	f000 f8bf 	bl	800c794 <USBD_Get_USB_Status>
 800c616:	4603      	mov	r3, r0
 800c618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c636:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	da0b      	bge.n	800c658 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c640:	78fb      	ldrb	r3, [r7, #3]
 800c642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c646:	68f9      	ldr	r1, [r7, #12]
 800c648:	4613      	mov	r3, r2
 800c64a:	00db      	lsls	r3, r3, #3
 800c64c:	4413      	add	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	440b      	add	r3, r1
 800c652:	333e      	adds	r3, #62	; 0x3e
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	e00b      	b.n	800c670 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c658:	78fb      	ldrb	r3, [r7, #3]
 800c65a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c65e:	68f9      	ldr	r1, [r7, #12]
 800c660:	4613      	mov	r3, r2
 800c662:	00db      	lsls	r3, r3, #3
 800c664:	4413      	add	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	440b      	add	r3, r1
 800c66a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c66e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c670:	4618      	mov	r0, r3
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c688:	2300      	movs	r3, #0
 800c68a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c68c:	2300      	movs	r3, #0
 800c68e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c696:	78fa      	ldrb	r2, [r7, #3]
 800c698:	4611      	mov	r1, r2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7f8 f863 	bl	8004766 <HAL_PCD_SetAddress>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 f874 	bl	800c794 <USBD_Get_USB_Status>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b086      	sub	sp, #24
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	60f8      	str	r0, [r7, #12]
 800c6c2:	607a      	str	r2, [r7, #4]
 800c6c4:	603b      	str	r3, [r7, #0]
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c6d8:	7af9      	ldrb	r1, [r7, #11]
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	f7f8 f97c 	bl	80049da <HAL_PCD_EP_Transmit>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6e6:	7dfb      	ldrb	r3, [r7, #23]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f853 	bl	800c794 <USBD_Get_USB_Status>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	607a      	str	r2, [r7, #4]
 800c706:	603b      	str	r3, [r7, #0]
 800c708:	460b      	mov	r3, r1
 800c70a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c710:	2300      	movs	r3, #0
 800c712:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c71a:	7af9      	ldrb	r1, [r7, #11]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	f7f8 f8f8 	bl	8004914 <HAL_PCD_EP_Receive>
 800c724:	4603      	mov	r3, r0
 800c726:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c728:	7dfb      	ldrb	r3, [r7, #23]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 f832 	bl	800c794 <USBD_Get_USB_Status>
 800c730:	4603      	mov	r3, r0
 800c732:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c734:	7dbb      	ldrb	r3, [r7, #22]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3718      	adds	r7, #24
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b082      	sub	sp, #8
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	460b      	mov	r3, r1
 800c748:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c750:	78fa      	ldrb	r2, [r7, #3]
 800c752:	4611      	mov	r1, r2
 800c754:	4618      	mov	r0, r3
 800c756:	f7f8 f928 	bl	80049aa <HAL_PCD_EP_GetRxCount>
 800c75a:	4603      	mov	r3, r0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c76c:	4b03      	ldr	r3, [pc, #12]	; (800c77c <USBD_static_malloc+0x18>)
}
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	200033d4 	.word	0x200033d4

0800c780 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]

}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c7a2:	79fb      	ldrb	r3, [r7, #7]
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d817      	bhi.n	800c7d8 <USBD_Get_USB_Status+0x44>
 800c7a8:	a201      	add	r2, pc, #4	; (adr r2, 800c7b0 <USBD_Get_USB_Status+0x1c>)
 800c7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ae:	bf00      	nop
 800c7b0:	0800c7c1 	.word	0x0800c7c1
 800c7b4:	0800c7c7 	.word	0x0800c7c7
 800c7b8:	0800c7cd 	.word	0x0800c7cd
 800c7bc:	0800c7d3 	.word	0x0800c7d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c4:	e00b      	b.n	800c7de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ca:	e008      	b.n	800c7de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c7d0:	e005      	b.n	800c7de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c7d6:	e002      	b.n	800c7de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	73fb      	strb	r3, [r7, #15]
    break;
 800c7dc:	bf00      	nop
  }
  return usb_status;
 800c7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <__errno>:
 800c7ec:	4b01      	ldr	r3, [pc, #4]	; (800c7f4 <__errno+0x8>)
 800c7ee:	6818      	ldr	r0, [r3, #0]
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	20000180 	.word	0x20000180

0800c7f8 <__libc_init_array>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	4d0d      	ldr	r5, [pc, #52]	; (800c830 <__libc_init_array+0x38>)
 800c7fc:	4c0d      	ldr	r4, [pc, #52]	; (800c834 <__libc_init_array+0x3c>)
 800c7fe:	1b64      	subs	r4, r4, r5
 800c800:	10a4      	asrs	r4, r4, #2
 800c802:	2600      	movs	r6, #0
 800c804:	42a6      	cmp	r6, r4
 800c806:	d109      	bne.n	800c81c <__libc_init_array+0x24>
 800c808:	4d0b      	ldr	r5, [pc, #44]	; (800c838 <__libc_init_array+0x40>)
 800c80a:	4c0c      	ldr	r4, [pc, #48]	; (800c83c <__libc_init_array+0x44>)
 800c80c:	f000 fc8e 	bl	800d12c <_init>
 800c810:	1b64      	subs	r4, r4, r5
 800c812:	10a4      	asrs	r4, r4, #2
 800c814:	2600      	movs	r6, #0
 800c816:	42a6      	cmp	r6, r4
 800c818:	d105      	bne.n	800c826 <__libc_init_array+0x2e>
 800c81a:	bd70      	pop	{r4, r5, r6, pc}
 800c81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c820:	4798      	blx	r3
 800c822:	3601      	adds	r6, #1
 800c824:	e7ee      	b.n	800c804 <__libc_init_array+0xc>
 800c826:	f855 3b04 	ldr.w	r3, [r5], #4
 800c82a:	4798      	blx	r3
 800c82c:	3601      	adds	r6, #1
 800c82e:	e7f2      	b.n	800c816 <__libc_init_array+0x1e>
 800c830:	0800d3f8 	.word	0x0800d3f8
 800c834:	0800d3f8 	.word	0x0800d3f8
 800c838:	0800d3f8 	.word	0x0800d3f8
 800c83c:	0800d3fc 	.word	0x0800d3fc

0800c840 <memcpy>:
 800c840:	440a      	add	r2, r1
 800c842:	4291      	cmp	r1, r2
 800c844:	f100 33ff 	add.w	r3, r0, #4294967295
 800c848:	d100      	bne.n	800c84c <memcpy+0xc>
 800c84a:	4770      	bx	lr
 800c84c:	b510      	push	{r4, lr}
 800c84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c852:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c856:	4291      	cmp	r1, r2
 800c858:	d1f9      	bne.n	800c84e <memcpy+0xe>
 800c85a:	bd10      	pop	{r4, pc}

0800c85c <memset>:
 800c85c:	4402      	add	r2, r0
 800c85e:	4603      	mov	r3, r0
 800c860:	4293      	cmp	r3, r2
 800c862:	d100      	bne.n	800c866 <memset+0xa>
 800c864:	4770      	bx	lr
 800c866:	f803 1b01 	strb.w	r1, [r3], #1
 800c86a:	e7f9      	b.n	800c860 <memset+0x4>

0800c86c <siprintf>:
 800c86c:	b40e      	push	{r1, r2, r3}
 800c86e:	b500      	push	{lr}
 800c870:	b09c      	sub	sp, #112	; 0x70
 800c872:	ab1d      	add	r3, sp, #116	; 0x74
 800c874:	9002      	str	r0, [sp, #8]
 800c876:	9006      	str	r0, [sp, #24]
 800c878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c87c:	4809      	ldr	r0, [pc, #36]	; (800c8a4 <siprintf+0x38>)
 800c87e:	9107      	str	r1, [sp, #28]
 800c880:	9104      	str	r1, [sp, #16]
 800c882:	4909      	ldr	r1, [pc, #36]	; (800c8a8 <siprintf+0x3c>)
 800c884:	f853 2b04 	ldr.w	r2, [r3], #4
 800c888:	9105      	str	r1, [sp, #20]
 800c88a:	6800      	ldr	r0, [r0, #0]
 800c88c:	9301      	str	r3, [sp, #4]
 800c88e:	a902      	add	r1, sp, #8
 800c890:	f000 f948 	bl	800cb24 <_svfiprintf_r>
 800c894:	9b02      	ldr	r3, [sp, #8]
 800c896:	2200      	movs	r2, #0
 800c898:	701a      	strb	r2, [r3, #0]
 800c89a:	b01c      	add	sp, #112	; 0x70
 800c89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8a0:	b003      	add	sp, #12
 800c8a2:	4770      	bx	lr
 800c8a4:	20000180 	.word	0x20000180
 800c8a8:	ffff0208 	.word	0xffff0208

0800c8ac <_free_r>:
 800c8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8ae:	2900      	cmp	r1, #0
 800c8b0:	d044      	beq.n	800c93c <_free_r+0x90>
 800c8b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8b6:	9001      	str	r0, [sp, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f1a1 0404 	sub.w	r4, r1, #4
 800c8be:	bfb8      	it	lt
 800c8c0:	18e4      	addlt	r4, r4, r3
 800c8c2:	f000 fbef 	bl	800d0a4 <__malloc_lock>
 800c8c6:	4a1e      	ldr	r2, [pc, #120]	; (800c940 <_free_r+0x94>)
 800c8c8:	9801      	ldr	r0, [sp, #4]
 800c8ca:	6813      	ldr	r3, [r2, #0]
 800c8cc:	b933      	cbnz	r3, 800c8dc <_free_r+0x30>
 800c8ce:	6063      	str	r3, [r4, #4]
 800c8d0:	6014      	str	r4, [r2, #0]
 800c8d2:	b003      	add	sp, #12
 800c8d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8d8:	f000 bbea 	b.w	800d0b0 <__malloc_unlock>
 800c8dc:	42a3      	cmp	r3, r4
 800c8de:	d908      	bls.n	800c8f2 <_free_r+0x46>
 800c8e0:	6825      	ldr	r5, [r4, #0]
 800c8e2:	1961      	adds	r1, r4, r5
 800c8e4:	428b      	cmp	r3, r1
 800c8e6:	bf01      	itttt	eq
 800c8e8:	6819      	ldreq	r1, [r3, #0]
 800c8ea:	685b      	ldreq	r3, [r3, #4]
 800c8ec:	1949      	addeq	r1, r1, r5
 800c8ee:	6021      	streq	r1, [r4, #0]
 800c8f0:	e7ed      	b.n	800c8ce <_free_r+0x22>
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	b10b      	cbz	r3, 800c8fc <_free_r+0x50>
 800c8f8:	42a3      	cmp	r3, r4
 800c8fa:	d9fa      	bls.n	800c8f2 <_free_r+0x46>
 800c8fc:	6811      	ldr	r1, [r2, #0]
 800c8fe:	1855      	adds	r5, r2, r1
 800c900:	42a5      	cmp	r5, r4
 800c902:	d10b      	bne.n	800c91c <_free_r+0x70>
 800c904:	6824      	ldr	r4, [r4, #0]
 800c906:	4421      	add	r1, r4
 800c908:	1854      	adds	r4, r2, r1
 800c90a:	42a3      	cmp	r3, r4
 800c90c:	6011      	str	r1, [r2, #0]
 800c90e:	d1e0      	bne.n	800c8d2 <_free_r+0x26>
 800c910:	681c      	ldr	r4, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	6053      	str	r3, [r2, #4]
 800c916:	4421      	add	r1, r4
 800c918:	6011      	str	r1, [r2, #0]
 800c91a:	e7da      	b.n	800c8d2 <_free_r+0x26>
 800c91c:	d902      	bls.n	800c924 <_free_r+0x78>
 800c91e:	230c      	movs	r3, #12
 800c920:	6003      	str	r3, [r0, #0]
 800c922:	e7d6      	b.n	800c8d2 <_free_r+0x26>
 800c924:	6825      	ldr	r5, [r4, #0]
 800c926:	1961      	adds	r1, r4, r5
 800c928:	428b      	cmp	r3, r1
 800c92a:	bf04      	itt	eq
 800c92c:	6819      	ldreq	r1, [r3, #0]
 800c92e:	685b      	ldreq	r3, [r3, #4]
 800c930:	6063      	str	r3, [r4, #4]
 800c932:	bf04      	itt	eq
 800c934:	1949      	addeq	r1, r1, r5
 800c936:	6021      	streq	r1, [r4, #0]
 800c938:	6054      	str	r4, [r2, #4]
 800c93a:	e7ca      	b.n	800c8d2 <_free_r+0x26>
 800c93c:	b003      	add	sp, #12
 800c93e:	bd30      	pop	{r4, r5, pc}
 800c940:	20003434 	.word	0x20003434

0800c944 <sbrk_aligned>:
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	4e0e      	ldr	r6, [pc, #56]	; (800c980 <sbrk_aligned+0x3c>)
 800c948:	460c      	mov	r4, r1
 800c94a:	6831      	ldr	r1, [r6, #0]
 800c94c:	4605      	mov	r5, r0
 800c94e:	b911      	cbnz	r1, 800c956 <sbrk_aligned+0x12>
 800c950:	f000 fb7c 	bl	800d04c <_sbrk_r>
 800c954:	6030      	str	r0, [r6, #0]
 800c956:	4621      	mov	r1, r4
 800c958:	4628      	mov	r0, r5
 800c95a:	f000 fb77 	bl	800d04c <_sbrk_r>
 800c95e:	1c43      	adds	r3, r0, #1
 800c960:	d00a      	beq.n	800c978 <sbrk_aligned+0x34>
 800c962:	1cc4      	adds	r4, r0, #3
 800c964:	f024 0403 	bic.w	r4, r4, #3
 800c968:	42a0      	cmp	r0, r4
 800c96a:	d007      	beq.n	800c97c <sbrk_aligned+0x38>
 800c96c:	1a21      	subs	r1, r4, r0
 800c96e:	4628      	mov	r0, r5
 800c970:	f000 fb6c 	bl	800d04c <_sbrk_r>
 800c974:	3001      	adds	r0, #1
 800c976:	d101      	bne.n	800c97c <sbrk_aligned+0x38>
 800c978:	f04f 34ff 	mov.w	r4, #4294967295
 800c97c:	4620      	mov	r0, r4
 800c97e:	bd70      	pop	{r4, r5, r6, pc}
 800c980:	20003438 	.word	0x20003438

0800c984 <_malloc_r>:
 800c984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c988:	1ccd      	adds	r5, r1, #3
 800c98a:	f025 0503 	bic.w	r5, r5, #3
 800c98e:	3508      	adds	r5, #8
 800c990:	2d0c      	cmp	r5, #12
 800c992:	bf38      	it	cc
 800c994:	250c      	movcc	r5, #12
 800c996:	2d00      	cmp	r5, #0
 800c998:	4607      	mov	r7, r0
 800c99a:	db01      	blt.n	800c9a0 <_malloc_r+0x1c>
 800c99c:	42a9      	cmp	r1, r5
 800c99e:	d905      	bls.n	800c9ac <_malloc_r+0x28>
 800c9a0:	230c      	movs	r3, #12
 800c9a2:	603b      	str	r3, [r7, #0]
 800c9a4:	2600      	movs	r6, #0
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ac:	4e2e      	ldr	r6, [pc, #184]	; (800ca68 <_malloc_r+0xe4>)
 800c9ae:	f000 fb79 	bl	800d0a4 <__malloc_lock>
 800c9b2:	6833      	ldr	r3, [r6, #0]
 800c9b4:	461c      	mov	r4, r3
 800c9b6:	bb34      	cbnz	r4, 800ca06 <_malloc_r+0x82>
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	f7ff ffc2 	bl	800c944 <sbrk_aligned>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	d14d      	bne.n	800ca62 <_malloc_r+0xde>
 800c9c6:	6834      	ldr	r4, [r6, #0]
 800c9c8:	4626      	mov	r6, r4
 800c9ca:	2e00      	cmp	r6, #0
 800c9cc:	d140      	bne.n	800ca50 <_malloc_r+0xcc>
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	4631      	mov	r1, r6
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	eb04 0803 	add.w	r8, r4, r3
 800c9d8:	f000 fb38 	bl	800d04c <_sbrk_r>
 800c9dc:	4580      	cmp	r8, r0
 800c9de:	d13a      	bne.n	800ca56 <_malloc_r+0xd2>
 800c9e0:	6821      	ldr	r1, [r4, #0]
 800c9e2:	3503      	adds	r5, #3
 800c9e4:	1a6d      	subs	r5, r5, r1
 800c9e6:	f025 0503 	bic.w	r5, r5, #3
 800c9ea:	3508      	adds	r5, #8
 800c9ec:	2d0c      	cmp	r5, #12
 800c9ee:	bf38      	it	cc
 800c9f0:	250c      	movcc	r5, #12
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	f7ff ffa5 	bl	800c944 <sbrk_aligned>
 800c9fa:	3001      	adds	r0, #1
 800c9fc:	d02b      	beq.n	800ca56 <_malloc_r+0xd2>
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	442b      	add	r3, r5
 800ca02:	6023      	str	r3, [r4, #0]
 800ca04:	e00e      	b.n	800ca24 <_malloc_r+0xa0>
 800ca06:	6822      	ldr	r2, [r4, #0]
 800ca08:	1b52      	subs	r2, r2, r5
 800ca0a:	d41e      	bmi.n	800ca4a <_malloc_r+0xc6>
 800ca0c:	2a0b      	cmp	r2, #11
 800ca0e:	d916      	bls.n	800ca3e <_malloc_r+0xba>
 800ca10:	1961      	adds	r1, r4, r5
 800ca12:	42a3      	cmp	r3, r4
 800ca14:	6025      	str	r5, [r4, #0]
 800ca16:	bf18      	it	ne
 800ca18:	6059      	strne	r1, [r3, #4]
 800ca1a:	6863      	ldr	r3, [r4, #4]
 800ca1c:	bf08      	it	eq
 800ca1e:	6031      	streq	r1, [r6, #0]
 800ca20:	5162      	str	r2, [r4, r5]
 800ca22:	604b      	str	r3, [r1, #4]
 800ca24:	4638      	mov	r0, r7
 800ca26:	f104 060b 	add.w	r6, r4, #11
 800ca2a:	f000 fb41 	bl	800d0b0 <__malloc_unlock>
 800ca2e:	f026 0607 	bic.w	r6, r6, #7
 800ca32:	1d23      	adds	r3, r4, #4
 800ca34:	1af2      	subs	r2, r6, r3
 800ca36:	d0b6      	beq.n	800c9a6 <_malloc_r+0x22>
 800ca38:	1b9b      	subs	r3, r3, r6
 800ca3a:	50a3      	str	r3, [r4, r2]
 800ca3c:	e7b3      	b.n	800c9a6 <_malloc_r+0x22>
 800ca3e:	6862      	ldr	r2, [r4, #4]
 800ca40:	42a3      	cmp	r3, r4
 800ca42:	bf0c      	ite	eq
 800ca44:	6032      	streq	r2, [r6, #0]
 800ca46:	605a      	strne	r2, [r3, #4]
 800ca48:	e7ec      	b.n	800ca24 <_malloc_r+0xa0>
 800ca4a:	4623      	mov	r3, r4
 800ca4c:	6864      	ldr	r4, [r4, #4]
 800ca4e:	e7b2      	b.n	800c9b6 <_malloc_r+0x32>
 800ca50:	4634      	mov	r4, r6
 800ca52:	6876      	ldr	r6, [r6, #4]
 800ca54:	e7b9      	b.n	800c9ca <_malloc_r+0x46>
 800ca56:	230c      	movs	r3, #12
 800ca58:	603b      	str	r3, [r7, #0]
 800ca5a:	4638      	mov	r0, r7
 800ca5c:	f000 fb28 	bl	800d0b0 <__malloc_unlock>
 800ca60:	e7a1      	b.n	800c9a6 <_malloc_r+0x22>
 800ca62:	6025      	str	r5, [r4, #0]
 800ca64:	e7de      	b.n	800ca24 <_malloc_r+0xa0>
 800ca66:	bf00      	nop
 800ca68:	20003434 	.word	0x20003434

0800ca6c <__ssputs_r>:
 800ca6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca70:	688e      	ldr	r6, [r1, #8]
 800ca72:	429e      	cmp	r6, r3
 800ca74:	4682      	mov	sl, r0
 800ca76:	460c      	mov	r4, r1
 800ca78:	4690      	mov	r8, r2
 800ca7a:	461f      	mov	r7, r3
 800ca7c:	d838      	bhi.n	800caf0 <__ssputs_r+0x84>
 800ca7e:	898a      	ldrh	r2, [r1, #12]
 800ca80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca84:	d032      	beq.n	800caec <__ssputs_r+0x80>
 800ca86:	6825      	ldr	r5, [r4, #0]
 800ca88:	6909      	ldr	r1, [r1, #16]
 800ca8a:	eba5 0901 	sub.w	r9, r5, r1
 800ca8e:	6965      	ldr	r5, [r4, #20]
 800ca90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca98:	3301      	adds	r3, #1
 800ca9a:	444b      	add	r3, r9
 800ca9c:	106d      	asrs	r5, r5, #1
 800ca9e:	429d      	cmp	r5, r3
 800caa0:	bf38      	it	cc
 800caa2:	461d      	movcc	r5, r3
 800caa4:	0553      	lsls	r3, r2, #21
 800caa6:	d531      	bpl.n	800cb0c <__ssputs_r+0xa0>
 800caa8:	4629      	mov	r1, r5
 800caaa:	f7ff ff6b 	bl	800c984 <_malloc_r>
 800caae:	4606      	mov	r6, r0
 800cab0:	b950      	cbnz	r0, 800cac8 <__ssputs_r+0x5c>
 800cab2:	230c      	movs	r3, #12
 800cab4:	f8ca 3000 	str.w	r3, [sl]
 800cab8:	89a3      	ldrh	r3, [r4, #12]
 800caba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cabe:	81a3      	strh	r3, [r4, #12]
 800cac0:	f04f 30ff 	mov.w	r0, #4294967295
 800cac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac8:	6921      	ldr	r1, [r4, #16]
 800caca:	464a      	mov	r2, r9
 800cacc:	f7ff feb8 	bl	800c840 <memcpy>
 800cad0:	89a3      	ldrh	r3, [r4, #12]
 800cad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cada:	81a3      	strh	r3, [r4, #12]
 800cadc:	6126      	str	r6, [r4, #16]
 800cade:	6165      	str	r5, [r4, #20]
 800cae0:	444e      	add	r6, r9
 800cae2:	eba5 0509 	sub.w	r5, r5, r9
 800cae6:	6026      	str	r6, [r4, #0]
 800cae8:	60a5      	str	r5, [r4, #8]
 800caea:	463e      	mov	r6, r7
 800caec:	42be      	cmp	r6, r7
 800caee:	d900      	bls.n	800caf2 <__ssputs_r+0x86>
 800caf0:	463e      	mov	r6, r7
 800caf2:	6820      	ldr	r0, [r4, #0]
 800caf4:	4632      	mov	r2, r6
 800caf6:	4641      	mov	r1, r8
 800caf8:	f000 faba 	bl	800d070 <memmove>
 800cafc:	68a3      	ldr	r3, [r4, #8]
 800cafe:	1b9b      	subs	r3, r3, r6
 800cb00:	60a3      	str	r3, [r4, #8]
 800cb02:	6823      	ldr	r3, [r4, #0]
 800cb04:	4433      	add	r3, r6
 800cb06:	6023      	str	r3, [r4, #0]
 800cb08:	2000      	movs	r0, #0
 800cb0a:	e7db      	b.n	800cac4 <__ssputs_r+0x58>
 800cb0c:	462a      	mov	r2, r5
 800cb0e:	f000 fad5 	bl	800d0bc <_realloc_r>
 800cb12:	4606      	mov	r6, r0
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d1e1      	bne.n	800cadc <__ssputs_r+0x70>
 800cb18:	6921      	ldr	r1, [r4, #16]
 800cb1a:	4650      	mov	r0, sl
 800cb1c:	f7ff fec6 	bl	800c8ac <_free_r>
 800cb20:	e7c7      	b.n	800cab2 <__ssputs_r+0x46>
	...

0800cb24 <_svfiprintf_r>:
 800cb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb28:	4698      	mov	r8, r3
 800cb2a:	898b      	ldrh	r3, [r1, #12]
 800cb2c:	061b      	lsls	r3, r3, #24
 800cb2e:	b09d      	sub	sp, #116	; 0x74
 800cb30:	4607      	mov	r7, r0
 800cb32:	460d      	mov	r5, r1
 800cb34:	4614      	mov	r4, r2
 800cb36:	d50e      	bpl.n	800cb56 <_svfiprintf_r+0x32>
 800cb38:	690b      	ldr	r3, [r1, #16]
 800cb3a:	b963      	cbnz	r3, 800cb56 <_svfiprintf_r+0x32>
 800cb3c:	2140      	movs	r1, #64	; 0x40
 800cb3e:	f7ff ff21 	bl	800c984 <_malloc_r>
 800cb42:	6028      	str	r0, [r5, #0]
 800cb44:	6128      	str	r0, [r5, #16]
 800cb46:	b920      	cbnz	r0, 800cb52 <_svfiprintf_r+0x2e>
 800cb48:	230c      	movs	r3, #12
 800cb4a:	603b      	str	r3, [r7, #0]
 800cb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb50:	e0d1      	b.n	800ccf6 <_svfiprintf_r+0x1d2>
 800cb52:	2340      	movs	r3, #64	; 0x40
 800cb54:	616b      	str	r3, [r5, #20]
 800cb56:	2300      	movs	r3, #0
 800cb58:	9309      	str	r3, [sp, #36]	; 0x24
 800cb5a:	2320      	movs	r3, #32
 800cb5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb60:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb64:	2330      	movs	r3, #48	; 0x30
 800cb66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd10 <_svfiprintf_r+0x1ec>
 800cb6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb6e:	f04f 0901 	mov.w	r9, #1
 800cb72:	4623      	mov	r3, r4
 800cb74:	469a      	mov	sl, r3
 800cb76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb7a:	b10a      	cbz	r2, 800cb80 <_svfiprintf_r+0x5c>
 800cb7c:	2a25      	cmp	r2, #37	; 0x25
 800cb7e:	d1f9      	bne.n	800cb74 <_svfiprintf_r+0x50>
 800cb80:	ebba 0b04 	subs.w	fp, sl, r4
 800cb84:	d00b      	beq.n	800cb9e <_svfiprintf_r+0x7a>
 800cb86:	465b      	mov	r3, fp
 800cb88:	4622      	mov	r2, r4
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	f7ff ff6d 	bl	800ca6c <__ssputs_r>
 800cb92:	3001      	adds	r0, #1
 800cb94:	f000 80aa 	beq.w	800ccec <_svfiprintf_r+0x1c8>
 800cb98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb9a:	445a      	add	r2, fp
 800cb9c:	9209      	str	r2, [sp, #36]	; 0x24
 800cb9e:	f89a 3000 	ldrb.w	r3, [sl]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 80a2 	beq.w	800ccec <_svfiprintf_r+0x1c8>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbb2:	f10a 0a01 	add.w	sl, sl, #1
 800cbb6:	9304      	str	r3, [sp, #16]
 800cbb8:	9307      	str	r3, [sp, #28]
 800cbba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbbe:	931a      	str	r3, [sp, #104]	; 0x68
 800cbc0:	4654      	mov	r4, sl
 800cbc2:	2205      	movs	r2, #5
 800cbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc8:	4851      	ldr	r0, [pc, #324]	; (800cd10 <_svfiprintf_r+0x1ec>)
 800cbca:	f7f3 fb09 	bl	80001e0 <memchr>
 800cbce:	9a04      	ldr	r2, [sp, #16]
 800cbd0:	b9d8      	cbnz	r0, 800cc0a <_svfiprintf_r+0xe6>
 800cbd2:	06d0      	lsls	r0, r2, #27
 800cbd4:	bf44      	itt	mi
 800cbd6:	2320      	movmi	r3, #32
 800cbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbdc:	0711      	lsls	r1, r2, #28
 800cbde:	bf44      	itt	mi
 800cbe0:	232b      	movmi	r3, #43	; 0x2b
 800cbe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbe6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbea:	2b2a      	cmp	r3, #42	; 0x2a
 800cbec:	d015      	beq.n	800cc1a <_svfiprintf_r+0xf6>
 800cbee:	9a07      	ldr	r2, [sp, #28]
 800cbf0:	4654      	mov	r4, sl
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	f04f 0c0a 	mov.w	ip, #10
 800cbf8:	4621      	mov	r1, r4
 800cbfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbfe:	3b30      	subs	r3, #48	; 0x30
 800cc00:	2b09      	cmp	r3, #9
 800cc02:	d94e      	bls.n	800cca2 <_svfiprintf_r+0x17e>
 800cc04:	b1b0      	cbz	r0, 800cc34 <_svfiprintf_r+0x110>
 800cc06:	9207      	str	r2, [sp, #28]
 800cc08:	e014      	b.n	800cc34 <_svfiprintf_r+0x110>
 800cc0a:	eba0 0308 	sub.w	r3, r0, r8
 800cc0e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc12:	4313      	orrs	r3, r2
 800cc14:	9304      	str	r3, [sp, #16]
 800cc16:	46a2      	mov	sl, r4
 800cc18:	e7d2      	b.n	800cbc0 <_svfiprintf_r+0x9c>
 800cc1a:	9b03      	ldr	r3, [sp, #12]
 800cc1c:	1d19      	adds	r1, r3, #4
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	9103      	str	r1, [sp, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	bfbb      	ittet	lt
 800cc26:	425b      	neglt	r3, r3
 800cc28:	f042 0202 	orrlt.w	r2, r2, #2
 800cc2c:	9307      	strge	r3, [sp, #28]
 800cc2e:	9307      	strlt	r3, [sp, #28]
 800cc30:	bfb8      	it	lt
 800cc32:	9204      	strlt	r2, [sp, #16]
 800cc34:	7823      	ldrb	r3, [r4, #0]
 800cc36:	2b2e      	cmp	r3, #46	; 0x2e
 800cc38:	d10c      	bne.n	800cc54 <_svfiprintf_r+0x130>
 800cc3a:	7863      	ldrb	r3, [r4, #1]
 800cc3c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc3e:	d135      	bne.n	800ccac <_svfiprintf_r+0x188>
 800cc40:	9b03      	ldr	r3, [sp, #12]
 800cc42:	1d1a      	adds	r2, r3, #4
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	9203      	str	r2, [sp, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	bfb8      	it	lt
 800cc4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc50:	3402      	adds	r4, #2
 800cc52:	9305      	str	r3, [sp, #20]
 800cc54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd20 <_svfiprintf_r+0x1fc>
 800cc58:	7821      	ldrb	r1, [r4, #0]
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	f7f3 fabf 	bl	80001e0 <memchr>
 800cc62:	b140      	cbz	r0, 800cc76 <_svfiprintf_r+0x152>
 800cc64:	2340      	movs	r3, #64	; 0x40
 800cc66:	eba0 000a 	sub.w	r0, r0, sl
 800cc6a:	fa03 f000 	lsl.w	r0, r3, r0
 800cc6e:	9b04      	ldr	r3, [sp, #16]
 800cc70:	4303      	orrs	r3, r0
 800cc72:	3401      	adds	r4, #1
 800cc74:	9304      	str	r3, [sp, #16]
 800cc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7a:	4826      	ldr	r0, [pc, #152]	; (800cd14 <_svfiprintf_r+0x1f0>)
 800cc7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc80:	2206      	movs	r2, #6
 800cc82:	f7f3 faad 	bl	80001e0 <memchr>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d038      	beq.n	800ccfc <_svfiprintf_r+0x1d8>
 800cc8a:	4b23      	ldr	r3, [pc, #140]	; (800cd18 <_svfiprintf_r+0x1f4>)
 800cc8c:	bb1b      	cbnz	r3, 800ccd6 <_svfiprintf_r+0x1b2>
 800cc8e:	9b03      	ldr	r3, [sp, #12]
 800cc90:	3307      	adds	r3, #7
 800cc92:	f023 0307 	bic.w	r3, r3, #7
 800cc96:	3308      	adds	r3, #8
 800cc98:	9303      	str	r3, [sp, #12]
 800cc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9c:	4433      	add	r3, r6
 800cc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cca0:	e767      	b.n	800cb72 <_svfiprintf_r+0x4e>
 800cca2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cca6:	460c      	mov	r4, r1
 800cca8:	2001      	movs	r0, #1
 800ccaa:	e7a5      	b.n	800cbf8 <_svfiprintf_r+0xd4>
 800ccac:	2300      	movs	r3, #0
 800ccae:	3401      	adds	r4, #1
 800ccb0:	9305      	str	r3, [sp, #20]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	f04f 0c0a 	mov.w	ip, #10
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccbe:	3a30      	subs	r2, #48	; 0x30
 800ccc0:	2a09      	cmp	r2, #9
 800ccc2:	d903      	bls.n	800cccc <_svfiprintf_r+0x1a8>
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d0c5      	beq.n	800cc54 <_svfiprintf_r+0x130>
 800ccc8:	9105      	str	r1, [sp, #20]
 800ccca:	e7c3      	b.n	800cc54 <_svfiprintf_r+0x130>
 800cccc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e7f0      	b.n	800ccb8 <_svfiprintf_r+0x194>
 800ccd6:	ab03      	add	r3, sp, #12
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	462a      	mov	r2, r5
 800ccdc:	4b0f      	ldr	r3, [pc, #60]	; (800cd1c <_svfiprintf_r+0x1f8>)
 800ccde:	a904      	add	r1, sp, #16
 800cce0:	4638      	mov	r0, r7
 800cce2:	f3af 8000 	nop.w
 800cce6:	1c42      	adds	r2, r0, #1
 800cce8:	4606      	mov	r6, r0
 800ccea:	d1d6      	bne.n	800cc9a <_svfiprintf_r+0x176>
 800ccec:	89ab      	ldrh	r3, [r5, #12]
 800ccee:	065b      	lsls	r3, r3, #25
 800ccf0:	f53f af2c 	bmi.w	800cb4c <_svfiprintf_r+0x28>
 800ccf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccf6:	b01d      	add	sp, #116	; 0x74
 800ccf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfc:	ab03      	add	r3, sp, #12
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	462a      	mov	r2, r5
 800cd02:	4b06      	ldr	r3, [pc, #24]	; (800cd1c <_svfiprintf_r+0x1f8>)
 800cd04:	a904      	add	r1, sp, #16
 800cd06:	4638      	mov	r0, r7
 800cd08:	f000 f87a 	bl	800ce00 <_printf_i>
 800cd0c:	e7eb      	b.n	800cce6 <_svfiprintf_r+0x1c2>
 800cd0e:	bf00      	nop
 800cd10:	0800d35c 	.word	0x0800d35c
 800cd14:	0800d366 	.word	0x0800d366
 800cd18:	00000000 	.word	0x00000000
 800cd1c:	0800ca6d 	.word	0x0800ca6d
 800cd20:	0800d362 	.word	0x0800d362

0800cd24 <_printf_common>:
 800cd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd28:	4616      	mov	r6, r2
 800cd2a:	4699      	mov	r9, r3
 800cd2c:	688a      	ldr	r2, [r1, #8]
 800cd2e:	690b      	ldr	r3, [r1, #16]
 800cd30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd34:	4293      	cmp	r3, r2
 800cd36:	bfb8      	it	lt
 800cd38:	4613      	movlt	r3, r2
 800cd3a:	6033      	str	r3, [r6, #0]
 800cd3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd40:	4607      	mov	r7, r0
 800cd42:	460c      	mov	r4, r1
 800cd44:	b10a      	cbz	r2, 800cd4a <_printf_common+0x26>
 800cd46:	3301      	adds	r3, #1
 800cd48:	6033      	str	r3, [r6, #0]
 800cd4a:	6823      	ldr	r3, [r4, #0]
 800cd4c:	0699      	lsls	r1, r3, #26
 800cd4e:	bf42      	ittt	mi
 800cd50:	6833      	ldrmi	r3, [r6, #0]
 800cd52:	3302      	addmi	r3, #2
 800cd54:	6033      	strmi	r3, [r6, #0]
 800cd56:	6825      	ldr	r5, [r4, #0]
 800cd58:	f015 0506 	ands.w	r5, r5, #6
 800cd5c:	d106      	bne.n	800cd6c <_printf_common+0x48>
 800cd5e:	f104 0a19 	add.w	sl, r4, #25
 800cd62:	68e3      	ldr	r3, [r4, #12]
 800cd64:	6832      	ldr	r2, [r6, #0]
 800cd66:	1a9b      	subs	r3, r3, r2
 800cd68:	42ab      	cmp	r3, r5
 800cd6a:	dc26      	bgt.n	800cdba <_printf_common+0x96>
 800cd6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd70:	1e13      	subs	r3, r2, #0
 800cd72:	6822      	ldr	r2, [r4, #0]
 800cd74:	bf18      	it	ne
 800cd76:	2301      	movne	r3, #1
 800cd78:	0692      	lsls	r2, r2, #26
 800cd7a:	d42b      	bmi.n	800cdd4 <_printf_common+0xb0>
 800cd7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd80:	4649      	mov	r1, r9
 800cd82:	4638      	mov	r0, r7
 800cd84:	47c0      	blx	r8
 800cd86:	3001      	adds	r0, #1
 800cd88:	d01e      	beq.n	800cdc8 <_printf_common+0xa4>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	68e5      	ldr	r5, [r4, #12]
 800cd8e:	6832      	ldr	r2, [r6, #0]
 800cd90:	f003 0306 	and.w	r3, r3, #6
 800cd94:	2b04      	cmp	r3, #4
 800cd96:	bf08      	it	eq
 800cd98:	1aad      	subeq	r5, r5, r2
 800cd9a:	68a3      	ldr	r3, [r4, #8]
 800cd9c:	6922      	ldr	r2, [r4, #16]
 800cd9e:	bf0c      	ite	eq
 800cda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cda4:	2500      	movne	r5, #0
 800cda6:	4293      	cmp	r3, r2
 800cda8:	bfc4      	itt	gt
 800cdaa:	1a9b      	subgt	r3, r3, r2
 800cdac:	18ed      	addgt	r5, r5, r3
 800cdae:	2600      	movs	r6, #0
 800cdb0:	341a      	adds	r4, #26
 800cdb2:	42b5      	cmp	r5, r6
 800cdb4:	d11a      	bne.n	800cdec <_printf_common+0xc8>
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	e008      	b.n	800cdcc <_printf_common+0xa8>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	4652      	mov	r2, sl
 800cdbe:	4649      	mov	r1, r9
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	47c0      	blx	r8
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	d103      	bne.n	800cdd0 <_printf_common+0xac>
 800cdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdd0:	3501      	adds	r5, #1
 800cdd2:	e7c6      	b.n	800cd62 <_printf_common+0x3e>
 800cdd4:	18e1      	adds	r1, r4, r3
 800cdd6:	1c5a      	adds	r2, r3, #1
 800cdd8:	2030      	movs	r0, #48	; 0x30
 800cdda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdde:	4422      	add	r2, r4
 800cde0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cde4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cde8:	3302      	adds	r3, #2
 800cdea:	e7c7      	b.n	800cd7c <_printf_common+0x58>
 800cdec:	2301      	movs	r3, #1
 800cdee:	4622      	mov	r2, r4
 800cdf0:	4649      	mov	r1, r9
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	47c0      	blx	r8
 800cdf6:	3001      	adds	r0, #1
 800cdf8:	d0e6      	beq.n	800cdc8 <_printf_common+0xa4>
 800cdfa:	3601      	adds	r6, #1
 800cdfc:	e7d9      	b.n	800cdb2 <_printf_common+0x8e>
	...

0800ce00 <_printf_i>:
 800ce00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce04:	7e0f      	ldrb	r7, [r1, #24]
 800ce06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce08:	2f78      	cmp	r7, #120	; 0x78
 800ce0a:	4691      	mov	r9, r2
 800ce0c:	4680      	mov	r8, r0
 800ce0e:	460c      	mov	r4, r1
 800ce10:	469a      	mov	sl, r3
 800ce12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce16:	d807      	bhi.n	800ce28 <_printf_i+0x28>
 800ce18:	2f62      	cmp	r7, #98	; 0x62
 800ce1a:	d80a      	bhi.n	800ce32 <_printf_i+0x32>
 800ce1c:	2f00      	cmp	r7, #0
 800ce1e:	f000 80d8 	beq.w	800cfd2 <_printf_i+0x1d2>
 800ce22:	2f58      	cmp	r7, #88	; 0x58
 800ce24:	f000 80a3 	beq.w	800cf6e <_printf_i+0x16e>
 800ce28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce30:	e03a      	b.n	800cea8 <_printf_i+0xa8>
 800ce32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce36:	2b15      	cmp	r3, #21
 800ce38:	d8f6      	bhi.n	800ce28 <_printf_i+0x28>
 800ce3a:	a101      	add	r1, pc, #4	; (adr r1, 800ce40 <_printf_i+0x40>)
 800ce3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce40:	0800ce99 	.word	0x0800ce99
 800ce44:	0800cead 	.word	0x0800cead
 800ce48:	0800ce29 	.word	0x0800ce29
 800ce4c:	0800ce29 	.word	0x0800ce29
 800ce50:	0800ce29 	.word	0x0800ce29
 800ce54:	0800ce29 	.word	0x0800ce29
 800ce58:	0800cead 	.word	0x0800cead
 800ce5c:	0800ce29 	.word	0x0800ce29
 800ce60:	0800ce29 	.word	0x0800ce29
 800ce64:	0800ce29 	.word	0x0800ce29
 800ce68:	0800ce29 	.word	0x0800ce29
 800ce6c:	0800cfb9 	.word	0x0800cfb9
 800ce70:	0800cedd 	.word	0x0800cedd
 800ce74:	0800cf9b 	.word	0x0800cf9b
 800ce78:	0800ce29 	.word	0x0800ce29
 800ce7c:	0800ce29 	.word	0x0800ce29
 800ce80:	0800cfdb 	.word	0x0800cfdb
 800ce84:	0800ce29 	.word	0x0800ce29
 800ce88:	0800cedd 	.word	0x0800cedd
 800ce8c:	0800ce29 	.word	0x0800ce29
 800ce90:	0800ce29 	.word	0x0800ce29
 800ce94:	0800cfa3 	.word	0x0800cfa3
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	1d1a      	adds	r2, r3, #4
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	602a      	str	r2, [r5, #0]
 800cea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e0a3      	b.n	800cff4 <_printf_i+0x1f4>
 800ceac:	6820      	ldr	r0, [r4, #0]
 800ceae:	6829      	ldr	r1, [r5, #0]
 800ceb0:	0606      	lsls	r6, r0, #24
 800ceb2:	f101 0304 	add.w	r3, r1, #4
 800ceb6:	d50a      	bpl.n	800cece <_printf_i+0xce>
 800ceb8:	680e      	ldr	r6, [r1, #0]
 800ceba:	602b      	str	r3, [r5, #0]
 800cebc:	2e00      	cmp	r6, #0
 800cebe:	da03      	bge.n	800cec8 <_printf_i+0xc8>
 800cec0:	232d      	movs	r3, #45	; 0x2d
 800cec2:	4276      	negs	r6, r6
 800cec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cec8:	485e      	ldr	r0, [pc, #376]	; (800d044 <_printf_i+0x244>)
 800ceca:	230a      	movs	r3, #10
 800cecc:	e019      	b.n	800cf02 <_printf_i+0x102>
 800cece:	680e      	ldr	r6, [r1, #0]
 800ced0:	602b      	str	r3, [r5, #0]
 800ced2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ced6:	bf18      	it	ne
 800ced8:	b236      	sxthne	r6, r6
 800ceda:	e7ef      	b.n	800cebc <_printf_i+0xbc>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	6820      	ldr	r0, [r4, #0]
 800cee0:	1d19      	adds	r1, r3, #4
 800cee2:	6029      	str	r1, [r5, #0]
 800cee4:	0601      	lsls	r1, r0, #24
 800cee6:	d501      	bpl.n	800ceec <_printf_i+0xec>
 800cee8:	681e      	ldr	r6, [r3, #0]
 800ceea:	e002      	b.n	800cef2 <_printf_i+0xf2>
 800ceec:	0646      	lsls	r6, r0, #25
 800ceee:	d5fb      	bpl.n	800cee8 <_printf_i+0xe8>
 800cef0:	881e      	ldrh	r6, [r3, #0]
 800cef2:	4854      	ldr	r0, [pc, #336]	; (800d044 <_printf_i+0x244>)
 800cef4:	2f6f      	cmp	r7, #111	; 0x6f
 800cef6:	bf0c      	ite	eq
 800cef8:	2308      	moveq	r3, #8
 800cefa:	230a      	movne	r3, #10
 800cefc:	2100      	movs	r1, #0
 800cefe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf02:	6865      	ldr	r5, [r4, #4]
 800cf04:	60a5      	str	r5, [r4, #8]
 800cf06:	2d00      	cmp	r5, #0
 800cf08:	bfa2      	ittt	ge
 800cf0a:	6821      	ldrge	r1, [r4, #0]
 800cf0c:	f021 0104 	bicge.w	r1, r1, #4
 800cf10:	6021      	strge	r1, [r4, #0]
 800cf12:	b90e      	cbnz	r6, 800cf18 <_printf_i+0x118>
 800cf14:	2d00      	cmp	r5, #0
 800cf16:	d04d      	beq.n	800cfb4 <_printf_i+0x1b4>
 800cf18:	4615      	mov	r5, r2
 800cf1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf1e:	fb03 6711 	mls	r7, r3, r1, r6
 800cf22:	5dc7      	ldrb	r7, [r0, r7]
 800cf24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf28:	4637      	mov	r7, r6
 800cf2a:	42bb      	cmp	r3, r7
 800cf2c:	460e      	mov	r6, r1
 800cf2e:	d9f4      	bls.n	800cf1a <_printf_i+0x11a>
 800cf30:	2b08      	cmp	r3, #8
 800cf32:	d10b      	bne.n	800cf4c <_printf_i+0x14c>
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	07de      	lsls	r6, r3, #31
 800cf38:	d508      	bpl.n	800cf4c <_printf_i+0x14c>
 800cf3a:	6923      	ldr	r3, [r4, #16]
 800cf3c:	6861      	ldr	r1, [r4, #4]
 800cf3e:	4299      	cmp	r1, r3
 800cf40:	bfde      	ittt	le
 800cf42:	2330      	movle	r3, #48	; 0x30
 800cf44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf4c:	1b52      	subs	r2, r2, r5
 800cf4e:	6122      	str	r2, [r4, #16]
 800cf50:	f8cd a000 	str.w	sl, [sp]
 800cf54:	464b      	mov	r3, r9
 800cf56:	aa03      	add	r2, sp, #12
 800cf58:	4621      	mov	r1, r4
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	f7ff fee2 	bl	800cd24 <_printf_common>
 800cf60:	3001      	adds	r0, #1
 800cf62:	d14c      	bne.n	800cffe <_printf_i+0x1fe>
 800cf64:	f04f 30ff 	mov.w	r0, #4294967295
 800cf68:	b004      	add	sp, #16
 800cf6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6e:	4835      	ldr	r0, [pc, #212]	; (800d044 <_printf_i+0x244>)
 800cf70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf74:	6829      	ldr	r1, [r5, #0]
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf7c:	6029      	str	r1, [r5, #0]
 800cf7e:	061d      	lsls	r5, r3, #24
 800cf80:	d514      	bpl.n	800cfac <_printf_i+0x1ac>
 800cf82:	07df      	lsls	r7, r3, #31
 800cf84:	bf44      	itt	mi
 800cf86:	f043 0320 	orrmi.w	r3, r3, #32
 800cf8a:	6023      	strmi	r3, [r4, #0]
 800cf8c:	b91e      	cbnz	r6, 800cf96 <_printf_i+0x196>
 800cf8e:	6823      	ldr	r3, [r4, #0]
 800cf90:	f023 0320 	bic.w	r3, r3, #32
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	2310      	movs	r3, #16
 800cf98:	e7b0      	b.n	800cefc <_printf_i+0xfc>
 800cf9a:	6823      	ldr	r3, [r4, #0]
 800cf9c:	f043 0320 	orr.w	r3, r3, #32
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	2378      	movs	r3, #120	; 0x78
 800cfa4:	4828      	ldr	r0, [pc, #160]	; (800d048 <_printf_i+0x248>)
 800cfa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfaa:	e7e3      	b.n	800cf74 <_printf_i+0x174>
 800cfac:	0659      	lsls	r1, r3, #25
 800cfae:	bf48      	it	mi
 800cfb0:	b2b6      	uxthmi	r6, r6
 800cfb2:	e7e6      	b.n	800cf82 <_printf_i+0x182>
 800cfb4:	4615      	mov	r5, r2
 800cfb6:	e7bb      	b.n	800cf30 <_printf_i+0x130>
 800cfb8:	682b      	ldr	r3, [r5, #0]
 800cfba:	6826      	ldr	r6, [r4, #0]
 800cfbc:	6961      	ldr	r1, [r4, #20]
 800cfbe:	1d18      	adds	r0, r3, #4
 800cfc0:	6028      	str	r0, [r5, #0]
 800cfc2:	0635      	lsls	r5, r6, #24
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	d501      	bpl.n	800cfcc <_printf_i+0x1cc>
 800cfc8:	6019      	str	r1, [r3, #0]
 800cfca:	e002      	b.n	800cfd2 <_printf_i+0x1d2>
 800cfcc:	0670      	lsls	r0, r6, #25
 800cfce:	d5fb      	bpl.n	800cfc8 <_printf_i+0x1c8>
 800cfd0:	8019      	strh	r1, [r3, #0]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	6123      	str	r3, [r4, #16]
 800cfd6:	4615      	mov	r5, r2
 800cfd8:	e7ba      	b.n	800cf50 <_printf_i+0x150>
 800cfda:	682b      	ldr	r3, [r5, #0]
 800cfdc:	1d1a      	adds	r2, r3, #4
 800cfde:	602a      	str	r2, [r5, #0]
 800cfe0:	681d      	ldr	r5, [r3, #0]
 800cfe2:	6862      	ldr	r2, [r4, #4]
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	f7f3 f8fa 	bl	80001e0 <memchr>
 800cfec:	b108      	cbz	r0, 800cff2 <_printf_i+0x1f2>
 800cfee:	1b40      	subs	r0, r0, r5
 800cff0:	6060      	str	r0, [r4, #4]
 800cff2:	6863      	ldr	r3, [r4, #4]
 800cff4:	6123      	str	r3, [r4, #16]
 800cff6:	2300      	movs	r3, #0
 800cff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cffc:	e7a8      	b.n	800cf50 <_printf_i+0x150>
 800cffe:	6923      	ldr	r3, [r4, #16]
 800d000:	462a      	mov	r2, r5
 800d002:	4649      	mov	r1, r9
 800d004:	4640      	mov	r0, r8
 800d006:	47d0      	blx	sl
 800d008:	3001      	adds	r0, #1
 800d00a:	d0ab      	beq.n	800cf64 <_printf_i+0x164>
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	079b      	lsls	r3, r3, #30
 800d010:	d413      	bmi.n	800d03a <_printf_i+0x23a>
 800d012:	68e0      	ldr	r0, [r4, #12]
 800d014:	9b03      	ldr	r3, [sp, #12]
 800d016:	4298      	cmp	r0, r3
 800d018:	bfb8      	it	lt
 800d01a:	4618      	movlt	r0, r3
 800d01c:	e7a4      	b.n	800cf68 <_printf_i+0x168>
 800d01e:	2301      	movs	r3, #1
 800d020:	4632      	mov	r2, r6
 800d022:	4649      	mov	r1, r9
 800d024:	4640      	mov	r0, r8
 800d026:	47d0      	blx	sl
 800d028:	3001      	adds	r0, #1
 800d02a:	d09b      	beq.n	800cf64 <_printf_i+0x164>
 800d02c:	3501      	adds	r5, #1
 800d02e:	68e3      	ldr	r3, [r4, #12]
 800d030:	9903      	ldr	r1, [sp, #12]
 800d032:	1a5b      	subs	r3, r3, r1
 800d034:	42ab      	cmp	r3, r5
 800d036:	dcf2      	bgt.n	800d01e <_printf_i+0x21e>
 800d038:	e7eb      	b.n	800d012 <_printf_i+0x212>
 800d03a:	2500      	movs	r5, #0
 800d03c:	f104 0619 	add.w	r6, r4, #25
 800d040:	e7f5      	b.n	800d02e <_printf_i+0x22e>
 800d042:	bf00      	nop
 800d044:	0800d36d 	.word	0x0800d36d
 800d048:	0800d37e 	.word	0x0800d37e

0800d04c <_sbrk_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4d06      	ldr	r5, [pc, #24]	; (800d068 <_sbrk_r+0x1c>)
 800d050:	2300      	movs	r3, #0
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	f7f4 ffd2 	bl	8002000 <_sbrk>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_sbrk_r+0x1a>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_sbrk_r+0x1a>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	20003440 	.word	0x20003440

0800d06c <__retarget_lock_acquire_recursive>:
 800d06c:	4770      	bx	lr

0800d06e <__retarget_lock_release_recursive>:
 800d06e:	4770      	bx	lr

0800d070 <memmove>:
 800d070:	4288      	cmp	r0, r1
 800d072:	b510      	push	{r4, lr}
 800d074:	eb01 0402 	add.w	r4, r1, r2
 800d078:	d902      	bls.n	800d080 <memmove+0x10>
 800d07a:	4284      	cmp	r4, r0
 800d07c:	4623      	mov	r3, r4
 800d07e:	d807      	bhi.n	800d090 <memmove+0x20>
 800d080:	1e43      	subs	r3, r0, #1
 800d082:	42a1      	cmp	r1, r4
 800d084:	d008      	beq.n	800d098 <memmove+0x28>
 800d086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d08a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d08e:	e7f8      	b.n	800d082 <memmove+0x12>
 800d090:	4402      	add	r2, r0
 800d092:	4601      	mov	r1, r0
 800d094:	428a      	cmp	r2, r1
 800d096:	d100      	bne.n	800d09a <memmove+0x2a>
 800d098:	bd10      	pop	{r4, pc}
 800d09a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d09e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0a2:	e7f7      	b.n	800d094 <memmove+0x24>

0800d0a4 <__malloc_lock>:
 800d0a4:	4801      	ldr	r0, [pc, #4]	; (800d0ac <__malloc_lock+0x8>)
 800d0a6:	f7ff bfe1 	b.w	800d06c <__retarget_lock_acquire_recursive>
 800d0aa:	bf00      	nop
 800d0ac:	2000343c 	.word	0x2000343c

0800d0b0 <__malloc_unlock>:
 800d0b0:	4801      	ldr	r0, [pc, #4]	; (800d0b8 <__malloc_unlock+0x8>)
 800d0b2:	f7ff bfdc 	b.w	800d06e <__retarget_lock_release_recursive>
 800d0b6:	bf00      	nop
 800d0b8:	2000343c 	.word	0x2000343c

0800d0bc <_realloc_r>:
 800d0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c0:	4680      	mov	r8, r0
 800d0c2:	4614      	mov	r4, r2
 800d0c4:	460e      	mov	r6, r1
 800d0c6:	b921      	cbnz	r1, 800d0d2 <_realloc_r+0x16>
 800d0c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	f7ff bc59 	b.w	800c984 <_malloc_r>
 800d0d2:	b92a      	cbnz	r2, 800d0e0 <_realloc_r+0x24>
 800d0d4:	f7ff fbea 	bl	800c8ac <_free_r>
 800d0d8:	4625      	mov	r5, r4
 800d0da:	4628      	mov	r0, r5
 800d0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e0:	f000 f81b 	bl	800d11a <_malloc_usable_size_r>
 800d0e4:	4284      	cmp	r4, r0
 800d0e6:	4607      	mov	r7, r0
 800d0e8:	d802      	bhi.n	800d0f0 <_realloc_r+0x34>
 800d0ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0ee:	d812      	bhi.n	800d116 <_realloc_r+0x5a>
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	4640      	mov	r0, r8
 800d0f4:	f7ff fc46 	bl	800c984 <_malloc_r>
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d0ed      	beq.n	800d0da <_realloc_r+0x1e>
 800d0fe:	42bc      	cmp	r4, r7
 800d100:	4622      	mov	r2, r4
 800d102:	4631      	mov	r1, r6
 800d104:	bf28      	it	cs
 800d106:	463a      	movcs	r2, r7
 800d108:	f7ff fb9a 	bl	800c840 <memcpy>
 800d10c:	4631      	mov	r1, r6
 800d10e:	4640      	mov	r0, r8
 800d110:	f7ff fbcc 	bl	800c8ac <_free_r>
 800d114:	e7e1      	b.n	800d0da <_realloc_r+0x1e>
 800d116:	4635      	mov	r5, r6
 800d118:	e7df      	b.n	800d0da <_realloc_r+0x1e>

0800d11a <_malloc_usable_size_r>:
 800d11a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d11e:	1f18      	subs	r0, r3, #4
 800d120:	2b00      	cmp	r3, #0
 800d122:	bfbc      	itt	lt
 800d124:	580b      	ldrlt	r3, [r1, r0]
 800d126:	18c0      	addlt	r0, r0, r3
 800d128:	4770      	bx	lr
	...

0800d12c <_init>:
 800d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12e:	bf00      	nop
 800d130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d132:	bc08      	pop	{r3}
 800d134:	469e      	mov	lr, r3
 800d136:	4770      	bx	lr

0800d138 <_fini>:
 800d138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13a:	bf00      	nop
 800d13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13e:	bc08      	pop	{r3}
 800d140:	469e      	mov	lr, r3
 800d142:	4770      	bx	lr
